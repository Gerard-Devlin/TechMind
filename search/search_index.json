{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A test site","text":""},{"location":"#instructions","title":"Instructions","text":"<ul> <li>A CS beginner guide</li> <li>Learn from basic  grammar to higher level Machine learning knowledge</li> </ul> Danger Bug"},{"location":"#this-is-just-a-work-in-progress","title":"This is just a work in progress","text":""},{"location":"#testis-website-hoc-est-noli-mirari-si-cimices-incidas-et-sis-mitis-cum-hoc-loco","title":"Testis website hoc est, noli mirari si cimices incidas, et sis mitis cum hoc loco","text":""},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/","title":"1.\u6982\u8ff0","text":"1  <ul> <li>1<ul> <li>1.1.1 \u6570\u636e\u7ed3\u6784\u57fa\u672c\u6982\u5ff5</li> <li>1.1.2 \u6570\u636e\u7ed3\u6784\u4e09\u8981\u7d20<ul> <li>\u903b\u8f91\u7ed3\u6784</li> <li>\u6570\u636e\u7684\u8fd0\u7b97</li> <li>\u7269\u7406\u7ed3\u6784\uff08\u5b58\u50a8\u7ed3\u6784\uff09</li> <li>*\u6570\u636e\u7c7b\u578b\u3001\u62bd\u8c61\u6570\u636e\u7c7b\u578b<ul> <li>\u6570\u636e\u7c7b\u578b</li> <li>\u62bd\u8c61\u6570\u636e\u7c7b\u578b</li> </ul> </li> </ul> </li> <li>1.2.1 \u7b97\u6cd5\u57fa\u672c\u6982\u5ff5<ul> <li>\u7b97\u6cd5\u7279\u6027</li> </ul> </li> <li>1.2.2 \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6</li> <li>1.2.3 \u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6</li> <li>\u603b\u7ed3\uff08\u7b97\u6cd5\u6548\u7387\u5ea6\u91cf\uff09</li> </ul> </li> </ul>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#1","title":"1","text":""},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#111","title":"1.1.1 \u6570\u636e\u7ed3\u6784\u57fa\u672c\u6982\u5ff5","text":"<p>\u6570\u636e\u2192\u6570\u636e\u5bf9\u8c61\u2192\u6570\u636e\u5143\u7d20\u2192\u6570\u636e\u9879</p>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#112","title":"1.1.2 \u6570\u636e\u7ed3\u6784\u4e09\u8981\u7d20","text":""},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_1","title":"\u903b\u8f91\u7ed3\u6784","text":"<p>\u96c6\u5408\u3001\u7ebf\u6027\u3001\u6811\u5f62\u3001\u56fe\u72b6</p>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_2","title":"\u6570\u636e\u7684\u8fd0\u7b97","text":"<p>\u57fa\u672c\u8fd0\u7b97\uff1a</p> <p>\u2460\u67e5\u627e\u7b2c<code>i</code>\u4e2a\u6570\u636e\u5143\u7d20</p> <p>\u2461\u5728\u7b2c<code>i</code>\u4e2a\u4f4d\u7f6e\u63d2\u5165\u65b0\u7684\u6570\u636e\u5143\u7d20</p> <p>\u2462\u5220\u9664\u7b2c<code>i</code>\u4e2a\u4f4d\u7f6e\u7684\u6570\u636e\u5143\u7d20</p> <p>\u2026\u2026</p>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_3","title":"\u7269\u7406\u7ed3\u6784\uff08\u5b58\u50a8\u7ed3\u6784\uff09","text":"<p>\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u8868\u793a\u903b\u8f91\u5173\u7cfb</p> <p>[!NOTE]</p> <ul> <li> <p>\u6570\u636e\u7684\u5b58\u50a8\u7ed3\u6784\u4f1a\u5f71\u54cd\u5b58\u50a8\u7a7a\u95f4\u5206\u914d\u7684\u65b9\u4fbf\u7a0b\u5ea6</p> </li> <li> <p>\u6570\u636e\u7684\u5b58\u50a8\u7ed3\u6784\u4f1a\u5f71\u54cd\u5bf9\u6570\u636e\u8fd0\u7b97\u7684\u901f\u5ea6 </p> </li> </ul>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_4","title":"*\u6570\u636e\u7c7b\u578b\u3001\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":"<p>\u200b   \u662f\u4e00\u4e2a\u503c\u7684\u96c6\u5408\u548c\u5b9a\u4e49\u5728\u6b64\u96c6\u5408\u4e0a\u7684\u4e00\u7ec4\u64cd\u4f5c\u7684\u603b\u79f0</p> <p>\u200b       1)\u539f\u5b50\u7c7b\u578b\uff1a\u5176\u503c\u4e0d\u53ef\u518d\u5206\u7684\u6570\u636e\u7c7b\u578b</p> <p>\u200b       2)\u7ed3\u6784\u7c7b\u578b\uff1a\u5176\u503c\u53ef\u4ee5\u518d\u5206\u89e3\u4e3a\u82e5\u5e72\u6210\u5206\uff08\u5206\u91cf\uff09\u7684\u6570\u636e\u7c7b\u578b</p> <p>\u200b   \u62bd\u8c61\u6570\u636e\u7c7b\u578b(Abstract Data Type,ADT)\u662f\u62bd\u8c61\u6570\u636e\u7ec4\u7ec7\u53ca\u4e0e\u4e4b\u76f8\u5173\u7684\u64cd\u4f5c\u3002</p>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_5","title":"\u6570\u636e\u7c7b\u578b","text":""},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_6","title":"\u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":""},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#121","title":"1.2.1 \u7b97\u6cd5\u57fa\u672c\u6982\u5ff5","text":"\\[ \u7a0b\u5e8f=\u6570\u636e\u7ed3\u6784+\u7b97\u6cd5 \\]"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_7","title":"\u7b97\u6cd5\u7279\u6027","text":"<p>\u2460\u6709\u7a77\u6027\u2192\u7a0b\u5e8f\u53ef\u4ee5\u662f\u65e0\u7a77\u7684\u7684</p> <p>\u2461\u786e\u5b9a\u6027\uff1a\u76f8\u540c\u8f93\u5165\u5f97\u5230\u76f8\u540c\u8f93\u51fa</p> <p>\u2462\u53ef\u884c\u6027\uff1a0/\u591a\u4e2a \u8f93\u5165 \u200b         1/\u591a\u4e2a \u8f93\u51fa</p> <p>\u2463\u8f93\u5165</p> <p>\u2464\u8f93\u51fa</p>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#122","title":"1.2.2 \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6","text":""},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#123","title":"1.2.3 \u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6","text":"<p>[!TIP]</p> <p>\u7b97\u6cd5\u539f\u5730\u5de5\u4f5c\uff1a\u7b97\u6cd5\u6240\u9700\u5185\u5b58\u7a7a\u95f4\u4e3a\u5e38\u91cf</p>"},{"location":"DataStruct/1.%E6%A6%82%E8%BF%B0/#_8","title":"\u603b\u7ed3\uff08\u7b97\u6cd5\u6548\u7387\u5ea6\u91cf\uff09","text":""},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/","title":"2.\u94fe\u8868","text":"Linked List\ud83d\udcc3   <ul> <li>List</li> <li>Linked List</li> <li>Array vs Linked List</li> <li>Implementation in C/C++(singly-linked list)<ul> <li>\u203c\ufe0fBasics\uff1aTraversal of the list</li> <li>1\uff09Insert in the beginning</li> <li>2\uff09Insert in the middle</li> <li>3\uff09Delete in a list</li> <li>4\uff09Reverse a linked list<ul> <li>\u2460Iteration way</li> <li>\u2461Recursion way to print</li> <li>\u2462Recursion way</li> </ul> </li> </ul> </li> <li>Doubly Linked List</li> <li>Implementation in C/C++(doubly-linked list)</li> </ul>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#list","title":"List","text":"<p>question: can\u2019t I do it with arrays?</p> <ul> <li>empty list has size 0</li> <li>insert/remove/count</li> <li>read/modify</li> <li>specify data-type</li> </ul> <p>When array is full, create a new larger array ,copy previous array into the new array.</p> <p>free the memory of the previous array</p> <ol> <li>Access-read/write \u2013O(1)</li> <li>Insert/remove/add \u2013 O(n)</li> </ol>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#linked-list","title":"Linked List","text":"<pre><code>struct Node{\n    int data;   //4 bytes\n    Node *next; //4 bytes\n}\n</code></pre> <p>address of the head node gives us the access to the complete list</p> <ol> <li>Access to element \u2013O(n)</li> <li>Insert/remove/add \u2013 O(n)</li> </ol>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#array-vs-linked-list","title":"Array vs Linked List","text":"<ul> <li> Array Linked List 1)Cost of accessing an element constant time\u2013O(1) Average case\u2013O(n) 2)Memory usage fixed size no unused memory memory may not be available as a large block extra memory for pointer variables memory may be available as multiple small blocks 3)Cost of inserting/deleting an element a) at beginning -O(n) a)-O(1) b)at end -O(1) b)-O(n) 4)Easy to use \u2714\ufe0f \u274c </li> </ul>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#implementation-in-ccsingly-linked-list","title":"Implementation in C/C++(singly-linked list)","text":"<pre><code>Node *A;\nA=NULL;//empty list\nNode *temp=(*Node)malloc(sizeof(Node));//C\nNode *temp=new Node();//C++\n(*temp).data=2;\n//OR\ntemp-&gt;data=2;\n\n(*temp).link=NULL;\n//OR\ntemp-&gt;link=NULL;\nA=temp;\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#basicstraversal-of-the-list","title":"\u203c\ufe0fBasics\uff1aTraversal of the list","text":"<pre><code>while(temp1-&gt;link!=NULL){\n    temp1=temp1-&gt;link;\n}\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#1insert-in-the-beginning","title":"1\uff09Insert in the beginning","text":"<pre><code>//Insert in the beginning\nstruct Node {\n    int data;\n    Node* next;\n};\n\n\nstruct Node*head;//global variable\n\n\nvoid Insert(int x) {\n    struct Node *temp=(Node*)malloc(sizeof(struct Node));\n    //or---------\n    Node *temp=new Node();//C++\n    //-------------\n    temp-&gt;data=x;\n    temp-&gt;next=head;\n    head=temp;\n}\nvoid Print() {\n    struct Node* temp=head;\n    printf(\"List is:\");\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;next;\n    }\n    printf(\"\\n\");\n}\n\nint main(){\n    head=NULL;//empty list\n    printf(\"How many numbers?\");\n    int n,i,x;\n    scanf(\"%d\",&amp;n);\n    for(i=0;i&lt;n;i++) {\n        printf(\"Enter number:\");\n        scanf(\"%d\",&amp;x);\n        Insert(x);\n        Print();\n    }\n}\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#2insert-in-the-middle","title":"2\uff09Insert in the middle","text":"<pre><code>struct Node {\n    int data;\n    Node*next;\n};\n\nstruct Node*head;//pointer to the head\n\nvoid Insert(int data,int n);\nvoid Print();\n\nint main() {\n    head=NULL;      //empty list\n    Insert(2,1);    //List:2\n    Insert(3,2);    //List:2,3\n    Insert(4,1);    //list:4,2,3\n    Insert(5,2);    //List:4,5,2,3\n    Print();\n}\n//-------------------------------------------------------------------------------------------\nvoid Insert(int data,int n) {\n    Node *temp1=new Node();\n    temp1-&gt;data=data;\n    temp1-&gt;next=NULL;\n    if(n==1) {//in case to insert in the beginning\n        temp1-&gt;next=head;\n        head=temp1;\n        return;\n    }\n    Node *temp2=head;//temp2 is an aid for finding the position\n    for(int i=0;i&lt;n-2;i++) {\n        temp2=temp2-&gt;next;\n    }//go to the n-1 node\n    temp1-&gt;next=temp2-&gt;next;\n    temp2-&gt;next=temp1;\n}\n//-------------------------------------------------------------------------------------------\nvoid Print() {\n    Node *temp=head;\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;next;\n    }\n    printf(\"\\n\");\n}\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#3delete-in-a-list","title":"3\uff09Delete in a list","text":"<ul> <li>fix the links</li> <li>free the space from memory</li> </ul> <pre><code>struct Node {\n    int data;\n    Node*next;\n};\nstruct Node*head;                  //global\n\nvoid Insert(int data);              //insert at the end of the list\nvoid Print();                       //print all the elements in the list\nvoid Delete(int n);                 //delete node at position n\n\nint main() {\n    head = NULL;\n    Insert(2);\n    Insert(4);\n    Insert(6);\n    Insert(5);          //List:5,6,4,2\n    int n;\n    printf(\"Enter a position:\\n\");\n    scanf(\"%d\", &amp;n);\n    Delete(n);\n    Print();\n}\n\n//-------------------------------------------------------------------------------------------\n\nvoid Delete(int n) {\n    Node*temp1=head;\n    int i;\n    if(n==1) {\n        head=temp1-&gt;next;\n        free(temp1);\n        return;\n    }\n\n    for(i=0;i&lt;n-2;i++) {\n        temp1=temp1-&gt;next;\n    }                               //temp1 points to the (n-1)th node\n    struct Node*temp2=temp1-&gt;next;\n    temp1-&gt;next=temp2-&gt;next;\n    free(temp2);                    //delete temp2\n}\n//-------------------------------------------------------------------------------------------\n\nvoid Insert(int x) {\n    struct Node *temp=new Node();\n    temp-&gt;data=x;\n    temp-&gt;next=head;\n    head=temp;\n}\nvoid Print() {\n    Node*temp=head;\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;next;\n    }\n    printf(\"\\n\");\n}\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#4reverse-a-linked-list","title":"4\uff09Reverse a linked list","text":""},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#1iteration-way","title":"\u2460Iteration way","text":"<pre><code>void Reverse() {\n    Node *next,*prev,*current;\n    current=head;\n    prev=NULL;\n    while(current!=NULL) {\n        next=current-&gt;next;\n        current-&gt;next=prev;\n        prev=current;\n        current=next;\n    }\n    head=prev;\n}\n</code></pre> <p>e.g.</p> <pre><code>struct Node {\n    int data;\n    Node* next;\n};\n\nstruct Node* head;\n\nstruct Node* Insert(Node* head, int data);\nvoid Print(Node* head);\nstruct Node* Reverse(Node* head);\n\nint main() {\n    head = NULL;\n    head = Insert(head, 2);\n    head = Insert(head, 4);\n    head = Insert(head, 6);\n    head = Insert(head, 8);\n    head = Reverse(head);\n    Print(head);\n}\n\nstruct Node* Insert(Node* head, int data) {\n    Node* temp = new Node();\n    temp-&gt;data = data;\n    temp-&gt;next = NULL;\n\n    if (head == NULL) {\n        head = temp;\n    } else {\n        Node* current = head;\n        while (current-&gt;next != NULL) {\n            current = current-&gt;next;\n        }\n        current-&gt;next = temp;\n    }\n    return head;\n}\n\nvoid Print(Node* head) {\n    while (head != NULL) {\n        std::cout &lt;&lt; head-&gt;data &lt;&lt; \" \";\n        head = head-&gt;next;\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\nstruct Node* Reverse(Node* head) {\n    Node* next = NULL;\n    Node* prev = NULL;\n    Node* current = head;\n\n    while (current != NULL) {\n        next = current-&gt;next;\n        current-&gt;next = prev;\n        prev = current;\n        current = next;\n    }\n    head = prev;\n    return head;\n}\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#2recursion-way-to-print","title":"\u2461Recursion way to print","text":"<p>[!NOTE]</p> <p>Recursion is like calling or using itself in the function</p>      Normal print  <pre><code>void Print(struct Node* p) {\n    //recursion\n    //2 6 5 4\n    if(p==NULL) return;           //Exit Recursion, prevent dead loop\n    printf(\"%d \",p-&gt;data);  //First print the value int the node\n    Print(p-&gt;next);               //Recursive call\n}\n</code></pre> Reverse print <pre><code>void ReversePrint(struct Node* q) {\n    //recursion\n    //4 5 6 2\n    if(q==NULL) return;           //Exit Recursion\n    ReversePrint(q-&gt;next);               //First do a Recursive call\n    printf(\"%d \",q-&gt;data);  //print the value int the node\n}\n</code></pre> <p>e.g.</p> <pre><code>struct Node {\n    int data;\n    Node*next;\n};\n\nstruct Node* Insert(Node* head, int data) {\n    Node *temp=new Node;\n    temp-&gt;data = data;\n    temp-&gt;next = NULL;\n    if (head == NULL) {\n        head = temp;\n    } else {\n        Node *current = head;\n        while (current-&gt;next != NULL) {\n            current = current-&gt;next;\n        }\n        current-&gt;next = temp;\n    }\n    return head;\n}\n\n\nvoid Print(struct Node* p) {\n    //recursion\n    //2 6 5 4\n    if(p==NULL) return;           //Exit Recursion\n    printf(\"%d \",p-&gt;data);  //First print the value int the node\n    Print(p-&gt;next);               //Recursive call\n}\n\nvoid ReversePrint(struct Node* q) {\n    //recursion\n    //4 5 6 2\n    if(q==NULL) return;           //Exit Recursion\n    ReversePrint(q-&gt;next);               //First do a Recursive call\n    printf(\"%d \",q-&gt;data);  //print the value int the node\n}\n\nint main() {\n    struct Node* head = NULL;//local variable,empty list \n    head = Insert(head,2);\n    head = Insert(head,4);\n    head = Insert(head,6);\n    head = Insert(head,5);\n    Print(head);\n    printf(\"\\n\");\n    ReversePrint(head);\n}\n</code></pre> <p></p> Recursion tree"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#3recursion-way","title":"\u2462Recursion  way","text":"<pre><code>struct Node*head;//global\nvoid Reverse(struct Node*p) {\n    if(p-&gt;next==NULL) {             //exit condition\n        head=p;\n        return;\n    }\n    Reverse(p-&gt;next);\n    //make reverse link\n    Node *q=p-&gt;next;\n    q-&gt;next=p;\n    p-&gt;next=NULL;\n}\n</code></pre> <p>[!TIP]</p> <pre><code>Node *q=p-&gt;next;\nq-&gt;next=p;\n//can also be written as \np-&gt;next-&gt;next=p\n</code></pre>"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#doubly-linked-list","title":"Doubly Linked List","text":"singly linked list  <p>Doubly linked list</p> <ul> <li>one link to the previous and one link to the next</li> </ul> <pre><code>struct Node {\n    int data;\n    struct Node* next;\n    struct Node* prev;\n};\n</code></pre> <p></p>      doubly linked list  <p>[!IMPORTANT]</p> pros cons Reverse look-up Extra memory for pointer to the previous node"},{"location":"DataStruct/2.%E9%93%BE%E8%A1%A8/#implementation-in-ccdoubly-linked-list","title":"Implementation in C/C++(doubly-linked list)","text":"wrong way <ul> <li> <p>The problem with using the  \u201c&amp;\u201d operator: The stack frame of GNN will be reclaimed and even if you have the address of e.g. 50, you won't be able to get it.-&gt;It doesn't create anything in the heap.</p> </li> <li> <p>The only way to access something in heap is through a pointer.</p> </li> </ul> <p></p> right way <p>Create new Node</p> <pre><code>struct Node *GetNewNode(int x) {\n    Node *newNode=new Node;\n    newNode-&gt;data=x;\n    newNode-&gt;prev=NULL;\n    newNode-&gt;next=head;\n    return newNode;\n}\n</code></pre> <p>Insert Ahead</p> <pre><code>void InsertAhead(int x) {\n    struct Node *newNode = GetNewNode(x);   //the newNode here is a local variable different from the one in the function GetNewNode,just share the same name\n    if(head==NULL) {//when list is empty\n        head=newNode;\n        return;\n    }\n    head-&gt;prev=newNode;\n    newNode-&gt;next=head;\n    head=newNode;\n}\n</code></pre> <p>Normal print/Reverse print</p> <pre><code>void Print() {\n    Node* temp=head;\n    printf(\"Forward:\");\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;next;\n    }\n    printf(\"\\n\");\n}\n\nvoid ReversePrint() {\n    Node *temp=head;\n    if(temp==NULL) return;//empty list,exit\n    //Going to last node\n    while(temp-&gt;next!=NULL) {\n        temp=temp-&gt;next;\n    }\n    //traversing backward using prev pointer\n    printf(\"Reverse :\");\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;prev;\n    }\n    printf(\"\\n\");\n}\n</code></pre> <p>e.g.</p> <pre><code>//using the functions upon\u2026\u2026 \nint main() {\n    head=NULL;\n    InsertAhead(2);Print();ReversePrint();\n    InsertAhead(3);Print();ReversePrint();\n    InsertAhead(4);Print();ReversePrint();\n    InsertAhead(5);Print();ReversePrint();\n}\n</code></pre>"},{"location":"DataStruct/3.%E6%A0%88/","title":"3.\u6808","text":"Stacks\ud83d\udd73\ufe0f   <ul> <li>Stack ADT</li> <li>Implementation in C/C++<ul> <li>1) Array implementation</li> <li>2) Linked List Implementation</li> </ul> </li> <li>Using stack to reverse<ul> <li>1) Reverse a string</li> <li>2) Reverse a linked list<ul> <li>explicit way</li> </ul> </li> </ul> </li> <li>Check for balanced parentheses</li> <li>Infix,Postfix,Prefix<ul> <li>1\uff09Intro<ul> <li>\u2460Infix</li> <li>\u2461Prefix</li> <li>\u2462Postfix</li> </ul> </li> <li>2\uff09Evaluation of Prefix and Postfix expressions</li> <li>3\uff09Infix to Postfix</li> </ul> </li> </ul>"},{"location":"DataStruct/3.%E6%A0%88/#stack-adt","title":"Stack ADT","text":"<p>ADT:</p> <ul> <li>only talk about features/operations\u2714\ufe0f</li> <li>no implementation\u274c</li> </ul> <p></p> <p>[!TIP]</p> <p>You can only get access to the one on top\u2192     Last In First Out (LIFO)</p> <ul> <li>Definition: A list with the restriction that insertion and deletion can be performed only from one end, called the top.</li> </ul> operations O(1) (1)<code>Push</code> push x into the stack (2)<code>Pop</code> Remove the latest element from stack (3)<code>Top</code> return element at the top (4)<code>IsEmpty</code> return T/F <p>[!IMPORTANT]</p> <p>Application</p> <ul> <li>Function calls/Recursion</li> <li>undo in an editor</li> <li>balanced parentheses<code>(){}[]</code></li> </ul>"},{"location":"DataStruct/3.%E6%A0%88/#implementation-in-cc","title":"Implementation in C/C++","text":"<p>We can implement stacks in :</p> <p>\u200b   a) arrays</p> <p>\u200b   b) linked list</p>"},{"location":"DataStruct/3.%E6%A0%88/#1-array-implementation","title":"1)  Array implementation","text":"logical diagram <p>[!CAUTION]</p> <ul> <li> <p>Only be done when an overflow doesn\u2019t happen</p> </li> <li> <p>Solution: create a larger array.(twice the size of the smaller array) Copy all element in the new array </p> </li> <li> Push O(1)\u2013Best O(n)\u2013Worst O(1)\u2013Average O(n) for n pushes </li> </ul> <pre><code>#define MAX_SIZE 101\nint A[MAX_SIZE];\nint top=-1;\nvoid Push(int x) {\n    if(top==MAX_SIZE-1) {\n        printf(\"Stack Overflow\\n\");\n    }\n    A[++top]=x;\n}\nvoid Pop() {\n    if(top==-1) {\n        printf(\"Stack Underflow\\n\");\n    }\n    top--;\n}\nint Top() {\n    return A[top];\n}\n\nvoid Print() {\n    int i;\n    printf(\"Stack:\\n\");\n    for(i=top;i&gt;=0;i--) {\n        printf(\"%d\\n\",A[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    Push(2);Print();\n    Push(5);Print();\n    Push(10);Print();\n    Pop();Print();\n    Push(12);Print();\n\n}\n</code></pre>"},{"location":"DataStruct/3.%E6%A0%88/#2-linked-list-implementation","title":"2)  Linked List Implementation","text":"<p>insert a new in the linked list </p> <ul> <li>create a new node</li> <li>insert /delete</li> <li>at the end(tail)\u2013<code>O(n)</code></li> <li>at beginning\u2013<code>O(1)</code></li> </ul> <p></p> <pre><code>struct Node {\n    int data;\n    Node *link;\n};\n\nstruct Node *top=NULL;//it means the same as Node *head=NULL;\n\nvoid Push(int x) {\n    Node *temp=new Node;\n    temp-&gt;data=x;\n    temp-&gt;link=top;\n    top=temp;\n}\n\nvoid Pop() {\n    Node *temp;\n    if (top==NULL) {\n        printf(\"Stack is empty\\n\");\n        return;\n    }\n    temp=top;\n    top=top-&gt;link;                  //making top point to the second node\n    delete temp;                    //in C++ use new/delete instead of malloc/free in C\n}\n\nvoid Top() {\n    if (top==NULL) {\n        printf(\"Stack is empty\\n\");\n        return;\n    }\n    printf(\"%d\\n\",top-&gt;data);\n}\n\nvoid IsEmpty() {\n    if (top==NULL) {\n        printf(\"Stack is empty\\n\");\n        return;\n    }else {\n        printf(\"Stack is not empty\\n\");\n    }\n}\n\nvoid Print() {\n    Node *temp=top;\n    printf(\"Stack is : \");\n    while(temp!=NULL) {                     //traversal of the linked list\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;link;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    Push(5);Print();IsEmpty();\n    Pop();Print();IsEmpty();\n    Push(6);Print();IsEmpty();\n    Push(7);Print();IsEmpty();\n    Push(8);Print();IsEmpty();\n    return 0;\n}\n</code></pre> <p>[!NOTE]</p> <ul> <li>Don't need to worry about overflow</li> <li>use memory only when needed -&gt;more graceful</li> </ul>"},{"location":"DataStruct/3.%E6%A0%88/#using-stack-to-reverse","title":"Using stack to reverse","text":"<ul> <li>1) Reverse a string   2) Reverse a linked list</li> </ul>"},{"location":"DataStruct/3.%E6%A0%88/#1-reverse-a-string","title":"1)  Reverse a string","text":"<p>use the characteristics of Stack \u2013(LIFO)</p> <p></p> <pre><code>#include &lt;stack&gt;                        //stack from standard template library\n#include &lt;iostream&gt;\nusing namespace std;\n\nvoid Reverse(char C[],int n) {\n    stack&lt;char&gt; S;                      //create a stack\n    //loop for push\n    for(int i=0;i&lt;n;i++) {\n        S.push(C[i]);\n    }\n    //loop for pop\n    for(int i=0;i&lt;n;i++) {\n        C[i]=S.top();                   //overwrite the character at index i\n        S.pop();                        //perform pop\n    }\n\n}\n\nint main(){\n    char C[51];\n    printf(\"Eneter a string: \");\n    gets(C);\n    Reverse(C,strlen(C));\n    printf(\"Output is %s\",C);\n}\n</code></pre> <p>[!NOTE]</p> <ul> <li>Time-Complexity=<code>O(n)</code></li> <li>Space-Complexity=<code>O(n)</code></li> </ul> <p></p> <p>easier way</p> <ul> <li>swap char[i] and char[j] while i&lt;j;</li> </ul>"},{"location":"DataStruct/3.%E6%A0%88/#2-reverse-a-linked-list","title":"2)  Reverse a linked list","text":"Iterative solution(Explicit Stack) Recursive solution(Implicit Stack) time\u2013O(n) time\u2013O(n) Space\u2013O(1) Space\u2013O(n)"},{"location":"DataStruct/3.%E6%A0%88/#explicit-way","title":"explicit way","text":"<pre><code>void Reverse() {\n    if(head==NULL) return;\n    stack&lt;Node*&gt;S;\n    while (temp!=NULL) {\n        //To push all references (traversal)\n        S.push(temp);\n        temp=temp-&gt;next;\n    }\n    Node *temp=S.top();\n    head=temp;\n    S.pop;\n    while(!S.empty()) {\n        temp-&gt;next=S.top();\n        S.pop();\n        temp=temp-&gt;next;\n    }\n    temp-&gt;next=NULL;\n}\n</code></pre>"},{"location":"DataStruct/3.%E6%A0%88/#check-for-balanced-parentheses","title":"Check for balanced parentheses","text":"<p>solution:</p> <ul> <li>scan from left to right</li> <li>if opening symbol, add it to a list(Push it in a stack)</li> <li>if closing symbol, remove last opening symbol in list(Pop it from a stack)</li> <li>should end with an empty list</li> </ul> <pre><code>Check for balanced Parentheses(exp){\n    n\u2190length(exp)\n    Create a stack S;\n    for i from 0 to n-1{\n        if (exp[i] is \"(\" or\"[\" or \"{\"){\n            Push(exp[i])\n            }else if(exp[i] is \")\" or\"]\" or \"}\")\n                if(S is empty){\n                    return false;\n                }else{\n                    Pop()\n                }\n            }\n\n    }\n}\nif S is empty true\nelse:  false\n</code></pre> <pre><code>#include &lt;string.h&gt;\n#include &lt;stdbool.h&gt;\n\nbool CheckforParentheses(char* expression) {\n    int n = strlen(expression);\n    char S[100];\n    int top = -1;// Stack to store the parentheses\n\n    for (int i = 0; i &lt; n; i++) {\n        if (expression[i] == '(' ||\n            expression[i] == '[' ||\n            expression[i] == '{'    ) {\n            S[++top] = expression[i];\n            } else if (expression[i] == ')' ||\n                       expression[i] == ']'||\n                       expression[i]=='}') {\n                if (top == -1) {\n                    return false;\n                } if (\n                    (expression[i] == ')' &amp;&amp; S[top] == '(') ||\n                    (expression[i] == ']' &amp;&amp; S[top] == '[') ||\n                    (expression[i] == '}' &amp;&amp; S[top] == '{')) {\n                    top--;\n                    }else {\n                        return false;\n                    }\n                       }\n    }\n    return top==-1;//return true if all parentheses are matched\n}\n\nint main() {\n    char expression[100];\n    printf(\"Enter an expression: \");\n    fgets(expression, sizeof(expression), stdin);\n    expression[strcspn(expression, \"\\n\")] = '\\0'; //Remove \\n from string\n    CheckforParentheses(expression);\n    if (CheckforParentheses(expression)) {\n        printf(\" The expression is valid\\n\");\n    } else {\n        printf(\"The expression is invalid\\n\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/3.%E6%A0%88/#infixpostfixprefix","title":"Infix,Postfix,Prefix","text":""},{"location":"DataStruct/3.%E6%A0%88/#1intro","title":"1\uff09Intro","text":""},{"location":"DataStruct/3.%E6%A0%88/#1infix","title":"\u2460Infix","text":""},{"location":"DataStruct/3.%E6%A0%88/#2prefix","title":"\u2461Prefix","text":""},{"location":"DataStruct/3.%E6%A0%88/#3postfix","title":"\u2462Postfix","text":""},{"location":"DataStruct/3.%E6%A0%88/#2evaluation-of-prefix-and-postfix-expressions","title":"2\uff09Evaluation of  Prefix and Postfix expressions","text":"<p>[!NOTE]</p> <p>Postfix\uff1a</p> <ul> <li> <p>Look for pattern <code>&lt;num&gt;&lt;num&gt;&lt;operator&gt;</code>(from left to right)</p> </li> <li> <p></p> </li> <li> <p><code>c++   //Sudo code   EvaluatePostfix(exp){       create a stack S;       for i to lenngth(exp)-1{           if(exp[i] is operand){               Push(exp[i])           }else if(exp[i] is operator){               op2 Pop;               op1 Pop;               res=Preform(exp[i],op1,op2);               Push(res)           }       }       return top of stack   }</code></p> </li> </ul> <p>Prefix\uff1a</p> <ul> <li>Look for pattern <code>&lt;num&gt;&lt;num&gt;&lt;operator&gt;</code></li> <li>Difference from Postfix: scan from right to left</li> </ul>"},{"location":"DataStruct/3.%E6%A0%88/#3infix-to-postfix","title":"3\uff09Infix to Postfix","text":"<pre><code>//Sudo code\nInfixToPostfix(exp){\n    create a stack s;\n    res-&gt;empty string;\n    for i from 0 to length (exp)-1{\n        if exp[i] is operand {\n            res&lt;-res+exp[i];\n        }\n        else if exp[i] is operator{\n            while(!=s.empty()&amp;&amp;HasHigherPrec(s.top(),exp[i])){\n                res&lt;-res+s.top();\n                s.Pop()\n            }\n            s.Push(exp[i]);\n        }\n        while(!s.empty()){\n            res&lt;-res+s.top();\n            s.pop();\n        }\n    }\n    return res;\n}\n</code></pre>"},{"location":"DataStruct/4.%E9%98%9F%E5%88%97/","title":"4.\u961f\u5217","text":"Queues  <ul> <li>Queue ADT</li> <li>Implementation of Queues<ul> <li>1 \uff09Array Implementation</li> </ul> </li> </ul>"},{"location":"DataStruct/4.%E9%98%9F%E5%88%97/#queue-adt","title":"Queue ADT","text":"<p>A list or collection that its insertion can be performed from at one end(rear) and deletion can be performed at other end(front)</p> <p>[!NOTE]</p> <p>Operations</p> <ul> <li><code>EnQueue(x)</code> or<code>Push(x)</code></li> <li><code>Dequeue()</code>or<code>Pop()</code></li> <li><code>front()</code>or<code>Peek()</code></li> <li><code>IsEmpty()</code></li> </ul> <pre><code>void EnQueue(int x);\nint Dequeue;\n</code></pre> <p></p>"},{"location":"DataStruct/4.%E9%98%9F%E5%88%97/#implementation-of-queues","title":"Implementation of Queues","text":""},{"location":"DataStruct/4.%E9%98%9F%E5%88%97/#1-array-implementation","title":"1 \uff09Array Implementation","text":""},{"location":"DataStruct/XCPC/","title":"XCPC","text":"Code  <ul> <li>STL<ul> <li>vector:\u987a\u5e8f\u5bb9\u5668\uff0c\u4efb\u610f\u7c7b\u578b\u52a8\u6001\u6570\u7ec4<ul> <li>e.g.1# \u3010\u6df1\u57fa15.\u4f8b2\u3011\u5bc4\u5305\u67dc</li> </ul> </li> <li>Queue<ul> <li>e.g.2# \u7ea6\u745f\u592b\u95ee\u9898</li> <li>e.g.3[NOIP2010 \u63d0\u9ad8\u7ec4] \u673a\u5668\u7ffb\u8bd1</li> </ul> </li> <li>Stack \u6808<ul> <li>e.g.4\u62ec\u53f7\u5e8f\u5217</li> </ul> </li> <li>\u6742\u9898\uff08\u5b57\u5178\u5e8f\uff09<ul> <li>e.g.5#String Minimization</li> </ul> </li> </ul> </li> <li>\u4e8c\u53c9\u6811<ul> <li>\u5206\u7c7b<ul> <li>\u6ee1\u4e8c\u53c9\u6811</li> <li>\u5b8c\u5168\u4e8c\u53c9\u6811</li> <li>\u9000\u5316\u4e8c\u53c9\u6811</li> <li>\u5b8c\u7f8e\u4e8c\u53c9\u6811</li> </ul> </li> <li>\u9759\u6001\u5199\u6cd5</li> <li>\u4e09\u79cd\u904d\u5386\u65b9\u5f0f<ul> <li>e.g.6\u4e8c\u53c9\u6811\u7684\u904d\u5386</li> <li>e.g.7[NOIP2004 \u666e\u53ca\u7ec4] FBI \u6811</li> </ul> </li> </ul> </li> <li>DFS<ul> <li>e.g.8[NOIP1998 \u666e\u53ca\u7ec4] \u5e42\u6b21\u65b9</li> </ul> </li> <li>\u5e76\u67e5\u96c6<ul> <li>\u2192\u65b9\u6cd5\uff1a\u8def\u5f84\u538b\u7f29<ul> <li>e.g.9\u4eb2\u621a\uff08\u6a21\u677f\uff09</li> <li>e.g.10[\u84dd\u6865\u676f 2017 \u56fd C] \u5408\u6839\u690d\u7269</li> <li>e.g.11[USACO16OPEN] Closing the Farm S</li> </ul> </li> </ul> </li> </ul>"},{"location":"DataStruct/XCPC/#stl","title":"STL","text":""},{"location":"DataStruct/XCPC/#vector","title":"vector:\u987a\u5e8f\u5bb9\u5668\uff0c\u4efb\u610f\u7c7b\u578b\u52a8\u6001\u6570\u7ec4","text":"<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int n;\n    cin&gt;&gt;n;\n    vector&lt;int&gt; v(n);\n    for(int i=0;i&lt;n;i++) {\n        cin&gt;&gt;v[i];\n    }\n    for(int i=0;i&lt;n;i++) {\n        cout&lt;&lt;v[i]+1&lt;&lt;\" \";\n    }\n}\n</code></pre> <pre><code>v.resize(2*n);\ncout&lt;&lt;v.size()&lt;&lt;endl;\n</code></pre> <pre><code> insert /pushback\n</code></pre>"},{"location":"DataStruct/XCPC/#eg1-152","title":"e.g.1# \u3010\u6df1\u57fa15.\u4f8b2\u3011\u5bc4\u5305\u67dc","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u8d85\u5e02\u91cc\u6709 \\(n(1\\le n\\le10^5)\\) \u4e2a\u5bc4\u5305\u67dc\u3002\u6bcf\u4e2a\u5bc4\u5305\u67dc\u683c\u5b50\u6570\u91cf\u4e0d\u4e00\uff0c\u7b2c \\(i\\) \u4e2a\u5bc4\u5305\u67dc\u6709 \\(a_i(1\\le a_i\\le10^5)\\) \u4e2a\u683c\u5b50\uff0c\u4e0d\u8fc7\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u5404\u4e2a \\(a_i\\) \u7684\u503c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5bc4\u5305\u67dc\uff0c\u683c\u5b50\u7f16\u53f7\u4ece 1 \u5f00\u59cb\uff0c\u4e00\u76f4\u5230 \\(a_i\\)\u3002\u73b0\u5728\u6709 \\(q(1 \\le q\\le10^5)\\) \u6b21\u64cd\u4f5c\uff1a</p> <ul> <li><code>1 i j k</code>\uff1a\u5728\u7b2c \\(i\\) \u4e2a\u67dc\u5b50\u7684\u7b2c \\(j\\) \u4e2a\u683c\u5b50\u5b58\u5165\u7269\u54c1 \\(k(0\\le k\\le 10^9)\\)\u3002\u5f53 \\(k=0\\) \u65f6\u8bf4\u660e\u6e05\u7a7a\u8be5\u683c\u5b50\u3002</li> <li><code>2 i j</code>\uff1a\u67e5\u8be2\u7b2c \\(i\\) \u4e2a\u67dc\u5b50\u7684\u7b2c \\(j\\) \u4e2a\u683c\u5b50\u4e2d\u7684\u7269\u54c1\u662f\u4ec0\u4e48\uff0c\u4fdd\u8bc1\u67e5\u8be2\u7684\u67dc\u5b50\u6709\u5b58\u8fc7\u4e1c\u897f\u3002</li> </ul> <p>\u5df2\u77e5\u8d85\u5e02\u91cc\u5171\u8ba1\u4e0d\u4f1a\u8d85\u8fc7 \\(10^7\\) \u4e2a\u5bc4\u5305\u683c\u5b50\uff0c\\(a_i\\) \u662f\u786e\u5b9a\u7136\u800c\u672a\u77e5\u7684\uff0c\u4f46\u662f\u4fdd\u8bc1\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u8be5\u67dc\u5b50\u5b58\u7269\u54c1\u8bf7\u6c42\u7684\u683c\u5b50\u7f16\u53f7\u7684\u6700\u5927\u503c\u3002\u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u67d0\u4e9b\u5bc4\u5305\u67dc\u4e2d\u4e00\u4e2a\u683c\u5b50\u90fd\u6ca1\u6709\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c 2 \u4e2a\u6574\u6570 \\(n\\) \u548c \\(q\\)\uff0c\u5bc4\u5305\u67dc\u4e2a\u6570\u548c\u8be2\u95ee\u6b21\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 \\(q\\) \u4e2a\u884c\uff0c\u6bcf\u884c\u6709\u82e5\u5e72\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u6b21\u64cd\u4f5c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\u65f6\uff0c\u8f93\u51fa\u7b54\u6848\uff0c\u4ee5\u6362\u884c\u9694\u5f00\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>5 4\n1 3 10000 118014\n1 1 1 1\n2 3 10000\n2 1 1\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>118014\n1\n</code></pre> <p>\u63d0\u793a</p> <p>\\(\\text{upd 2022.7.26}\\)\uff1a\u65b0\u589e\u52a0\u4e00\u7ec4 Hack \u6570\u636e\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n\n    vector&lt;vector&lt;int&gt; &gt; A(n + 1);\n    for (int i = 1; i &lt;= q; i++) {\n        int op;\n        cin &gt;&gt; op;\n        if (op == 1) {\n            int I, j, k;\n            cin &gt;&gt; I &gt;&gt; j &gt;&gt; k;\n            if (A[I].size() &lt; j + 1) {//in case there is no 'j'\n                A[I].resize(j + 1);//resize the 'j'\n            }\n            A[I][j] = k;\n        }\n        if (op == 2) {\n            int I, j;\n            cin &gt;&gt; I &gt;&gt; j;\n            cout &lt;&lt; A[I][j] &lt;&lt; endl;\n        }\n    }\n}\n</code></pre>"},{"location":"DataStruct/XCPC/#queue","title":"Queue","text":""},{"location":"DataStruct/XCPC/#eg2","title":"e.g.2# \u7ea6\u745f\u592b\u95ee\u9898","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\\(n\\) \u4e2a\u4eba\u56f4\u6210\u4e00\u5708\uff0c\u4ece\u7b2c\u4e00\u4e2a\u4eba\u5f00\u59cb\u62a5\u6570,\u6570\u5230 \\(m\\) \u7684\u4eba\u51fa\u5217\uff0c\u518d\u7531\u4e0b\u4e00\u4e2a\u4eba\u91cd\u65b0\u4ece \\(1\\) \u5f00\u59cb\u62a5\u6570\uff0c\u6570\u5230 \\(m\\) \u7684\u4eba\u518d\u51fa\u5708\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u6240\u6709\u7684\u4eba\u90fd\u51fa\u5708\uff0c\u8bf7\u8f93\u51fa\u4f9d\u6b21\u51fa\u5708\u4eba\u7684\u7f16\u53f7\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u4e24\u4e2a\u6574\u6570 \\(n,m\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u6309\u987a\u5e8f\u8f93\u51fa\u6bcf\u4e2a\u51fa\u5708\u4eba\u7684\u7f16\u53f7\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>10 3\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>3 6 9 2 7 1 8 5 10 4\n</code></pre> <p>\u63d0\u793a</p> <p>\\(1 \\le m, n \\le 100\\)</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n   int n, m;            // n\u662f\u4eba\u6570\uff0cm\u662f\u62a5\u6570\u5230\u51e0\u51fa\u5217\n   cin &gt;&gt; n &gt;&gt; m;\n\n   queue&lt;int&gt; q;        // \u521b\u5efa\u961f\u5217\u6a21\u62df\u5706\u5708\u4e2d\u7684\u4eba\n   for (int i = 1; i &lt;= n; i++) {  // \u5c061\u5230n\u7684\u6570\u5b57\u653e\u5165\u961f\u5217\n       q.push(i);       // \u6570\u5b57\u4ee3\u8868\u6bcf\u4e2a\u4eba\u7684\u7f16\u53f7\n   }\n\n   for (int i = 1; i &lt;= n; i++) {   // \u4e00\u5171\u8981\u51fa\u5217n\u4e2a\u4eba\n       for (int j = 1; j &lt; m; j++) { // \u6bcf\u6b21\u62a5\u6570\u5230m-1\n           int f = q.front();        // \u53d6\u51fa\u961f\u9996\u7684\u4eba\n           q.pop();                  // \u79fb\u9664\u961f\u9996\n           q.push(f);               // \u5c06\u8fd9\u4e2a\u4eba\u653e\u5230\u961f\u5c3e(\u56e0\u4e3a\u6ca1\u62a5\u5230m\uff0c\u4e0d\u7528\u51fa\u5217)\n       }\n       cout &lt;&lt; q.front() &lt;&lt; ' ';    // \u8f93\u51fa\u62a5\u6570\u4e3am\u7684\u4eba(\u5373\u51fa\u5217\u7684\u4eba)\n       q.pop();                     // \u79fb\u9664\u8fd9\u4e2a\u4eba(\u51fa\u5217)\n   }\n}\n</code></pre> \\[ \u7528\u6570\u5b66\u65b9\u6cd5\\\\ f(n,k)=(f(n\u22121,k)+k)\\mod n  \\] <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint josephus(int n, int k) {\n    if (n == 1) return 0;\n    return (josephus(n - 1, k) + k) % n;\n}\n\nint main() {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    int result = josephus(n, k);\n    cout &lt;&lt; result + 1 &lt;&lt; ' '; // \u8f93\u51fa\u7ed3\u679c\u52a01\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u7684\u4f4d\u7f6e\u662f\u4ece1\u5f00\u59cb\u7684\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/XCPC/#eg3noip2010","title":"e.g.3[NOIP2010 \u63d0\u9ad8\u7ec4] \u673a\u5668\u7ffb\u8bd1","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>NOIP2010 \u63d0\u9ad8\u7ec4 T1</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5c0f\u6668\u7684\u7535\u8111\u4e0a\u5b89\u88c5\u4e86\u4e00\u4e2a\u673a\u5668\u7ffb\u8bd1\u8f6f\u4ef6\uff0c\u4ed6\u7ecf\u5e38\u7528\u8fd9\u4e2a\u8f6f\u4ef6\u6765\u7ffb\u8bd1\u82f1\u8bed\u6587\u7ae0\u3002</p> <p>\u8fd9\u4e2a\u7ffb\u8bd1\u8f6f\u4ef6\u7684\u539f\u7406\u5f88\u7b80\u5355\uff0c\u5b83\u53ea\u662f\u4ece\u5934\u5230\u5c3e\uff0c\u4f9d\u6b21\u5c06\u6bcf\u4e2a\u82f1\u6587\u5355\u8bcd\u7528\u5bf9\u5e94\u7684\u4e2d\u6587\u542b\u4e49\u6765\u66ff\u6362\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u82f1\u6587\u5355\u8bcd\uff0c\u8f6f\u4ef6\u4f1a\u5148\u5728\u5185\u5b58\u4e2d\u67e5\u627e\u8fd9\u4e2a\u5355\u8bcd\u7684\u4e2d\u6587\u542b\u4e49\uff0c\u5982\u679c\u5185\u5b58\u4e2d\u6709\uff0c\u8f6f\u4ef6\u5c31\u4f1a\u7528\u5b83\u8fdb\u884c\u7ffb\u8bd1\uff1b\u5982\u679c\u5185\u5b58\u4e2d\u6ca1\u6709\uff0c\u8f6f\u4ef6\u5c31\u4f1a\u5728\u5916\u5b58\u4e2d\u7684\u8bcd\u5178\u5185\u67e5\u627e\uff0c\u67e5\u51fa\u5355\u8bcd\u7684\u4e2d\u6587\u542b\u4e49\u7136\u540e\u7ffb\u8bd1\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5355\u8bcd\u548c\u8bd1\u4e49\u653e\u5165\u5185\u5b58\uff0c\u4ee5\u5907\u540e\u7eed\u7684\u67e5\u627e\u548c\u7ffb\u8bd1\u3002</p> <p>\u5047\u8bbe\u5185\u5b58\u4e2d\u6709 \\(M\\) \u4e2a\u5355\u5143\uff0c\u6bcf\u5355\u5143\u80fd\u5b58\u653e\u4e00\u4e2a\u5355\u8bcd\u548c\u8bd1\u4e49\u3002\u6bcf\u5f53\u8f6f\u4ef6\u5c06\u4e00\u4e2a\u65b0\u5355\u8bcd\u5b58\u5165\u5185\u5b58\u524d\uff0c\u5982\u679c\u5f53\u524d\u5185\u5b58\u4e2d\u5df2\u5b58\u5165\u7684\u5355\u8bcd\u6570\u4e0d\u8d85\u8fc7 \\(M-1\\)\uff0c\u8f6f\u4ef6\u4f1a\u5c06\u65b0\u5355\u8bcd\u5b58\u5165\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u5185\u5b58\u5355\u5143\uff1b\u82e5\u5185\u5b58\u4e2d\u5df2\u5b58\u5165 \\(M\\) \u4e2a\u5355\u8bcd\uff0c\u8f6f\u4ef6\u4f1a\u6e05\u7a7a\u6700\u65e9\u8fdb\u5165\u5185\u5b58\u7684\u90a3\u4e2a\u5355\u8bcd\uff0c\u817e\u51fa\u5355\u5143\u6765\uff0c\u5b58\u653e\u65b0\u5355\u8bcd\u3002</p> <p>\u5047\u8bbe\u4e00\u7bc7\u82f1\u8bed\u6587\u7ae0\u7684\u957f\u5ea6\u4e3a \\(N\\) \u4e2a\u5355\u8bcd\u3002\u7ed9\u5b9a\u8fd9\u7bc7\u5f85\u8bd1\u6587\u7ae0\uff0c\u7ffb\u8bd1\u8f6f\u4ef6\u9700\u8981\u53bb\u5916\u5b58\u67e5\u627e\u591a\u5c11\u6b21\u8bcd\u5178\uff1f\u5047\u8bbe\u5728\u7ffb\u8bd1\u5f00\u59cb\u524d\uff0c\u5185\u5b58\u4e2d\u6ca1\u6709\u4efb\u4f55\u5355\u8bcd\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u5171 \\(2\\) \u884c\u3002\u6bcf\u884c\u4e2d\u4e24\u4e2a\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570 \\(M,N\\)\uff0c\u4ee3\u8868\u5185\u5b58\u5bb9\u91cf\u548c\u6587\u7ae0\u7684\u957f\u5ea6\u3002</p> <p>\u7b2c\u4e8c\u884c\u4e3a \\(N\\) \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u6309\u7167\u6587\u7ae0\u7684\u987a\u5e8f\uff0c\u6bcf\u4e2a\u6570\uff08\u5927\u5c0f\u4e0d\u8d85\u8fc7 \\(1000\\)\uff09\u4ee3\u8868\u4e00\u4e2a\u82f1\u6587\u5355\u8bcd\u3002\u6587\u7ae0\u4e2d\u4e24\u4e2a\u5355\u8bcd\u662f\u540c\u4e00\u4e2a\u5355\u8bcd\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u5bf9\u5e94\u7684\u975e\u8d1f\u6574\u6570\u76f8\u540c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u8f6f\u4ef6\u9700\u8981\u67e5\u8bcd\u5178\u7684\u6b21\u6570\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>3 7\n1 2 1 5 4 4 1\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>5\n</code></pre> <p>\u63d0\u793a</p> <p>\u6837\u4f8b\u89e3\u91ca</p> <p>\u6574\u4e2a\u67e5\u5b57\u5178\u8fc7\u7a0b\u5982\u4e0b\uff1a\u6bcf\u884c\u8868\u793a\u4e00\u4e2a\u5355\u8bcd\u7684\u7ffb\u8bd1\uff0c\u5192\u53f7\u524d\u4e3a\u672c\u6b21\u7ffb\u8bd1\u540e\u7684\u5185\u5b58\u72b6\u51b5\uff1a</p> <ol> <li><code>1</code>\uff1a\u67e5\u627e\u5355\u8bcd 1 \u5e76\u8c03\u5165\u5185\u5b58\u3002</li> <li><code>1 2</code>\uff1a\u67e5\u627e\u5355\u8bcd 2 \u5e76\u8c03\u5165\u5185\u5b58\u3002</li> <li><code>1 2</code>\uff1a\u5728\u5185\u5b58\u4e2d\u627e\u5230\u5355\u8bcd 1\u3002</li> <li><code>1 2 5</code>\uff1a\u67e5\u627e\u5355\u8bcd 5 \u5e76\u8c03\u5165\u5185\u5b58\u3002</li> <li><code>2 5 4</code>\uff1a\u67e5\u627e\u5355\u8bcd 4 \u5e76\u8c03\u5165\u5185\u5b58\u66ff\u4ee3\u5355\u8bcd 1\u3002</li> <li><code>2 5 4</code>\uff1a\u5728\u5185\u5b58\u4e2d\u627e\u5230\u5355\u8bcd 4\u3002</li> <li><code>5 4 1</code>\uff1a\u67e5\u627e\u5355\u8bcd 1 \u5e76\u8c03\u5165\u5185\u5b58\u66ff\u4ee3\u5355\u8bcd 2\u3002</li> </ol> <p>\u5171\u8ba1\u67e5\u4e86 \\(5\\) \u6b21\u8bcd\u5178\u3002</p> <p>\u6570\u636e\u8303\u56f4</p> <ul> <li>\u5bf9\u4e8e \\(10\\%\\) \u7684\u6570\u636e\u6709 \\(M=1\\)\uff0c\\(N \\leq 5\\)\uff1b</li> <li>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\u6709 \\(1 \\leq M \\leq 100\\)\uff0c\\(1 \\leq N \\leq 1000\\)\u3002</li> </ul> <pre><code>#include&lt;bits/stdc++.h&gt; \nusing namespace std;     \n\nint main() {\n    int M, N;           \n    cin &gt;&gt; M &gt;&gt; N;     \n    int count = 0;     \n\n    queue&lt;int&gt; Q;       // \u521b\u5efa\u961f\u5217Q\n    set&lt;int&gt; seen;      // \u521b\u5efa\u96c6\u5408seen\uff0c\u7528\u4e8e\u5feb\u901f\u5224\u65ad\u67d0\u4e2a\u6570\u662f\u5426\u5728\u7f13\u5b58\u4e2d\n\n    for (int i = 0; i &lt; N; i++) {          \n        if (seen.find(i) == seen.end()) {  // \u5982\u679c\u6570\u5b57i\u4e0d\u5728seen\u96c6\u5408\u4e2d\n                                          // seen.find()\u8fd4\u56de\u8fed\u4ee3\u5668\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8fd4\u56deseen.end()\n            Q.push(i);                    // \u5c06i\u52a0\u5165\u961f\u5217\n            seen.insert(i);               // \u5c06i\u52a0\u5165seen\u96c6\u5408\n            count++;                      // \u7f13\u5b58\u672a\u547d\u4e2d\u6b21\u6570\u52a01\n        }\n\n        if (Q.size() &gt; M) {              // \u5982\u679c\u961f\u5217\u5927\u5c0f\u8d85\u8fc7\u4e86\u9650\u5236M\n            int removed = Q.front();      // \u83b7\u53d6\u961f\u5217\u6700\u524d\u9762\u7684\u5143\u7d20\n            Q.pop();                      // \u4ece\u961f\u5217\u4e2d\u79fb\u9664\u8fd9\u4e2a\u5143\u7d20\n            seen.erase(removed);          // \u4eceseen\u96c6\u5408\u4e2d\u4e5f\u79fb\u9664\u8fd9\u4e2a\u5143\u7d20\n        }\n    }\n\n    cout &lt;&lt; count;      \n    return 0;\n}\n</code></pre> queue name \u521b\u5efa push \u961f\u5c3e\u63d2\u5165 pop \u961f\u9996\u5f39\u51fa size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 front() \u961f\u9996\u5143\u7d20 back() \u961f\u5c3e\u5143\u7d20"},{"location":"DataStruct/XCPC/#stack","title":"Stack \u6808","text":""},{"location":"DataStruct/XCPC/#eg4","title":"e.g.4\u62ec\u53f7\u5e8f\u5217","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5b9a\u4e49\u5982\u4e0b\u89c4\u5219\uff1a</p> <ol> <li>\u7a7a\u4e32\u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d</li> <li>\u82e5\u5b57\u7b26\u4e32 \\(S\\) \u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d\uff0c\u90a3\u4e48 \\(\\texttt{[}S\\texttt]\\) \u548c \\(\\texttt{(}S\\texttt)\\) \u4e5f\u90fd\u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d</li> <li>\u82e5\u5b57\u7b26\u4e32 \\(A\\) \u548c \\(B\\) \u90fd\u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d\uff0c\u90a3\u4e48 \\(AB\\)\uff08\u4e24\u5b57\u7b26\u4e32\u62fc\u63a5\u8d77\u6765\uff09\u4e5f\u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d\u3002</li> </ol> <p>\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\uff1a</p> <ul> <li><code>()</code>\uff0c<code>[]</code>\uff0c<code>(())</code>\uff0c<code>([])</code>\uff0c<code>()[]</code>\uff0c<code>()[()]</code></li> </ul> <p>\u800c\u4ee5\u4e0b\u51e0\u4e2a\u5219\u4e0d\u662f\uff1a</p> <ul> <li><code>(</code>\uff0c<code>[</code>\uff0c<code>]</code>\uff0c<code>)(</code>\uff0c<code>())</code>\uff0c<code>([()</code></li> </ul> <p>\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u7531 <code>(</code>\uff0c<code>)</code>\uff0c<code>[</code>\uff0c<code>]</code>\u6784\u6210\u7684\u5b57\u7b26\u4e32 \\(s\\)\uff0c\u8bf7\u4f60\u6309\u7167\u5982\u4e0b\u7684\u65b9\u5f0f\u7ed9\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u914d\u5bf9\uff1a 1. \u4ece\u5de6\u5230\u53f3\u626b\u63cf\u6574\u4e2a\u5b57\u7b26\u4e32\u3002 2. \u5bf9\u4e8e\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u53f3\u62ec\u53f7\uff0c\u8003\u5bdf\u5b83\u4e0e\u5b83\u5de6\u4fa7\u79bb\u5b83\u6700\u8fd1\u7684\u672a\u5339\u914d\u7684\u7684\u5de6\u62ec\u53f7\u3002\u5982\u679c\u8be5\u62ec\u53f7\u4e0e\u4e4b\u5bf9\u5e94\uff08\u5373\u5c0f\u62ec\u53f7\u5339\u914d\u5c0f\u62ec\u53f7\uff0c\u4e2d\u62ec\u53f7\u5339\u914d\u4e2d\u62ec\u53f7\uff09\uff0c\u5219\u5c06\u4e8c\u8005\u914d\u5bf9\u3002\u5982\u679c\u5de6\u4fa7\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\u4e0d\u5b58\u5728\u6216\u4e0e\u4e4b\u4e0d\u5bf9\u5e94\uff0c\u5219\u5176\u914d\u5bf9\u5931\u8d25\u3002</p> <p>\u914d\u5bf9\u7ed3\u675f\u540e\uff0c\u5bf9\u4e8e \\(s\\) \u4e2d\u5168\u90e8\u672a\u914d\u5bf9\u7684\u62ec\u53f7\uff0c\u8bf7\u4f60\u5728\u5176\u65c1\u8fb9\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f7f\u5f97\u8be5\u62ec\u53f7\u548c\u65b0\u52a0\u7684\u62ec\u53f7\u5339\u914d\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u53ea\u6709\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a \\(s\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u4f60\u7684\u7b54\u6848\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>([()\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>()[]()\n</code></pre> <p>\u6837\u4f8b #2</p> <p>\u6837\u4f8b\u8f93\u5165 #2</p> <pre><code>([)\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #2</p> <pre><code>()[]()\n</code></pre> <p>\u63d0\u793a</p> <p>\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <p>\u5bf9\u4e8e\u5168\u90e8\u7684\u6d4b\u8bd5\u70b9\uff0c\u4fdd\u8bc1 \\(s\\) \u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(100\\)\uff0c\u4e14\u53ea\u542b  <code>(</code>\uff0c<code>)</code>\uff0c<code>[</code>\uff0c<code>]</code> \u56db\u79cd\u5b57\u7b26\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    string input;\n    stack&lt;int&gt; st;  // Stack will store indices instead of characters\n    vector&lt;bool&gt; matched;  // Track which positions are properly matched\n    string answer;\n\n    cin &gt;&gt; input;\n\n    // Initialize matched vector with same size as input\n    matched.resize(input.length(), false);\n\n    // First pass: Find all matching pairs\n    for (int i = 0; i &lt; input.length(); ++i) {\n        if (input[i] == '(' || input[i] == '[') {\n            st.push(i);  // Push index onto stack\n        } \n        else if (input[i] == ')' || input[i] == ']') {\n            if (!st.empty()) {\n                char opening = input[st.top()];\n                // Check if brackets match\n                if ((input[i] == ')' &amp;&amp; opening == '(') ||\n                    (input[i] == ']' &amp;&amp; opening == '[')) {\n                    // Mark both positions as matched\n                    matched[i] = true;\n                    matched[st.top()] = true;\n                    st.pop();\n                }\n            }\n        }\n    }\n\n    // Second pass: Build answer string\n    for (int i = 0; i &lt; input.length(); ++i) {\n        if (!matched[i]) {\n            // Replace unmatched brackets with their complete pairs\n            if (input[i] == '(' || input[i] == ')') {\n                answer += \"()\";\n            } else {\n                answer += \"[]\";\n            }\n        } else {\n            // Keep matched brackets as they are\n            answer += input[i];\n        }\n    }\n\n    cout &lt;&lt; answer &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/XCPC/#_1","title":"\u6742\u9898\uff08\u5b57\u5178\u5e8f\uff09","text":""},{"location":"DataStruct/XCPC/#eg5string-minimization","title":"e.g.5#String Minimization","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4f60\u6709\u56db\u4e2a\u957f \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(a,b,c,d\\)\u3002\u4f60\u53ef\u4ee5\u6267\u884c\u4efb\u610f\u591a\u6b21\u5982\u4e0b\u64cd\u4f5c\uff1a</p> <ul> <li>\u9009\u62e9\u4e00\u4e2a \\(i\\)\uff0c\u4ea4\u6362 \\(a_i,c_i\\)\uff0c\u7136\u540e\u4ea4\u6362 \\(b_i,d_i\\)\u3002</li> </ul> <p>\u6c42\u5728 \\(a\\) \u7684\u5b57\u5178\u5e8f\u5c3d\u91cf\u5c0f\u7684\u524d\u63d0\u4e0b\uff0c\\(b\\) \u5b57\u5178\u5e8f\u6700\u5c0f\u662f\u4ec0\u4e48\u3002</p> <p>\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5b57\u5178\u5e8f\uff0c\u770b\u8fd9\u91cc\uff1a</p> <p>\u5bf9\u4e8e\u4e24\u4e2a\u5b57\u7b26\u4e32 \\(p,q\\)\uff0c\u79f0 \\(p\\) \u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e \\(q\\)\uff08\u8bb0\u4e3a \\(p&lt;q\\)\uff09\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u81ea\u7136\u6570 \\(k\\) \u4f7f \\(p,q\\) \u7684\u524d \\(k\\) \u4e2a\u5b57\u7b26\u76f8\u540c\u4e14 \\(p_{k+1}\\) \u7684 ASCII \u7801\u5c0f\u4e8e \\(q_{k+1}\\) \u7684 ASCII \u7801\u3002</p> <p>\u4f8b\u5982\uff1a - \\(\\texttt{abc}&lt;\\texttt{baa}\\)\uff08\u5f53 \\(k=0\\)\uff09 - \\(\\texttt{bae}&lt;\\texttt{bbb}\\)\uff08\u5f53 \\(k=1\\)\uff09</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u5b57\u7b26\u4e32 \\(a,b,c,d\\) \u957f\u5ea6\u3002</p> <p>\u4e4b\u540e\u56db\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5206\u522b\u8868\u793a \\(a,b,c,d\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u9898\u76ee\u8981\u6c42\u7684\u5b57\u7b26\u4e32 \\(b\\)\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>8\nwestlake\nyummyqaq\nweabzzke\nazazazaq\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>auazyqaq\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6837\u4f8b\u89e3\u91ca\u3011</p> <p>\u9009\u62e9 \\(i\\) \u4e3a \\(1,3,4\\) \u53ef\u4ee5\u8ba9 \\(a\\) \u53d6\u5230\u6700\u5c0f\u7684\u5b57\u5178\u5e8f \\(\\texttt{weablake}\\)\uff0c\u6b64\u65f6\u5b57\u7b26\u4e32 \\(b\\) \u4e5f\u5f97\u5230\u6ee1\u8db3\u9898\u610f\u6700\u5c0f\u7684\u5b57\u5178\u5e8f \\(\\texttt{auazyqaq}\\)\u3002</p> <p>\u4e8b\u5b9e\u4e0a\u5982\u679c \\(i=1\\) \u65f6\u4e0d\u64cd\u4f5c \\(a\\) \u7684\u5b57\u5178\u5e8f\u4e5f\u662f\u6700\u5c0f\u7684\uff0c\u4f46\u662f\u6b64\u65f6\u5b57\u7b26\u4e32 \\(b\\) \u5c31\u662f \\(\\texttt{yuazyqaq}\\)\uff0c\u4e0d\u591f\u5c0f\u3002</p> <p>\u3010\u6570\u636e\u8303\u56f4\u3011</p> <p>\u672c\u9898\u5171 \\(10\\) \u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u70b9 \\(10\\) \u5206\u3002</p> \u6d4b\u8bd5\u70b9\u7f16\u53f7 \\(n\\le\\) \u7279\u6b8a\u6027\u8d28 \\(1\\sim 2\\) \\(15\\) \\(3\\) \\(10^5\\) \\(a_i&gt;c_i\\) \\(4\\sim 5\\) \\(10^5\\) \\(a_i\\ne c_i\\) \\(6\\sim 7\\) \\(10^5\\) \\(b_i\\ge d_i\\) \\(8\\sim 10\\) \\(10^5\\) <p>\u5bf9\u4e8e\u5168\u4f53\u6570\u636e\uff0c\u4fdd\u8bc1 \\(1\\le n\\le 10^5\\)\uff0c\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n  int len;\n  cin &gt;&gt; len;\n  string a, b, c, d;\n  cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;\n\n  for(int i = 0; i &lt; len; i++) {\n    // \u5982\u679c\u4ea4\u6362\u540e\u80fd\u8ba9a\u6216b\u53d8\u5f97\u66f4\u5c0f\uff0c\u5c31\u8fdb\u884c\u4ea4\u6362\n    if(min(a[i], c[i]) != a[i] ||\n       (a[i] == c[i] &amp;&amp; min(b[i], d[i]) != b[i])) {\n      swap(a[i], c[i]);\n      swap(b[i], d[i]);\n       }\n  }\n\n  cout &lt;&lt; b &lt;&lt; endl;\n  return 0;\n}\n/*\n    \u6b64\u9898\u4e2d\uff0c\u6bd4\u8f83\u6574\u4f53\u5b57\u5178\u5e8f\uff1a\u6bcf\u4f4d\u6bd4\u8f83\u5373\u53ef\n    min(a[i], c[i]) != a[i]\uff1a\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u8ba9a\u53d8\u5f97\u66f4\u5c0f\n    (a[i] == c[i] &amp;&amp; min(b[i], d[i]) != b[i])\uff1a\u5f53a\u4e0d\u80fd\u518d\u53d8\u5c0f\u65f6\uff0c\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u8ba9b\u53d8\u5f97\u66f4\u5c0f\n*/\n</code></pre>"},{"location":"DataStruct/XCPC/#_2","title":"\u4e8c\u53c9\u6811","text":""},{"location":"DataStruct/XCPC/#_3","title":"\u5206\u7c7b","text":""},{"location":"DataStruct/XCPC/#_4","title":"\u6ee1\u4e8c\u53c9\u6811","text":"<p>\u6bcf\u4e00\u5c42\u8282\u70b9\u90fd\u662f\u6ee1\u7684</p>"},{"location":"DataStruct/XCPC/#_5","title":"\u5b8c\u5168\u4e8c\u53c9\u6811","text":"<p>\u6700\u540e\u4e00\u5c42\u6709\u7f3a\u5931</p> <p></p>"},{"location":"DataStruct/XCPC/#_6","title":"\u9000\u5316\u4e8c\u53c9\u6811","text":"<p>\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b50\u8282\u70b9</p>"},{"location":"DataStruct/XCPC/#_7","title":"\u5b8c\u7f8e\u4e8c\u53c9\u6811","text":"<p>\u6240\u6709\u53f6\u7ed3\u70b9\u7684\u6df1\u5ea6\u5747\u76f8\u540c\uff0c\u4e14\u6240\u6709\u975e\u53f6\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf\u5747\u4e3a 2 \u7684\u4e8c\u53c9\u6811\u79f0\u4e3a\u5b8c\u7f8e\u4e8c\u53c9\u6811\u3002</p> <p></p>"},{"location":"DataStruct/XCPC/#_8","title":"\u9759\u6001\u5199\u6cd5","text":"<pre><code>struct tree {\n    int v;\n    int l, r;\n} tree[N];\n</code></pre>"},{"location":"DataStruct/XCPC/#_9","title":"\u4e09\u79cd\u904d\u5386\u65b9\u5f0f","text":"<ul> <li>\u5148\uff08\u6839\uff09\u5e8f\u904d\u5386</li> <li>\u5148\u6839\u8282\u70b9\uff0c\u518d\u5de6\u5b50\u6811\uff0c\u518d\u53f3\u5b50\u6811</li> <li></li> <li>\u4e2d\uff08\u6839\uff09\u5e8f\u904d\u5386</li> <li>\u5148\u5de6\u5b50\u6811\uff0c\u518d\u6839\u8282\u70b9\uff0c\u518d\u53f3\u5b50\u6811</li> <li></li> <li>\u540e\uff08\u6839\uff09\u5e8f\u904d\u5386</li> <li>\u5148\u5de6\u5b50\u6811\uff0c\u518d\u53f3\u5b50\u6811\uff0c\u518d\u6839\u8282\u70b9</li> <li></li> </ul>"},{"location":"DataStruct/XCPC/#eg6","title":"e.g.6\u4e8c\u53c9\u6811\u7684\u904d\u5386","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6709\u4e00\u4e2a \\(n(n \\le 10^6)\\) \u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u3002\u7ed9\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7f16\u53f7\uff08\u5747\u4e0d\u8d85\u8fc7 \\(n\\)\uff09\uff0c\u5efa\u7acb\u4e00\u68f5\u4e8c\u53c9\u6811\uff08\u6839\u8282\u70b9\u7684\u7f16\u53f7\u4e3a \\(1\\)\uff09\uff0c\u5982\u679c\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u8f93\u5165 <code>0 0</code>\u3002</p> <p>\u5efa\u597d\u6811\u8fd9\u68f5\u4e8c\u53c9\u6811\u4e4b\u540e\uff0c\u4f9d\u6b21\u6c42\u51fa\u5b83\u7684\u524d\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u5217\u904d\u5386\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u7ed3\u70b9\u6570\u3002</p> <p>\u4e4b\u540e \\(n\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u4e24\u4e2a\u6574\u6570 \\(l\\)\u3001\\(r\\)\uff0c\u5206\u522b\u8868\u793a\u7ed3\u70b9 \\(i\\) \u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u7f16\u53f7\u3002\u82e5 \\(l=0\\) \u5219\u8868\u793a\u65e0\u5de6\u5b50\u7ed3\u70b9\uff0c\\(r=0\\) \u540c\u7406\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e09\u884c\uff0c\u6bcf\u884c \\(n\\) \u4e2a\u6570\u5b57\uff0c\u7528\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\u7b2c\u4e00\u884c\u662f\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u3002</p> <p>\u7b2c\u4e8c\u884c\u662f\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u3002</p> <p>\u7b2c\u4e09\u884c\u662f\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>7\n2 7\n4 0\n0 0\n0 3\n0 0\n0 5\n6 0\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>1 2 4 3 7 6 5\n4 3 2 1 6 5 7\n3 4 2 5 6 7 1\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e5 + 10;\n\nstruct tree {\n    int value;//\u8282\u70b9\u503c\n    int left, right;//\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\n} tr[N];\n\nvoid Preorder(int u) {\n    if (u == 0)\n        return;//\u5982\u679c\u8282\u70b9\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\n    cout &lt;&lt; u &lt;&lt; \" \";//\u8f93\u51fa\u8282\u70b9\u503c\n    Preorder(tr[u].left);//\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811\n    Preorder(tr[u].right);//\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811\n}\n\nvoid Inorder(int u) {\n    if (u == 0)\n        return;\n    Inorder(tr[u].left);\n    cout &lt;&lt; u &lt;&lt; \" \";\n    Inorder(tr[u].right);\n}\n\nvoid Postorder(int u) {\n    if (u == 0)\n        return;\n    Postorder(tr[u].left);\n    Postorder(tr[u].right);\n    cout &lt;&lt; u &lt;&lt; \" \";\n}\n\nint main() {\n    int n;\n    cin&gt;&gt;n;\n\n    for (int i = 1; i &lt;= n; i++) {//\u6ce8\u610f\u56e0\u4e3a\u6811\u7684\u6700\u5c0f\u503c\u4ece1\u5f00\u59cb\uff0ci\u4e5f\u9700\u8981\u4ece1-&gt;n\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;//\u8f93\u5165\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\n        tr[i].value = i;//\u8282\u70b9\u503c\n        tr[i].left = a;//\u5de6\u5b50\u6811\n        tr[i].right = b;//\u53f3\u5b50\u6811\n    }\n\n    Preorder(1);//\u5148\u5e8f\u904d\u5386\n    cout&lt;&lt;endl;\n    Inorder(1);//\u4e2d\u5e8f\u904d\u5386\n    cout&lt;&lt;endl;\n    Postorder(1);//\u540e\u5e8f\u904d\u5386\n    cout&lt;&lt;endl;\n}\n</code></pre>"},{"location":"DataStruct/XCPC/#eg7noip2004-fbi","title":"e.g.7[NOIP2004 \u666e\u53ca\u7ec4] FBI \u6811","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6211\u4eec\u53ef\u4ee5\u628a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u5206\u4e3a\u4e09\u7c7b\uff1a\u5168 0 \u4e32\u79f0\u4e3a B \u4e32\uff0c\u5168 1 \u4e32\u79f0\u4e3a I \u4e32\uff0c\u65e2\u542b 0 \u53c8\u542b 1 \u7684\u4e32\u5219\u79f0\u4e3a F \u4e32\u3002</p> <p>FBI \u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u7ed3\u70b9\u7c7b\u578b\u4e5f\u5305\u62ec F \u7ed3\u70b9\uff0cB \u7ed3\u70b9\u548c I \u7ed3\u70b9\u4e09\u79cd\u3002\u7531\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2^N\\) \u7684 01 \u4e32 \\(S\\) \u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u68f5 FBI \u6811 \\(T\\)\uff0c\u9012\u5f52\u7684\u6784\u9020\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <ol> <li>\\(T\\) \u7684\u6839\u7ed3\u70b9\u4e3a \\(R\\)\uff0c\u5176\u7c7b\u578b\u4e0e\u4e32 \\(S\\) \u7684\u7c7b\u578b\u76f8\u540c\uff1b</li> <li>\u82e5\u4e32 \\(S\\) \u7684\u957f\u5ea6\u5927\u4e8e \\(1\\)\uff0c\u5c06\u4e32 \\(S\\) \u4ece\u4e2d\u95f4\u5206\u5f00\uff0c\u5206\u4e3a\u7b49\u957f\u7684\u5de6\u53f3\u5b50\u4e32 \\(S_1\\) \u548c \\(S_2\\)\uff1b\u7531\u5de6\u5b50\u4e32 \\(S_1\\) \u6784\u9020 \\(R\\) \u7684\u5de6\u5b50\u6811 \\(T_1\\)\uff0c\u7531\u53f3\u5b50\u4e32 \\(S_2\\) \u6784\u9020 \\(R\\) \u7684\u53f3\u5b50\u6811 \\(T_2\\)\u3002</li> </ol> <p>\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2^N\\) \u7684 01 \u4e32\uff0c\u8bf7\u7528\u4e0a\u8ff0\u6784\u9020\u65b9\u6cd5\u6784\u9020\u51fa\u4e00\u68f5 FBI \u6811\uff0c\u5e76\u8f93\u51fa\u5b83\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 \\(N(0 \\le N \\le 10)\\)\uff0c  </p> <p>\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2^N\\) \u7684 01 \u4e32\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5373 FBI \u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>3\n10001011\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>IBFBBBFIBFIIIFF\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e \\(40\\%\\) \u7684\u6570\u636e\uff0c\\(N \\le 2\\)\uff1b</p> <p>\u5bf9\u4e8e\u5168\u90e8\u7684\u6570\u636e\uff0c\\(N \\le 10\\)\u3002</p> <p>noip2004\u666e\u53ca\u7ec4\u7b2c3\u9898</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e4 + 10;\nint n;\nstring s;\nint Ls(int p) { return 2 * p; }     // \u5de6\u513f\u5b50\nint Rs(int p) { return 2 * p + 1; } // \u53f3\u513f\u5b50\n\nstruct tree {\n    char ch;\n    int l, r;\n} tr[N];\n\nvoid build(int p, int l, int r) {\n    // \u7ec8\u6b62\u6761\u4ef6\n    if (l == r) {\n        if (s[l - 1] == '0') {\n            tr[p].ch = 'B';\n        } else {\n            tr[p].ch = 'I';\n        }\n        return;\n    }\n    int mid = (l + r) / 2; // \u5207\u5272\u5b57\u7b26\u4e32\n    // \u5de6\u53f3\u5b57\u7b26\u4e32\n    tr[p].l = Ls(p);\n    tr[p].r = Rs(p);\n    // \u9012\u5f52\n    build(Ls(p), l, mid);\n    build(Rs(p), mid + 1, r);\n    if (tr[Ls(p)].ch == 'B' &amp;&amp; tr[Rs(p)].ch == 'B') {\n        tr[p].ch = 'B';\n    } else if (tr[Ls(p)].ch == 'I' &amp;&amp; tr[Rs(p)].ch == 'I') {\n        tr[p].ch = 'I';\n    } else {\n        tr[p].ch = 'F';\n    }\n}\n// \u540e\u5e8f\u904d\u5386\nvoid post(int p) {\n    if(p==0) return;\n    if (tr[p].l)\n        post(tr[p].l);\n    if (tr[p].r)\n        post(tr[p].r);\n    cout &lt;&lt; tr[p].ch;\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; s;\n    int len = pow(2, n);\n    build(1, 1, len);\n\n    post(1);\n    cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/XCPC/#dfs","title":"DFS","text":""},{"location":"DataStruct/XCPC/#eg8noip1998","title":"e.g.8[NOIP1998 \u666e\u53ca\u7ec4] \u5e42\u6b21\u65b9","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4efb\u4f55\u4e00\u4e2a\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u7528 \\(2\\) \u7684\u5e42\u6b21\u65b9\u8868\u793a\u3002\u4f8b\u5982 $137=2<sup>7+2</sup>3+2^0 $\u3002</p> <p>\u540c\u65f6\u7ea6\u5b9a\u6b21\u65b9\u7528\u62ec\u53f7\u6765\u8868\u793a\uff0c\u5373 \\(a^b\\) \u53ef\u8868\u793a\u4e3a \\(a(b)\\)\u3002</p> <p>\u7531\u6b64\u53ef\u77e5\uff0c\\(137\\) \u53ef\u8868\u793a\u4e3a \\(2(7)+2(3)+2(0)\\)</p> <p>\u8fdb\u4e00\u6b65\uff1a</p> <p>\\(7= 2^2+2+2^0\\)  ( \\(2^1\\) \u7528 \\(2\\) \u8868\u793a)\uff0c\u5e76\u4e14 \\(3=2+2^0\\)\u3002</p> <p>\u6240\u4ee5\u6700\u540e \\(137\\) \u53ef\u8868\u793a\u4e3a \\(2(2(2)+2+2(0))+2(2+2(0))+2(0)\\)\u3002</p> <p>\u53c8\u5982 \\(1315=2^{10} +2^8 +2^5 +2+1\\)</p> <p>\u6240\u4ee5 \\(1315\\) \u6700\u540e\u53ef\u8868\u793a\u4e3a \\(2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)\\)\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u7b26\u5408\u7ea6\u5b9a\u7684 \\(n\\) \u7684 \\(0, 2\\) \u8868\u793a\uff08\u5728\u8868\u793a\u4e2d\u4e0d\u80fd\u6709\u7a7a\u683c\uff09\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>1315\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6570\u636e\u8303\u56f4\u3011</p> <p>\u5bf9\u4e8e \\(0100\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\le n \\le 2 \\times {10}^4\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvoid divide(int x)\n{\n    bool flag = false; \n    while (x != 0)\n    {\n        int t = int(log2(x));\n\n        if (flag) cout &lt;&lt; \"+\"; \n        if (t == 1) cout &lt;&lt; \"2\"; \n        else if (t == 0) cout &lt;&lt; \"2(0)\"; \n        else\n        {\n            cout &lt;&lt; \"2(\";\n            divide(t); \n            cout &lt;&lt; \")\";\n        }\n        x -= pow(2,t); \n        flag = true;\n    }\n}\nint main() {\n    int x;\n    cin &gt;&gt; x;\n    divide(x);\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/XCPC/#_10","title":"\u5e76\u67e5\u96c6","text":"<p>\u987e\u540d\u601d\u4e49\uff0c\u5e76\u67e5\u96c6\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a</p> <ul> <li>\u5408\u5e76\uff08Union\uff09\uff1a\u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u6240\u5c5e\u96c6\u5408\uff08\u5408\u5e76\u5bf9\u5e94\u7684\u6811\uff09</li> <li>\u67e5\u8be2\uff08Find\uff09\uff1a\u67e5\u8be2\u67d0\u4e2a\u5143\u7d20\u6240\u5c5e\u96c6\u5408\uff08\u67e5\u8be2\u5bf9\u5e94\u7684\u6811\u7684\u6839\u8282\u70b9\uff09\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408</li> </ul> <pre><code>return x=s[x]? x:find_set(s[x]);\n</code></pre> <p>\u95ee\u9898\uff1a\u627e\u5230\u7956\u5148\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8</p>"},{"location":"DataStruct/XCPC/#_11","title":"\u2192\u65b9\u6cd5\uff1a\u8def\u5f84\u538b\u7f29","text":"<pre><code>int find_set(int x){\n    if(x!=s[x]) s[x]=find_set(s[x]); //\u8def\u5f84\u538b\u7f29\n    return s[x];\n}\n</code></pre> <pre><code>// \u5e76\u67e5\u96c6\u521d\u59cb\u5316\nint find_set(int x) {\n    return s[x] == x ? x : s[x] = find_set(s[x]);\n}\n// \u538b\u7f29\u8def\u5f84\nint merge(int x, int y) {\n    s[find_set(x)] = s[find_set(y)];\n}\n</code></pre>"},{"location":"DataStruct/XCPC/#eg9","title":"e.g.9\u4eb2\u621a\uff08\u6a21\u677f\uff09","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>\u82e5\u67d0\u4e2a\u5bb6\u65cf\u4eba\u5458\u8fc7\u4e8e\u5e9e\u5927\uff0c\u8981\u5224\u65ad\u4e24\u4e2a\u662f\u5426\u662f\u4eb2\u621a\uff0c\u786e\u5b9e\u8fd8\u5f88\u4e0d\u5bb9\u6613\uff0c\u73b0\u5728\u7ed9\u51fa\u67d0\u4e2a\u4eb2\u621a\u5173\u7cfb\u56fe\uff0c\u6c42\u4efb\u610f\u7ed9\u51fa\u7684\u4e24\u4e2a\u4eba\u662f\u5426\u5177\u6709\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u89c4\u5b9a\uff1a\\(x\\) \u548c \\(y\\) \u662f\u4eb2\u621a\uff0c\\(y\\) \u548c \\(z\\) \u662f\u4eb2\u621a\uff0c\u90a3\u4e48 \\(x\\) \u548c \\(z\\) \u4e5f\u662f\u4eb2\u621a\u3002\u5982\u679c \\(x\\)\uff0c\\(y\\) \u662f\u4eb2\u621a\uff0c\u90a3\u4e48 \\(x\\) \u7684\u4eb2\u621a\u90fd\u662f \\(y\\) \u7684\u4eb2\u621a\uff0c\\(y\\) \u7684\u4eb2\u621a\u4e5f\u90fd\u662f \\(x\\) \u7684\u4eb2\u621a\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\uff1a\u4e09\u4e2a\u6574\u6570 \\(n,m,p\\)\uff0c\uff08\\(n,m,p \\le 5000\\)\uff09\uff0c\u5206\u522b\u8868\u793a\u6709 \\(n\\) \u4e2a\u4eba\uff0c\\(m\\) \u4e2a\u4eb2\u621a\u5173\u7cfb\uff0c\u8be2\u95ee \\(p\\) \u5bf9\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u4ee5\u4e0b \\(m\\) \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570 \\(M_i\\)\uff0c\\(M_j\\)\uff0c\\(1 \\le M_i,~M_j\\le n\\)\uff0c\u8868\u793a \\(M_i\\) \u548c \\(M_j\\) \u5177\u6709\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u63a5\u4e0b\u6765 \\(p\\) \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570 \\(P_i,P_j\\)\uff0c\u8be2\u95ee \\(P_i\\) \u548c \\(P_j\\) \u662f\u5426\u5177\u6709\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\\(p\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a <code>Yes</code> \u6216 <code>No</code>\u3002\u8868\u793a\u7b2c \\(i\\) \u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u4e3a\u201c\u5177\u6709\u201d\u6216\u201c\u4e0d\u5177\u6709\u201d\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>6 5 3\n1 2\n1 5\n3 4\n5 2\n1 3\n1 4\n2 3\n5 6\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>Yes\nYes\nNo\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 5e3 + 10; // \u5b9a\u4e49\u6700\u5927\u8282\u70b9\u6570\uff0c\u8fd9\u91cc\u5047\u8bbe\u4e3a5001\nint n, m, p, s[N];      // n\u4e3a\u8282\u70b9\u6570\uff0cm\u4e3a\u8fb9\u6570\uff0cp\u4e3a\u67e5\u8be2\u6b21\u6570\uff0cs\u6570\u7ec4\u7528\u4e8e\u5b58\u50a8\u5e76\u67e5\u96c6\u4fe1\u606f\n\n// \u5e76\u67e5\u96c6\u7684\u67e5\u627e\u51fd\u6570\uff0c\u7528\u4e8e\u627e\u5230\u5143\u7d20k\u6240\u5728\u7684\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\uff08\u6839\u8282\u70b9\uff09\nint find_set(int k) {\n    if (k != s[k]) {           // \u5982\u679ck\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u5219\u9012\u5f52\u67e5\u627e\u5176\u6839\u8282\u70b9\n        s[k] = find_set(s[k]); // \u8def\u5f84\u538b\u7f29\uff0c\u51cf\u5c11\u67e5\u627e\u65f6\u95f4\n    }\n    return s[k]; // \u8fd4\u56de\u6839\u8282\u70b9\n}\n\n// \u5e76\u67e5\u96c6\u7684\u5408\u5e76\u51fd\u6570\uff0c\u7528\u4e8e\u5408\u5e76\u4e24\u4e2a\u5143\u7d20x\u548cy\u6240\u5728\u7684\u96c6\u5408\nvoid merge(int x, int y) {\n    s[find_set(x)] = s[find_set(y)]; // \u5c06x\u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9\u6307\u5411y\u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p; // \u8f93\u5165\u8282\u70b9\u6570n\uff0c\u8fb9\u6570m\uff0c\u67e5\u8be2\u6b21\u6570p\n    for (int i = 1; i &lt;= n; i++)\n        s[i] = i; // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u90fd\u662f\u81ea\u5df1\n\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y; // \u8f93\u5165\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\n        merge(x, y);   // \u5408\u5e76\u8fd9\u4e24\u4e2a\u8282\u70b9\u6240\u5728\u7684\u96c6\u5408\n    }\n\n    while (p--) { // \u8fdb\u884cp\u6b21\u67e5\u8be2\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;                  // \u8f93\u5165\u8981\u67e5\u8be2\u7684\u4e24\u4e2a\u8282\u70b9\n        if (find_set(x) == find_set(y)) // \u5982\u679c\u4e24\u4e2a\u8282\u70b9\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\n            cout &lt;&lt; \"Yes\\n\";            // \u8f93\u51fa\"Yes\"\n        else\n            cout &lt;&lt; \"No\\n\"; // \u5426\u5219\u8f93\u51fa\"No\"\n    }\n}\n</code></pre>"},{"location":"DataStruct/XCPC/#eg10-2017-c","title":"e.g.10[\u84dd\u6865\u676f 2017 \u56fd C] \u5408\u6839\u690d\u7269","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>w \u661f\u7403\u7684\u4e00\u4e2a\u79cd\u690d\u56ed\uff0c\u88ab\u5206\u6210 \\(m \\times n\\) \u4e2a\u5c0f\u683c\u5b50\uff08\u4e1c\u897f\u65b9\u5411 \\(m\\) \u884c\uff0c\u5357\u5317\u65b9\u5411 \\(n\\) \u5217\uff09\u3002\u6bcf\u4e2a\u683c\u5b50\u91cc\u79cd\u4e86\u4e00\u682a\u5408\u6839\u690d\u7269\u3002</p> <p>\u8fd9\u79cd\u690d\u7269\u6709\u4e2a\u7279\u70b9\uff0c\u5b83\u7684\u6839\u53ef\u80fd\u4f1a\u6cbf\u7740\u5357\u5317\u6216\u4e1c\u897f\u65b9\u5411\u4f38\u5c55\uff0c\u4ece\u800c\u4e0e\u53e6\u4e00\u4e2a\u683c\u5b50\u7684\u690d\u7269\u5408\u6210\u4e3a\u4e00\u4f53\u3002</p> <p>\u5982\u679c\u6211\u4eec\u544a\u8bc9\u4f60\u54ea\u4e9b\u5c0f\u683c\u5b50\u95f4\u51fa\u73b0\u4e86\u8fde\u6839\u73b0\u8c61\uff0c\u4f60\u80fd\u8bf4\u51fa\u8fd9\u4e2a\u56ed\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u682a\u5408\u6839\u690d\u7269\u5417\uff1f</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570 \\(m\\)\uff0c\\(n\\)\uff0c\u7528\u7a7a\u683c\u5206\u5f00\uff0c\u8868\u793a\u683c\u5b50\u7684\u884c\u6570\u3001\u5217\u6570\uff08\\(1&lt;m,n&lt;1000\\)\uff09\u3002</p> <p>\u63a5\u4e0b\u6765\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570 \\(k\\)\uff0c\u8868\u793a\u4e0b\u9762\u8fd8\u6709 \\(k\\) \u884c\u6570\u636e \\((0&lt;k&lt;10^5)\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(k\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(a\\)\uff0c\\(b\\)\uff0c\u8868\u793a\u7f16\u53f7\u4e3a \\(a\\) \u7684\u5c0f\u683c\u5b50\u548c\u7f16\u53f7\u4e3a \\(b\\) \u7684\u5c0f\u683c\u5b50\u5408\u6839\u4e86\u3002</p> <p>\u683c\u5b50\u7684\u7f16\u53f7\u4e00\u884c\u4e00\u884c\uff0c\u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\u7f16\u53f7\u3002</p> <p>\u6bd4\u5982\uff1a\\(5 \\times 4\\) \u7684\u5c0f\u683c\u5b50\uff0c\u7f16\u53f7\uff1a</p> <pre><code>1  2  3  4\n5  6  7  8\n9  10 11 12\n13 14 15 16\n17 18 19 20\n</code></pre> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b54\u6848</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>5 4\n16\n2 3\n1 5\n5 9\n4 8\n7 8\n9 10\n10 11\n11 12\n10 14\n12 16\n14 18\n17 18\n15 19\n19 20\n9 13\n13 17\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <pre><code>5\n</code></pre> <p>\u63d0\u793a</p> <p>\u6837\u4f8b\u89e3\u91ca</p> <p></p> <p>\u65f6\u9650 1 \u79d2, 256M\u3002\u84dd\u6865\u676f 2017 \u5e74\u7b2c\u516b\u5c4a\u56fd\u8d5b</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e5 + 10;\nint n, m, p, s[N];\n// \u5e76\u67e5\u96c6\nint find_set(int k) {\n    if (k != s[k]) {\n        s[k] = find_set(s[k]);\n    }\n    return s[k];\n}\nvoid merge(int x, int y) {\n    s[find_set(x)] = s[find_set(y)];\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;\n    for (int i = 1; i &lt;= n * m; i++)\n        s[i] = i;\n\n    for (int i = 1; i &lt;= p; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        merge(x, y);\n    }\n    int ans = 0;\n    for (int i = 1; i &lt;= n * m; i++) {\n        if (s[i] == i) {\n            ans++;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/XCPC/#eg11usaco16open-closing-the-farm-s","title":"e.g.11[USACO16OPEN] Closing the Farm S","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>\u672c\u9898\u548c \u91d1\u7ec4\u540c\u540d\u9898\u76ee \u5728\u9898\u610f\u4e0a\u4e00\u81f4\uff0c\u552f\u4e00\u7684\u4e0d\u540c\u662f\u6570\u636e\u8303\u56f4\u3002</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>FJ \u548c\u4ed6\u7684\u5976\u725b\u4eec\u6b63\u5728\u8ba1\u5212\u79bb\u5f00\u5c0f\u9547\u505a\u4e00\u6b21\u957f\u7684\u65c5\u884c\uff0c\u540c\u65f6 FJ \u60f3\u4e34\u65f6\u5730\u5173\u6389\u4ed6\u7684\u519c\u573a\u4ee5\u8282\u7701\u4e00\u4e9b\u91d1\u94b1\u3002</p> <p>\u8fd9\u4e2a\u519c\u573a\u4e00\u5171\u6709\u88ab\u7528 \\(M\\) \u6761\u53cc\u5411\u9053\u8def\u8fde\u63a5\u7684 \\(N\\) \u4e2a\u8c37\u4ed3\uff08\\(1 \\leq N,M \\leq 3000\\)\uff09\u3002\u4e3a\u4e86\u5173\u95ed\u6574\u4e2a\u519c\u573a\uff0cFJ \u8ba1\u5212\u6bcf\u4e00\u6b21\u5173\u95ed\u6389\u4e00\u4e2a\u8c37\u4ed3\u3002\u5f53\u4e00\u4e2a\u8c37\u4ed3\u88ab\u5173\u95ed\u4e86\uff0c\u6240\u6709\u7684\u8fde\u63a5\u5230\u8fd9\u4e2a\u8c37\u4ed3\u7684\u9053\u8def\u90fd\u4f1a\u88ab\u5173\u95ed\uff0c\u800c\u4e14\u518d\u4e5f\u4e0d\u80fd\u591f\u88ab\u4f7f\u7528\u3002</p> <p>FJ \u73b0\u5728\u6b63\u611f\u5174\u8da3\u4e8e\u77e5\u9053\u5728\u6bcf\u4e00\u4e2a\u65f6\u95f4\uff08\u8fd9\u91cc\u7684\u201c\u65f6\u95f4\u201d\u6307\u5728\u6bcf\u4e00\u6b21\u5173\u95ed\u8c37\u4ed3\u4e4b\u524d\u7684\u65f6\u95f4\uff09\u65f6\u4ed6\u7684\u519c\u573a\u662f\u5426\u662f\u201c\u5168\u8fde\u901a\u7684\u201d\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\u4ece\u4efb\u610f\u7684\u4e00\u4e2a\u5f00\u7740\u7684\u8c37\u4ed3\u5f00\u59cb\uff0c\u80fd\u591f\u5230\u8fbe\u53e6\u5916\u7684\u4e00\u4e2a\u8c37\u4ed3\u3002\u6ce8\u610f\u81ea\u4ece\u67d0\u4e00\u4e2a\u65f6\u95f4\u4e4b\u540e\uff0c\u53ef\u80fd\u6574\u4e2a\u519c\u573a\u90fd\u5f00\u59cb\u4e0d\u4f1a\u662f\u201c\u5168\u8fde\u901a\u7684\u201d\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(N,M\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(M\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(u,v\\)\uff08\\(1 \\leq u,v \\leq N\\)\uff09\uff0c\u63cf\u8ff0\u4e00\u6761\u8fde\u63a5 \\(u,v\\) \u4e24\u4e2a\u519c\u573a\u7684\u8def\u3002</p> <p>\u6700\u540e \\(N\\) \u884c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c \\(i\\) \u4e2a\u88ab\u5173\u95ed\u7684\u519c\u573a\u7f16\u53f7\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa \\(N\\) \u884c\uff0c\u6bcf\u884c\u5305\u542b <code>YES</code> \u6216 <code>NO</code>\uff0c\u8868\u793a\u67d0\u4e2a\u65f6\u523b\u519c\u573a\u662f\u5426\u662f\u5168\u8fde\u901a\u7684\u3002</p> <p>\u7b2c\u4e00\u884c\u8f93\u51fa\u6700\u521d\u7684\u72b6\u6001\uff0c\u7b2c \\(i\\) \u884c\uff08\\(2 \\leq i \\leq N\\)\uff09\u8f93\u51fa\u7b2c \\(i-1\\) \u4e2a\u519c\u573a\u88ab\u5173\u95ed\u540e\u7684\u72b6\u6001\u3002</p> <p>\u6837\u4f8b #1</p> <p>\u6837\u4f8b\u8f93\u5165 #1</p> <pre><code>4 3\n1 2\n2 3\n3 4\n3\n4\n1\n2\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #1</p> <p><code>\\ YES NO YES YES</code></p>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","title":"\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf","text":"\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf  <ul> <li>\u4e00\u3001\u6982\u8ff0</li> <li>\u4e8c\u3001\u53d1\u5c55<ul> <li>1\u3001\u771f\u7a7a\u7ba1\uff0c\u63d2\u63a5\u677f\uff0c\u65e0\u64cd\u4f5c\u7cfb\u7edf</li> <li>2\u3001\u6676\u4f53\u7ba1\uff0c\u6279\u5904\u7406</li> <li>3\u3001\u96c6\u6210\u7535\u8def</li> <li>4\u3001\u7f51\u7edc\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5206\u5e03\u5f0f\u64cd\u4f5c\u7cfb\u7edf</li> </ul> </li> <li>\u4e09\u3001\u64cd\u4f5c\u7cfb\u7edf\u7ed3\u6784<ul> <li>1\u3001\u6574\u4f53\u5f0f\u7ed3\u6784</li> <li>2\u3001\u6a21\u5757\u5316\u7ed3\u6784</li> <li>3\u3001\u5206\u5c42\u5f0f\u7ed3\u6784</li> <li>4\u3001\u5fae\u5185\u6838\u7ed3\u6784</li> </ul> </li> <li>\u56db\u3001\u529f\u80fd\u548c\u57fa\u672c\u7279\u5f81<ul> <li>\u529f\u80fd</li> <li>\u7279\u5f81</li> </ul> </li> </ul>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_1","title":"\u4e00\u3001\u6982\u8ff0","text":"<ul> <li>\u5185\u6838\uff1a\u786e\u5b9a\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5c5e\u4e8e\u8f6f\u4ef6\uff08</li> <li>\u8bbe\u5907\u5904\u7406\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5728\u56fa\u4ef6\u4e2d\uff0c\u5982ROM\uff0cBIOS</li> <li>\u90e8\u5206\u5728\u786c\u4ef6\u4e2d\uff08\u903b\u8f91\u5730\u5740\u5230\u7269\u7406\u5730\u5740</li> <li>\u786c\u4ef6\u548c\u5e94\u7528\u7a0b\u5e8f\u4e2d\u95f4\u7684\u8f6f\u4ef6\u5c42</li> <li>\u8d44\u6e90\u7ba1\u7406\u8005</li> </ul>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_2","title":"\u4e8c\u3001\u53d1\u5c55","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#1","title":"1\u3001\u771f\u7a7a\u7ba1\uff0c\u63d2\u63a5\u677f\uff0c\u65e0\u64cd\u4f5c\u7cfb\u7edf","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#2","title":"2\u3001\u6676\u4f53\u7ba1\uff0c\u6279\u5904\u7406","text":"<p>\u6c47\u7f16\u8bed\u8a00\u5f00\u53d1 \u5355\u9053\u6027\uff0c\u81ea\u52a8\u6027\uff0c\u987a\u5e8f\u6027</p>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#3","title":"3\u3001\u96c6\u6210\u7535\u8def","text":"<p>\u591a\u9053\u6279\u5904\u7406\uff0c\u5206\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf</p> <p>\u73b0\u4ee3\u5316\u64cd\u4f5c\u7cfb\u7edf\u540c\u65f6\u6709\u6279\u5904\u7406\uff0c\u5206\u65f6\uff0c\u5b9e\u65f6\u529f\u80fd\uff0c\uff08\u901a\u7528\u64cd\u4f5c\u7cfb\u7edf</p>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#4","title":"4\u3001\u7f51\u7edc\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5206\u5e03\u5f0f\u64cd\u4f5c\u7cfb\u7edf","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_3","title":"\u4e09\u3001\u64cd\u4f5c\u7cfb\u7edf\u7ed3\u6784","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#1_1","title":"1\u3001\u6574\u4f53\u5f0f\u7ed3\u6784","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#2_1","title":"2\u3001\u6a21\u5757\u5316\u7ed3\u6784","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#3_1","title":"3\u3001\u5206\u5c42\u5f0f\u7ed3\u6784","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#4_1","title":"4\u3001\u5fae\u5185\u6838\u7ed3\u6784","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_4","title":"\u56db\u3001\u529f\u80fd\u548c\u57fa\u672c\u7279\u5f81","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_5","title":"\u529f\u80fd","text":"<ol> <li>\u5904\u7406\u673a\u7ba1\u7406</li> <li>\u50a8\u5b58\u5668\u7ba1\u7406</li> <li>IO\u7ba1\u7406</li> <li>\u6587\u4ef6\u7ba1\u7406</li> </ol>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_6","title":"\u7279\u5f81","text":"<ol> <li>\u5e76\u53d1\u6027</li> <li>\u5171\u4eab\u6027</li> <li>\u865a\u62df\u6027</li> <li>\u5f02\u6b65\u6027</li> </ol>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","title":"\u8ba1\u7b97\u673a\u7f51\u7edc","text":"\u8ba1\u7b97\u673a\u7f51\u7edc  <ul> <li>\u4e00\u3001\u5206\u7c7b<ul> <li>\u4f20\u8f93\u6280\u672f</li> <li>\u8986\u76d6\u8303\u56f4</li> </ul> </li> <li>\u4e8c\u3001\u7ec4\u6210\u4e0e\u7ed3\u6784<ul> <li>\u65e9\u671f\uff1a\u8d44\u6e90\u5b50\u7f51\uff0c\u901a\u4fe1\u5b50\u7f51</li> <li>\u73b0\u4ee3\uff1a\u591a\u5c42ISP</li> </ul> </li> <li>\u4e09\u3001\u53c2\u8003\u6a21\u578b<ul> <li>ISO/OSI\uff087\u5c42\uff09</li> <li>TCP/IP\uff084\u5c42\uff09</li> </ul> </li> <li>\u56db\u3001\u786c\u4ef6</li> <li>\u4e94\u3001\u5b50\u7f51\u5212\u5206<ul> <li>1\u3001\u5730\u5740\u5206\u7c7b</li> <li>2\u3001\u5b50\u7f51\u63a9\u7801</li> </ul> </li> </ul>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_1","title":"\u4e00\u3001\u5206\u7c7b","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_2","title":"\u4f20\u8f93\u6280\u672f","text":"<ol> <li>\u5e7f\u64ad\u5f0f</li> <li>\u70b9\u5bf9\u70b9</li> </ol>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_3","title":"\u8986\u76d6\u8303\u56f4","text":"<ol> <li>\u5c40\u57df\u7f51</li> <li>\u57ce\u57df\u7f51</li> <li>\u5e7f\u57df\u7f51</li> </ol>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_4","title":"\u4e8c\u3001\u7ec4\u6210\u4e0e\u7ed3\u6784","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_5","title":"\u65e9\u671f\uff1a\u8d44\u6e90\u5b50\u7f51\uff0c\u901a\u4fe1\u5b50\u7f51","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#isp","title":"\u73b0\u4ee3\uff1a\u591a\u5c42ISP","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_6","title":"\u4e09\u3001\u53c2\u8003\u6a21\u578b","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#isoosi7","title":"ISO/OSI\uff087\u5c42\uff09","text":"<p>\u5e94\u7528\u5c42\uff08\u62a5\u6587\uff0c\u8868\u793a\u5c42\uff0c\u4f1a\u8bdd\u5c42\uff08\u62a5\u6587 \u4f20\u8f93\u5c42\uff08\u62a5\u6587     \u7aef\u5230\u7aef \u7f51\u7edc\u5c42\uff08\u5206\u7ec4     \u8def\u7531\u9009\u62e9 \u6570\u636e\u94fe\u8def\u5c42\uff08frame\uff0c\u7269\u7406\u5c42\uff08bit</p>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#tcpip4","title":"TCP/IP\uff084\u5c42\uff09","text":"<p>\u5e94\u7528\u5c42     \u4f17\u591a\u534f\u8bae \u4f20\u8f93\u5c42     TCP \u57fa\u4e8e\u8fde\u63a5\u7684\u4f20\u8f93\u5c42\u534f\u8bae     UDP \u57fa\u4e8e\u65e0\u8fde\u63a5\u7684\u534f\u8bae \u4e92\u8054\u7f51\u5c42     IP\uff08ARP\uff0cRARP\u7b49\uff09\uff1a\u4e0d\u53ef\u9760 \u65e0\u8fde\u63a5 \u7f51\u7edc\u63a5\u53e3\u5c42\uff08802.3\u7b49\u7269\u7406\u534f\u8bae</p>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_7","title":"\u56db\u3001\u786c\u4ef6","text":"<p>\u7269\u7406\u5c42\uff1a\u4e2d\u7ee7\u5668\uff0c\u96c6\u7ebf\u5668 \u7f51\u5361\uff1a\u6570\u636e\u94fe\u8def\u5c42\uff08\u652f\u6301CSMA/CD\u534f\u8bae \u7f51\u6865\uff1a\u6570\u636e\u94fe\u8def\u5c42\uff08\u6839\u636e\u8f6c\u53d1\u8868\u8fdb\u884c\u5e27\u8f6c\u53d1 \u4ea4\u6362\u673a\uff1a     \u4e8c\u5c42\u4ea4\u6362\u673a\uff1a\u6570\u636e\u94fe\u8def\u5c42     \u4e09\u5c42\u4ea4\u6362\u673a\uff1a\u7f51\u7edc\u5c42 \u8def\u7531\u5668\uff1a\u7269\u7406 \u6570\u636e\u94fe\u8def \u7f51\u7edc Modem\uff1a\u7269\u7406\u5c42\uff08\u8109\u51b2\u4fe1\u53f7</p>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_8","title":"\u4e94\u3001\u5b50\u7f51\u5212\u5206","text":""},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#1","title":"1\u3001\u5730\u5740\u5206\u7c7b","text":"<p>A\uff0cB\uff0cC\uff0cD A\uff1a1-127\uff0824\u4f4d\u7f51\u7edc\u53f7 B\uff1a128-191\uff0816\u4f4d\u7f51\u7edc\u53f7 C\uff1a192-223\uff088\u4f4d\u7f51\u7edc\u53f7</p> <p>ipv4\uff1a32\u4f4d ipv6\uff1a128\u4f4d</p>"},{"location":"Intro/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#2","title":"2\u3001\u5b50\u7f51\u63a9\u7801","text":"<p>\u7528\u6765\u5212\u5206\u7f51\u7edc\uff0c\u957f\u5ea6\uff1a\u7f51\u7edc\u53f7+\u5b50\u7f51\u53f7</p> <p>\u8868\u793a\u65b9\u6cd51\uff1aip/\u7f51\u7edc\u53f7\u4f4d\u6570+\u5b50\u7f51\u4f4d\u6570</p> <p>E.g.200.120.23.0/23\u7684\u5b50\u7f51\u63a9\u7801\u662f\uff1a   23\u4e2a1\u4e3a\u63a9\u7801\uff0c\u5373\u5728\u70b9\u5206\u5341\u8fdb\u5236\u4e2d\u8868\u793a\u4e3a255.255.254.0</p> <p>E.g.200.120.23.129\uff0c\u5b50\u7f51\u63a9\u7801\u662f255.255.255.0\uff0c\u7f51\u7edc\u5730\u5740\u662f\u4ec0\u4e48\uff1f   \u7f51\u7edc\u5730\u5740\u5373\u63a9\u7801\u63a9\u6389\u540e\u9762\u5168\u96f6\uff0c\u5373200.120.23.129\uff08\u4e5f\u53ef\u7406\u89e3\u4e3a\u539f\u5730\u5740\u548c255.255.255.0\u505aAND\u8fd0\u7b97</p> <p>1.<code>arp</code>\uff1a     \u5730\u5740\u89e3\u6790\u534f\u8bae\uff08Address Resolution Protocol\uff09\uff1a\u7528\u4e8e\u5c06\u7f51\u7edc\u5c42\u7684IP\u5730\u5740\u89e3\u6790\u4e3a\u6570\u636e\u94fe\u8def\u5c42\u7684MAC\u5730\u5740\u3002\u5728\u7f51\u7edc\u8bca\u65ad\u4e2d\uff0c\u00a0<code>arp</code>\u00a0\u547d\u4ee4\u53ef\u4ee5\u7528\u6765\u67e5\u770bARP\u7f13\u5b58\u8868\uff0c\u4e86\u89e3IP\u5730\u5740\u4e0eMAC\u5730\u5740\u7684\u6620\u5c04\u5173\u7cfb\u3002 2.<code>ipconfig</code>\uff08\u5728Windows\u7cfb\u7edf\u4e2d\uff09\uff1a     \u7528\u4e8e\u663e\u793a\u548c\u914d\u7f6e\u7f51\u7edc\u9002\u914d\u5668\u7684TCP/IP\u8bbe\u7f6e\u3002\u5b83\u53ef\u4ee5\u663e\u793a\u5f53\u524d\u7684IP\u5730\u5740\u3001\u5b50\u7f51\u63a9\u7801\u3001\u9ed8\u8ba4\u7f51\u5173\u3001DNS\u670d\u52a1\u5668\u7b49\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u91ca\u653e\u548c\u66f4\u65b0DHCP\u5206\u914d\u7684IP\u5730\u5740\u3002 3.<code>route</code>\uff1a     \u7528\u4e8e\u663e\u793a\u548c\u4fee\u6539IP\u8def\u7531\u8868\u4e2d\u7684\u6761\u76ee\u3002\u00a0route\u00a0\u547d\u4ee4\u53ef\u4ee5\u6dfb\u52a0\u3001\u5220\u9664\u6216\u4fee\u6539\u8def\u7531\u8868\u4e2d\u7684\u8def\u7531\u4fe1\u606f\uff0c\u4ece\u800c\u63a7\u5236\u6570\u636e\u5305\u7684\u8f6c\u53d1\u8def\u5f84\u3002 4.<code>ping</code>\uff1a     \u7528\u4e8e\u6d4b\u8bd5\u7f51\u7edc\u8fde\u63a5\u7684\u8fde\u901a\u6027\u3002\u00a0<code>ping</code>\u00a0\u547d\u4ee4\u53d1\u9001ICMP\uff08Internet Control Message Protocol\uff09\u56de\u663e\u8bf7\u6c42\u6d88\u606f\u7ed9\u76ee\u6807\u4e3b\u673a\uff0c\u5e76\u7b49\u5f85\u56de\u663e\u5e94\u7b54\uff0c\u4ee5\u6b64\u6765\u68c0\u67e5\u7f51\u7edc\u7684\u8fde\u901a\u6027\u548c\u5ef6\u8fdf\u3002</p>"}]}