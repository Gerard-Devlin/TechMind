{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#instructions","title":"Instructions","text":"<ul> <li>A CS beginner guide</li> <li>Learn from basic  grammar to higher level Machine learning knowledge</li> </ul> <ul> <li> <p> Learn in Minutes</p> <p>Master the essentials of C language and build your foundation in programming with easy-to-follow guides.</p> <p> Start Learning</p> </li> <li> <p> Deep Dive into Data Structures</p> <p>Unlock the secrets of efficient algorithms and data management through practical examples and tutorials.</p> <p> Explore Now</p> </li> <li> <p> Machine Learning Simplified</p> <p>Discover the power of AI and ML concepts with clear explanations and hands-on projects.</p> <p> Begin Your Journey</p> </li> <li> <p> Free Knowledge for All</p> <p>All content is open-source and community-driven. Expand your skills without limits.</p> <p> Contribute</p> </li> </ul> Danger <p>This is just a work in progress</p>"},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/","title":"1 \u3001\u5165\u95e8","text":"<ul> <li>1<ul> <li>1.1.2<ul> <li>\u7a0b\u5e8f\u7684\u6267\u884c<ul> <li>\u2460\u89e3\u91ca\uff1a</li> <li>\u2461\u7f16\u8bd1\uff1a</li> </ul> </li> </ul> </li> <li>1.2.1</li> <li>1.2.2</li> <li>1.2.3<ul> <li>C\u8bed\u8a00\u7528\u5728\uff1a</li> </ul> </li> <li>1.3.1<ul> <li>\u7b2c\u4e00\u4e2aC\u7a0b\u5e8f</li> </ul> </li> <li>1.3.2<ul> <li>\u6240\u6709\u7a0b\u5e8f\u90fd\u8981\u6709</li> </ul> </li> <li>1.3.3<ul> <li>\u70b9\u8ba1\u7b97</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#1","title":"1","text":""},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#112","title":"1.1.2","text":""},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#_1","title":"\u7a0b\u5e8f\u7684\u6267\u884c","text":"Quote Quote <p>\u8bed\u8a00\u6ca1\u6709\u7f16\u8bd1/\u89e3\u91ca\u4e4b\u5206</p> <ul> <li> <p>\u89e3\u91ca\u578b\u8bed\u8a00\u6709 \u7279\u6b8a\u8ba1\u7b97\u80fd\u529b</p> </li> <li> <p>\u7f16\u8bd1\u578b\u8bed\u8a00\u6709 \u786e\u5b9a\u7684\u8fd0\u7b97\u6027\u80fd</p> </li> </ul>"},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#1_1","title":"\u2460\u89e3\u91ca\uff1a","text":"<ul> <li>\u501f\u52a9\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u90a3\u4e2a\u7a0b\u5e8f\u80fd\u8bd5\u56fe\u7406\u89e3\u4f60\u7684\u7a0b\u5e8f\uff0c\u7136\u540e\u6267\u884c</li> </ul>"},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#2","title":"\u2461\u7f16\u8bd1\uff1a","text":"<ul> <li>\u501f\u52a9\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7ffb\u8bd1\u6210\u673a\u5668\u8bed\u8a00\uff0c\u7136\u540e\u6267\u884c</li> </ul>"},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#121","title":"1.2.1","text":""},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#122","title":"1.2.2","text":"<p>FORTRAN\u2192BCPL\u2192B\u2192C</p>"},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#123","title":"1.2.3","text":""},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#c","title":"C\u8bed\u8a00\u7528\u5728\uff1a","text":"<p>\u64cd\u4f5c\u7cfb\u7edf\u3001\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3001\u9a71\u52a8\u7a0b\u5e8f\u3001\u5e95\u5c42\u9a71\u52a8\u3001\u56fe\u5f62\u5f15\u64ce\u3001\u56fe\u50cf\u5904\u7406\u3001\u58f0\u97f3\u6548\u679c</p> <p>\u65e5\u5e38\u5e94\u7528\u5f88\u5c11\u76f4\u63a5\u7528C\u8bed\u8a00\u7f16\u5199\uff0c\u5b66\u4e60C\u7684\u8fc7\u7a0b\u4e3b\u8981\u662f\u5199\u7ec3\u4e60\u4ee3\u7801\uff0c\u975e\u771f\u5b9e\u8f6f\u4ef6</p> <p>Tip</p> <p>C\u8bed\u8a00\u9700\u8981\u88ab\u7f16\u8bd1\u624d\u80fd\u8fd0\u884c\uff0c\u9700\u8981\uff1a</p> <ul> <li>\u7f16\u8f91\u5668</li> <li>\u7f16\u8bd1\u5668</li> <li>IDE</li> </ul>"},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#131","title":"1.3.1","text":""},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#c_1","title":"\u7b2c\u4e00\u4e2aC\u7a0b\u5e8f","text":"CC++ <pre><code>int main()\n{\n    print(\"Hello World!\\n\");\n\n    return 0;\n}\n\n//printf:\u6253\u5370\u5b57\u7b26\u4e32\n//\\n:   \u6362\u884c\n</code></pre> <pre><code>int main()\n{\n    cout&lt;&lt;\"Hello World!\"&lt;&lt;endl;\n\n    return 0;\n}\n\n//cout \u6253\u5370\u5b57\u7b26\u4e32\n//endl: \u6362\u884c\n</code></pre>"},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#132","title":"1.3.2","text":""},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#_2","title":"\u6240\u6709\u7a0b\u5e8f\u90fd\u8981\u6709","text":"<pre><code>int main()\n{\n    return 0;\n}\n</code></pre>"},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#133","title":"1.3.3","text":""},{"location":"C/1%20%E3%80%81%E5%85%A5%E9%97%A8/#_3","title":"\u70b9\u8ba1\u7b97","text":"<pre><code>int main()\n{\n    printf(\"12+34=%d\",12+34);\n    return 0;\n}\n// %d:\u628a\u540e\u9762\u4e00\u4e2a\u6574\u6570\u586b\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\uff08\u5360\u4f4d\uff09\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"10 \u3001\u5b57\u7b26\u4e32","text":"<ul> <li>10<ul> <li>10.1.1<ul> <li>\u5b57\u7b26\u4e32<ul> <li>\u5b57\u7b26\u6570\u7ec4</li> <li>\u5b57\u7b26\u4e32</li> <li>\u5b57\u7b26\u4e32\u53d8\u91cf</li> <li>\u5b57\u7b26\u4e32\u5e38\u91cf</li> </ul> </li> </ul> </li> <li>10.1.2<ul> <li>\u5b57\u7b26\u4e32\u53d8\u91cf</li> <li>\u6307\u9488\u8fd8\u662f\u6570\u7ec4\uff1f<ul> <li>char*\u662f\u5b57\u7b26\u4e32\uff1f</li> </ul> </li> </ul> </li> <li>10.1.3<ul> <li>\u5b57\u7b26\u4e32\u7684\u8f93\u5165/\u8f93\u51fa<ul> <li>\u5b89\u5168\u8f93\u5165</li> </ul> </li> <li>\u5e38\u89c1\u9519\u8bef</li> <li>\u7a7a\u5b57\u7b26\u4e32</li> </ul> </li> <li>10.1.4<ul> <li>\u5b57\u7b26\u4e32\u6570\u7ec4</li> <li>\u7a0b\u5e8f\u53c2\u6570</li> </ul> </li> <li>10.2.1<ul> <li>\u5355\u5b57\u7b26\u8f93\u5165\u8f93\u51fa<ul> <li>putchar</li> <li>getchar</li> </ul> </li> </ul> </li> <li>10.2.2<ul> <li>\u51fd\u6570strlen<ul> <li>\u81ea\u5df1\u5199\u51fastrlen</li> </ul> </li> </ul> </li> <li>10.2.3<ul> <li>\u51fd\u6570strcmp<ul> <li>\u81ea\u5df1\u5199\u51fastrcmp</li> </ul> </li> </ul> </li> <li>10.2.4<ul> <li>\u51fd\u6570strcpy</li> <li>\u590d\u5236\u4e00\u4e2a\u5b57\u7b26\u4e32</li> </ul> </li> <li>10.2.6<ul> <li>\u51fd\u6570strchr<ul> <li>e.g.\u5982\u4f55\u5bfb\u627e\u7b2c\u4e8c\u4e2a\uff1f</li> <li>e.g.\u5982\u4f55\u5c06\u627e\u5230\u7684\u5b58\u5230\u53e6\u5916\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d</li> <li>e.g.\u6253\u5370\u627e\u5230\u5b57\u7b26\u4e32\u524d\u9762\u7684\u4e1c\u897f</li> </ul> </li> <li>\u51fd\u6570strstr</li> <li>\u51fd\u6570strcasestr</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#10","title":"10","text":""},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#1011","title":"10.1.1","text":""},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_1","title":"\u5b57\u7b26\u4e32","text":""},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_2","title":"\u5b57\u7b26\u6570\u7ec4","text":"<pre><code>char word[]={'H','e','l','l','o'\uff0c'!'};\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_3","title":"\u5b57\u7b26\u4e32","text":"<pre><code>char word[]={'H','e','l','l','o','!','\\0'};\n//\u4ee50\uff08\u6574\u65700\uff09\u7ed3\u5c3e\u7684\u4e00\u4e32\u5b57\u7b26\nchar word[]={'H','e','l','l','o','!',0};//\u53ef\u7b49\u4ef7\nchar word[]={'H','e','l','l','o','!','0'};//\u4e0d\u53ef\u7b49\u4ef7\n</code></pre> <ul> <li>\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u4e0d\u5305\u542b\u8fd9\u4e2a<code>0</code></li> <li>\u5b57\u7b26\u4e32\u4ee5 \u6570\u7ec4 \u5f62\u5f0f\u5b58\u5728\uff0c\u4ee5\u6570\u7ec4\u6216\u8005\u6307\u9488\u5f62\u5f0f\u8bbf\u95ee</li> <li><code>string.h</code>\u6709\u5f88\u591a\u5904\u7406\u5b57\u7b26\u4e32\u7684\u51fd\u6570</li> </ul> <p>Question</p> <p>\u95ee\u9898\uff1a\u5982\u679c\u6211\u60f3\u5728\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u4e00\u4e2a <code>\\0</code> \u5b57\u7b26\u800c\u4e0d\u7ec8\u6b62\u5b57\u7b26\u4e32\u600e\u4e48\u529e\u2753\u2753\u2753</p>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_4","title":"\u5b57\u7b26\u4e32\u53d8\u91cf","text":"<pre><code>char *str=\"Hello\";\nchar word[]=\"Hello\";\nchar line[10]=\"Hello\";\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_5","title":"\u5b57\u7b26\u4e32\u5e38\u91cf","text":"<ul> <li>\u201cHello\u201d\u4f1a\u88ab\u7f16\u8bd1\u5668\u53d8\u6210\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u653e\u5728\u67d0\u5904\uff0c\u8fd9\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u662f6\uff0c\u7ed3\u5c3e\u8fd8\u6709\u8868\u793a\u7ed3\u675f\u76840</li> <li>\u4e24\u4e2a\u76f8\u90bb\u5b57\u7b26\u4e32\u5e38\u91cf\u4f1a\u88ab\u8fde\u5728\u4e00\u8d77</li> </ul> <p>Note</p> <ul> <li>C\u8bed\u8a00\u7684\u5b57\u7b26\u4e32\u662f\u4ee5\u5b57\u7b26\u6570\u7ec4\u7684\u5f62\u6001\u5b58\u5728\u7684</li> <li>\u4e0d\u80fd\u7528\u8fd0\u7b97\u7b26\u5bf9\u5b57\u7b26\u4e32\u505a\u8fd0\u7b97</li> <li>\u901a\u8fc7\u6570\u7ec4\u7684\u65b9\u5f0f\u53ef\u4ee5\u904d\u5386\u5b57\u7b26\u4e32</li> </ul>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#1012","title":"10.1.2","text":""},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_6","title":"\u5b57\u7b26\u4e32\u53d8\u91cf","text":"<p><pre><code>int main( ) {\n\n    int i=0;\n    char *s = \"Hello World!\";\n    char *s2= \"Hello World!\";\n\n    printf(\"s= %p\\n\",s);//s= 00007ff6da3cb000\n    printf(\"s2=%p\\n\",s2);//s2=00007ff6da3cb000\n    printf(\"s3=%p\\n\",s3);//s3=0000006ed63ff7ff\n    printf(\"i=%p\\n\",&amp;i);//i=0000002d14bffb7c\n\n    return 0;\n}\n</code></pre> - \u6307\u9488s\u548cs2\u6307\u5411\u540c\u4e00\u5730\u5740\uff0c\u6240\u4ee5\u4e0d\u80fd\u968f\u610f\u4fee\u6539\u6570\u7ec4\u4e2d\u5143\u7d20\uff0c\u5426\u5219\u6539\u4e86s\u4e5f\u4f1a\u5f71\u54cds2</p> <ul> <li> <p>s\u5b9e\u9645\u4e0a\u662f<code>const char *s</code>\uff0c\u53ea\u8bfb</p> </li> <li> <p>\u8981==\u4fee\u6539==\u5b57\u7b26\u4e32\uff0c\u5e94\u8be5\u7528\u6570\u7ec4</p> </li> <li> <p><code>c     char s[]=\"Hello,world!\";</code></p> </li> </ul>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_7","title":"\u6307\u9488\u8fd8\u662f\u6570\u7ec4\uff1f","text":"<ul> <li> <p>\u6307\u9488\u8fd8\u662f\u6570\u7ec4\uff1f</p> <ul> <li> <p>\u6570\u7ec4</p> <ul> <li> <p>\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5728\u8fd9\u91cc</p> <ul> <li>\u4f5c\u4e3a\u672c\u5730\u53d8\u91cf\u88ab\u81ea\u52a8\u56de\u6536</li> </ul> </li> </ul> </li> <li> <p>\u6307\u9488</p> <ul> <li>\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e0d\u77e5\u9053\u5728\u54ea\u91cc<ul> <li>\u5904\u7406\u53c2\u6570</li> <li>\u52a8\u6001\u5206\u914d\u5185\u5b58</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Tip</p> <p>\u6784\u9020\u5b57\u7b26\u4e32\u2192\u6570\u7ec4</p> <p>\u5904\u7406\u4e00\u4e2a\u5b57\u7b26\u4e32\u2192\u6307\u9488</p>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#char","title":"<code>char*</code>\u662f\u5b57\u7b26\u4e32\uff1f","text":"<ul> <li>\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f<code>char*</code>\u5f62\u5f0f</li> <li><code>char*</code>\u4e0d\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32</li> <li>\u672c\u610f\u662f\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488\uff0c\u53ef\u80fd\u6307\u5411\u7684\u662f\u5b57\u7b26\u7684\u6570\u7ec4(\u50cfint*)</li> <li>\u53ea\u6709\u6240\u6307\u5411\u7684\u5b57\u7b26\u6570\u7ec4\u7ed3\u5c3e\u67090\uff0c\u624d\u80fd\u8bf4\u5b83\u6240\u6307\u7684\u662f\u5b57\u7b26\u4e32</li> </ul>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#1013","title":"10.1.3","text":""},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_8","title":"\u5b57\u7b26\u4e32\u7684\u8f93\u5165/\u8f93\u51fa","text":"<pre><code>char *t=\"title\";\nchar *s;\ns=t;\n</code></pre> <pre><code>stateDiagram\nt--&gt;title\\0\ns--&gt;title\\0</code></pre> <p>\u5e76\u6ca1\u6709\u521b\u9020\u4e00\u4e2a\u65b0\u7684<code>s</code>\uff0c\u800c\u662f\u90fd\u6307\u5411<code>title\\0</code></p> <pre><code>int main(void) {\n    char word[8];\n    scanf(\"%s\", word);//hello world\n    printf(\"%s##\\n\", word);//hello##\n\n    return 0;\n}\n</code></pre> <pre><code>int main(void) {\n    char word[8];\n    char word2[8];\n    scanf(\"%s\", word);//hello\n    scanf(\"%s\",word2);//world\n    printf(\"%s##%s##\\n\", word,word2);//hello##world##\n\n    return 0;\n}\n</code></pre> <ul> <li><code>scanf</code>\u8bfb\u5165\u4e00\u4e2a\u5355\u8bcd\uff08\u5230\u7a7a\u683c\u3001tab\u3001\u56de\u8f66\u4e3a\u6b62\uff09</li> <li><code>scanf</code>\u4e0d\u5b89\u5168\u2192\u4e0d\u77e5\u9053\u8981\u8bfb\u5165\u7684\u5185\u5bb9\u7684\u957f\u5ea6</li> </ul> <pre><code>int main(void) {\n    char word[8];\n    char word2[8];\n    scanf(\"7%s\", word);//12345678\n    scanf(\"7%s\",word2);\n    printf(\"%s##%s##\\n\", word,word2\uff1b//1234567##8##\n\n    return 0;\n}\n</code></pre> <p>Tip</p>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_9","title":"\u5b89\u5168\u8f93\u5165","text":"<p><code>%ns</code>\u9650\u5b9a\u8f93\u5165\u5b57\u7b26\u4e32\u957f\u5ea6</p>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_10","title":"\u5e38\u89c1\u9519\u8bef","text":"<pre><code>char *string;\nscanf(\"%s\",string);\n</code></pre> <ul> <li>\u4ee5\u4e3a<code>char*</code>\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u53d8\u91cfstring\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528</li> <li>\u6ca1\u6709\u5bf9<code>string</code>\u521d\u59cb\u5316\u4e3a<code>0</code>\uff0c\u5e76\u4e0d\u4e00\u5b9a\u6bcf\u4e00\u6b21\u90fd\u51fa\u9519</li> </ul>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_11","title":"\u7a7a\u5b57\u7b26\u4e32","text":"<pre><code>char buffer[100]=\"\";\n//buffer[0]=='\\0'\n</code></pre> <pre><code>char buffer[]=\"\";\n//\u8fd9\u4e2a\u6570\u7ec4\u957f\u5ea6\u5219\u4e3a1\uff0c\u56e0\u4e3a\u672a\u5b9a\u4e49\u957f\u5ea6\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#1014","title":"10.1.4","text":""},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_12","title":"\u5b57\u7b26\u4e32\u6570\u7ec4","text":"\u4ee3\u7801 \u542b\u4e49 \u2460<code>char **a</code> a\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u90a3\u4e00\u4e2a\u6307\u9488\uff0c\u90a3\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u5b57\u7b26\uff08\u4e32\uff09 \u2461<code>char a[][n]</code> \u4e8c\u7ef4\u5b57\u7b26\u6570\u7ec4 \u2462<code>char *a[]</code> \u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u6307\u9488\u6570\u7ec4\u3002\u8fd9\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488 <p>\u2461 vs \u2462\uff1a</p> <ul> <li><code>char a[][10]</code>\u9002\u7528\u4e8e\u5b58\u50a8\u56fa\u5b9a\u957f\u5ea6\u7684\u591a\u4e2a\u5b57\u7b26\u4e32\u3002</li> <li><code>char *a[]</code>\u66f4\u7075\u6d3b\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e0d\u540c\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u5185\u5b58\u7ba1\u7406\u3002</li> </ul> <pre><code>graph LR\n    subgraph \"pointer a\"\n    A0[\"a[0]\"]\n    A1[\"a[1]\"]\n    end\n\n    subgraph \"string\"\n    S1[\"hello\\0\"]\n    S2[\"world\\0\"]\n    end\n\n    A0 --&gt; S1\n    A1 --&gt; S2</code></pre> <pre><code>int main() {\n    const char *months[] = {\n        \"January\", \"February\", \"March\", \"April\",\n        \"May\", \"June\", \"July\", \"August\",\n        \"September\", \"October\", \"November\", \"December\"\n    };\n\n    int month;\n    printf(\"Enter month number (1-12): \");\n    scanf(\"%d\", &amp;month);\n\n    if (month &gt;= 1 &amp;&amp; month &lt;= 12) {\n        printf(\"The month is: %s\\n\", months[month - 1]);\n    } else {\n        printf(\"Invalid month number! Please enter a number between 1 and 12.\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_13","title":"\u7a0b\u5e8f\u53c2\u6570","text":"<pre><code>int main(int argc, char const *argv[])\n</code></pre> <pre><code>int main(int argc,char const *argv[]) {\n    int i=0;\n    for(i=0;i&lt;=argc;i++) {\n        printf(\"%d:%s\\n\",i,argv[i]);\n    }\n    return 0;\n}\n/*\n0:C:\\Users\\Devlin\\CLionProjects\\untitled1\\cmake-build-debug\\untitled1.exe\n1:(null)\n*/\n</code></pre> <p><code>argc</code> \u662f \"argument count\" \u7684\u7f29\u5199\uff0c\u8868\u793a\u547d\u4ee4\u884c\u53c2\u6570\u7684\u6570\u91cf\u3002</p> <p><code>argv</code> \u662f \"argument vector\" \u7684\u7f29\u5199\uff0c\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff08\u6307\u5411\u5b57\u7b26\u5e38\u91cf\u7684\u6307\u9488\u6570\u7ec4\uff09\uff0c\u7528\u4e8e\u5b58\u50a8\u547d\u4ee4\u884c\u53c2\u6570\u7684\u5b9e\u9645\u503c\u3002</p>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#1021","title":"10.2.1","text":""},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_14","title":"\u5355\u5b57\u7b26\u8f93\u5165\u8f93\u51fa","text":""},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#putchar","title":"<code>putchar</code>","text":"<pre><code>int putchar(int c);\n</code></pre> <ul> <li>\u5411\u6807\u51c6\u8f93\u51fa\u5199\u4e00\u4e2a\u5b57\u7b26</li> <li>\u8fd4\u56de\u5199\u4e86\u51e0\u4e2a\u5b57\u7b26\uff0c<code>EOF(-1)</code>\u8868\u793a\u5199\u5931\u8d25</li> </ul>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#getchar","title":"<code>getchar</code>","text":"<ul> <li>\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26</li> <li>\u8fd4\u56de\u7c7b\u578b\u662f<code>int</code>\u662f\u4e3a\u4e86\u8fd4\u56de<code>EOF(-1)</code></li> <li>Windows\u2192Ctrl-Z</li> <li>Unix\u2192Ctrl-D</li> </ul> <pre><code>int main(int argc,char const *argv[]) {\n    int ch;\n\n    while((ch=getchar())!=EOF) {\n        putchar(ch);\n    }\n    printf(\"EOF\\n\");\n    return 0;\n}\n</code></pre> <pre><code>flowchart LR\n    I/O --&gt; B[Shell]\n    B --&gt; C[Program]\n    C --&gt; B\n    B --&gt; I/O</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#1022","title":"10.2.2","text":""},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#strlen","title":"\u51fd\u6570<code>strlen</code>","text":"<pre><code>#include &lt;string.h&gt;\n</code></pre> <pre><code>//\u5b9e\u8d28\nsize_t strlen(const char *s)\uff1b\n</code></pre> <pre><code>int main(int argc, char const *argv[]) {\n    char line[]=\"Hello\";\n    printf(\"strlen=%lu\\n\", strlen(line));//strlen=5\n    printf(\"sizeof=%lu\\n\",sizeof(line));//sizeof=6\n\n    return 0;\n}\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#strlen_1","title":"\u81ea\u5df1\u5199\u51fa<code>strlen</code>","text":"<pre><code>int mystrlen(const char *s) {\n    int index =0;\n    while (s[index] != '\\0') {\n        index++;\n    }\n    return index;\n}\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#1023","title":"10.2.3","text":""},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#strcmp","title":"\u51fd\u6570<code>strcmp</code>","text":"<pre><code>int main(int argc,char const *argv[]) {\n    char s1[]=\"abc\";\n    char s2[]=\"Abc\";//a,A\u5728ASCII\u7801\u8868\u4e2d\u5dee32\n    printf(\"%d\\n\",s1==s2);\n    printf(\"%d\\n\",strcmp(s1,s2));//32  \u2192  'a'-'A'==32\n\n    return 0\uff1b\n}\n</code></pre> <pre><code>int main(int argc,char const *argv[]) {\n    char s1[]=\"abc\";\n    char s2[]=\"abc \";//\u591a\u4e00\u4e2a\u7a7a\u683c \u7a7a\u683c\u5728ASCII\u7801\u4e2d\u662f32\n    printf(\"%d\\n\",s1==s2);\n    printf(\"%d\\n\",strcmp(s1,s2));//-32 \n\n    return 0\uff1b\n}\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#strcmp_1","title":"\u81ea\u5df1\u5199\u51fa<code>strcmp</code>","text":"<pre><code>//\u2460\u7528\u6570\u7ec4\nint mystrcmp(const char *s1, const char *s2) {\n    int index =0;\n    while(s1[index]==s2[index] &amp;&amp; s1[index] != '\\0') {\n        index++;\n    }\n    return s1[index] - s2[index];\n}\n//\u2461\u7528\u6307\u9488\nint mystrcmp(const char *s1, const char *s2) {\n    while(*s1==*s2 &amp;&amp; *s1 != '\\0') {\n        s1++;\n        s2++;\n    }\n    return *s1-*s2;\n}\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#1024","title":"10.2.4","text":""},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#strcpy","title":"\u51fd\u6570<code>strcpy</code>","text":"<pre><code> char *strcpy(char *restrict dst,const char *restrict src);\n//\u628asrc\u5185\u5bb9\u62f7\u8d1d\u5230dst\u4e2d\n</code></pre> <p>Warning</p> <p><code>restrict</code>\u8868\u660e<code>src</code>\u548c<code>dst</code>\u4e0d\u91cd\u53e0(C99)</p> <p>\u8fd4\u56de<code>dst</code>\u2192\u4e3a\u4e86\u94fe\u8d77\u4ee3\u7801\u6765</p>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#_15","title":"\u590d\u5236\u4e00\u4e2a\u5b57\u7b26\u4e32","text":"<pre><code>char *dst=(char *)malloc(strlen(src)+1);\nstrcpy(dst,src);\n</code></pre> <p>\u81ea\u5df1\u5199\u51fa<code>strcpy</code></p> <pre><code>//\u2460\u7528\u6570\u7ec4\nchar *mystrcpy (char *dst, const char *src) {\n    int index =0;\n    while (src[index] != '\\0') {\n        dst[index] = src[index];\n        index++;\n    }\n    dst[index] = '\\0';\n    return dst;\n}\n//\u2461\u7528\u6307\u9488\nchar *mystrcpy (char *dst, const char *src) {\n    char *ret = dst;\n    while (*src != '\\0') {\n        *dst++ = *src++;\n    }\n    /*\n    \u53ef\u4ee5\u7cbe\u7b80while\u8bed\u53e5\n    while(*dst++=*src++);\n    \u8be5\u53e5\u9690\u542b\u5224\u65ad\u4e86*src\u662f0\n    */\n    *dst = '\\0';\n    return ret;\n}\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#1026","title":"10.2.6","text":""},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#strchr","title":"\u51fd\u6570<code>strchr</code>","text":"<pre><code>char *strchr(const char *str, int c);//\u4ece\u5de6\u627e\nchar *strrchr(const char *str, int c);//\u4ece\u53f3\u627e\n//\u8fd4\u56deNULL\u8868\u793a\u6ca1\u627e\u5230\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#eg","title":"e.g.\u5982\u4f55\u5bfb\u627e\u7b2c\u4e8c\u4e2a\uff1f","text":"<pre><code>int main(void) {\n    char s[]=\"Hello\";\n    char *p=strchr(s,'l');\n    p =strchr(p+1,'l');//\u5728\u5df2\u7ecf\u627e\u5230\u7684\u5b57\u7b26\u4e32\u201cllo\u201d\u4e2d\u7ee7\u7eed\u5bfb\u627e\n    printf(\"%s\\n\",p);\n    return 0;\n}\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#eg_1","title":"e.g.\u5982\u4f55\u5c06\u627e\u5230\u7684\u5b58\u5230\u53e6\u5916\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d","text":"<pre><code>int main(void) {\n    char s[]=\"Hello\";\n    char *p=strchr(s,'l');\n    char *t=(char*)malloc(strlen(p)+1);\n    strcpy(t,p);\n    printf(\"%s\\n\",t);\n    free (t);\n    return 0;\n}\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#eg_2","title":"e.g.\u6253\u5370\u627e\u5230\u5b57\u7b26\u4e32\u524d\u9762\u7684\u4e1c\u897f","text":"<pre><code>int main(void) {\n    char s[]=\"Hello\";\n    char *p=strchr(s,'l');\n    char c;\n    c=*p;\n    *p='\\0';\n    char *t=(char*)malloc(strlen(p)+1);\n    strcpy(t,s);\n    printf(\"%s\\n\",t);\n    *p=c;\n    free (t);\n    return 0;\n}\n</code></pre>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#strstr","title":"\u51fd\u6570<code>strstr</code>","text":"<p>\u5bfb\u627e\u5b57\u7b26\u4e32</p>"},{"location":"C/10%20%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/#strcasestr","title":"\u51fd\u6570<code>strcasestr</code>","text":"<p>\u5ffd\u7565\u5927\u5c0f\u5199\u5bfb\u627e\u5b57\u7b26\u4e32</p>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/","title":"11 \u3001\u7ed3\u6784\u4f53","text":"<ul> <li>11<ul> <li>11.1.1<ul> <li>\u679a\u4e3e<ul> <li>\u5e38\u91cf\u7b26\u53f7\u5316</li> </ul> </li> <li>\u5957\u8def\uff1a\u81ea\u52a8\u8ba1\u6570\u7684\u679a\u4e3e</li> <li>\u679a\u4e3e\u91cf</li> </ul> </li> <li>11.1.2<ul> <li>\u7ed3\u6784\u7c7b\u578b<ul> <li>\u58f0\u660e\u7ed3\u6784\u7c7b\u578b</li> <li>\u58f0\u660e\u7ed3\u6784\u7684\u5f62\u5f0f<ul> <li>\u2460</li> <li>\u2461</li> <li>\u2462</li> </ul> </li> </ul> </li> <li>\u7ed3\u6784\u7684\u521d\u59cb\u5316</li> <li>\u7ed3\u6784\u6210\u5458</li> <li>\u7ed3\u6784\u8fd0\u7b97</li> <li>\u7ed3\u6784\u6307\u9488</li> </ul> </li> <li>11.1.3<ul> <li>\u7ed3\u6784\u4e0e\u51fd\u6570</li> <li>\u8f93\u5165\u7ed3\u6784</li> <li>\u7ed3\u6784 \u6307\u9488 \u4f5c\u4e3a\u53c2\u6570</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#11","title":"11","text":""},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#1111","title":"11.1.1","text":""},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_1","title":"\u679a\u4e3e","text":""},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_2","title":"\u5e38\u91cf\u7b26\u53f7\u5316","text":"<pre><code>enum colors{red,yellow,green}\n</code></pre> <p>\u679a\u4e3e\u662f\u4e00\u79cd\u7528\u6237\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u7528\u5173\u952e\u5b57 <code>enum</code> \u4ee5\u5982\u4e0b\u8bed\u6cd5\u6765\u58f0\u660e\uff1a</p> <pre><code>enum \u679a\u4e3e\u7c7b\u578b\u540d\u5b57{\u540d\u5b570\uff0c\u2026\u2026\uff0c \u540d\u5b57n};\n</code></pre> <pre><code>enum color{red ,yellow,green};\nvoid f(enum color c);\nint main(void) {\n    enum color t=red;\n\n    scanf(\"%d\",&amp;t);\n    f(t);\n\n    return 0;\n}\n\nvoid f(enum color c) {\n    printf(\"%d\\n\",c);\n}\n</code></pre> <ul> <li>\u679a\u4e3e\u91cf\u53ef\u4ee5\u4f5c\u4e3a\u503c</li> <li>\u679a\u4e3e\u7c7b\u578b\u53ef\u4ee5\u8ddf\u4e0a<code>enum</code>\u4f5c\u4e3a\u7c7b\u578b</li> <li>\u4f46\u662f\u5b9e\u9645\u4e0a\u662f\u4ee5\u6574\u6570\u6765\u505a\u5185\u90e8\u8ba1\u7b97\u548c\u5916\u90e8\u8f93\u5165\u8f93\u51fa\u7684</li> </ul>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_3","title":"\u5957\u8def\uff1a\u81ea\u52a8\u8ba1\u6570\u7684\u679a\u4e3e","text":"<pre><code>enum COLOR{RED,YELLOW,GREEN,NumCOLORS};\n</code></pre> <p>\u8fd9\u6837\u9700\u8981\u904d\u5386\u6240\u6709\u7684\u679a\u4e3e\u91cf\u6216\u8005\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u7528\u679a\u4e3e\u91cf\u505a\u4e0b\u6807\u7684\u6570\u7ec4\u7684\u65f6\u5019\u5c31\u5f88\u65b9\u4fbf\u4e86</p>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_4","title":"\u679a\u4e3e\u91cf","text":"<p>\u58f0\u660e\u679a\u4e3e\u91cf\u65f6\u53ef\u4ee5\u6307\u5b9a\u503c</p> <pre><code>enum COLOR{RED=1,YELLOW,GREEN=5};\n</code></pre> <p>Info</p> <ul> <li>\u679a\u4e3e\u6bd4<code>const int</code>\u65b9\u4fbf</li> <li>\u679a\u4e3e\u6bd4\u5b8f\uff08macro\uff09\u597d\uff0c\u56e0\u4e3a\u679a\u4e3e\u6709<code>int</code>\u7c7b\u578b</li> </ul>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#1112","title":"11.1.2","text":""},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_5","title":"\u7ed3\u6784\u7c7b\u578b","text":""},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_6","title":"\u58f0\u660e\u7ed3\u6784\u7c7b\u578b","text":"<pre><code>struct date{\n    int month;\n    int day;\n    int year;\n};//\u5e38\u89c1\u9519\u8bef\uff1a\u6f0f\u6389\u672b\u5c3e\u7684\u5206\u53f7\n</code></pre> <p>Tip</p> <p>\u548c\u672c\u5730\u53d8\u91cf\u4e00\u6837\uff0c\u5728\u51fd\u6570\u5185\u90e8\u58f0\u660e\u7684\u7ed3\u6784\u7c7b\u578b\u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 \u6240\u4ee5\u901a\u5e38\u5728\u51fd\u6570\u5916\u90e8\u58f0\u660e\u7ed3\u6784\u7c7b\u578b\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u88ab\u591a\u4e2a\u51fd\u6570\u6240\u4f7f\u7528\u4e86</p> <pre><code>struct date {\n    int year;\n    int month;\n    int day;\n};\n\nint main(void) {\n    struct date today;//\u7c7b\u578b\u662fstruct date\uff0c\u540d\u79f0\u53ebtoday\n    today.day = 10;\n    today.month = 12;\n    today.year = 2001;\n\n    printf(\"Today's date is %i-%i-%i.\\n\",today.year,today.month,today.day);\n    return 0;\n}\n</code></pre>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_7","title":"\u58f0\u660e\u7ed3\u6784\u7684\u5f62\u5f0f","text":""},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#1","title":"\u2460","text":"<pre><code>struct point{\n    int x;\n    int y;\n};\n\nstruct point p1,p2;\n//p1\u548cp2\u90fd\u662fpointer\uff0c\u91cc\u9762\u6709x\u548cy\u7684\u503c\n</code></pre>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#2","title":"\u2461","text":"<pre><code>struct{\n    int x;\n    int y;\n}p1,p2;\n//p1\u548cp2\u90fd\u662f\u4e00\u79cd\u65e0\u540d\u7ed3\u6784\uff0c\u91cc\u9762\u6709x\u548cy\n</code></pre>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#3","title":"\u2462","text":"<pre><code>struct point{\n    int x;\n    int y;\n}p1,p2;\n//p1\u548cp2\u90fd\u662fpointer\uff0c\u91cc\u9762\u6709x\u548cy\u7684\u503ct\n</code></pre> <p>Note</p> <p>\u5bf9\u4e8e\u7b2c\u4e00\u548c\u7b2c\u4e09\u79cd\u5f62\u5f0f\uff0c\u90fd\u58f0\u660e\u4e86\u7ed3\u6784point\u3002\u4f46\u662f\u7b2c\u4e8c\u79cd\u5f62\u5f0f\u6ca1\u6709\u58f0\u660epoint,\u53ea\u662f\u5b9a\u4e49\u4e86\u4e24\u4e2a\u53d8\u91cf</p>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_8","title":"\u7ed3\u6784\u7684\u521d\u59cb\u5316","text":"<pre><code>struct date today={07,31,2024};\nstruct date today2={.month=7,.year=2024}\n//\u4e0d\u8d4b\u503c\u9ed8\u8ba4\u521d\u59cb\u662f0\n</code></pre>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_9","title":"\u7ed3\u6784\u6210\u5458","text":"<p>\u6570\u7ec4 vs \u7ed3\u6784</p> <ul> <li>\u6570\u7ec4\u7528<code>[]</code>\u8fd0\u7b97\u7b26\u548c\u4e0b\u6807\u8bbf\u95ee\u5176\u6210\u5458</li> <li> <p>e.g.<code>a[0]=10</code></p> </li> <li> <p>\u7ed3\u6784\u7528<code>.</code>\u8fd0\u7b97\u7b26\u548c\u540d\u5b57\u8bbf\u95ee\u5176\u6210\u5458</p> </li> <li>e.g.<code>today.day</code></li> </ul>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_10","title":"\u7ed3\u6784\u8fd0\u7b97","text":"<p>\u6570\u7ec4\u65e0\u6cd5\u505a\u5230</p> <pre><code>p1 =(struct point){5,10};//p1.x=5,p1.y=10\np1 =p2;                  //p1.x=p2.x ; p1.y=p2.y\n</code></pre>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_11","title":"\u7ed3\u6784\u6307\u9488","text":"<p>\u548c\u6570\u7ec4\u4e0d\u4e00\u6837\uff0c\u7ed3\u6784\u53d8\u91cf\u540d\u5b57\u5e76\u4e0d\u662f\u7ed3\u6784\u53d8\u91cf\u7684\u5730\u5740\uff0c \u5fc5\u987b \u4f7f\u7528<code>&amp;</code>\u8fd0\u7b97\u7b26</p> <pre><code>struct date *pDate =&amp;today;\n</code></pre>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#1113","title":"11.1.3","text":""},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_12","title":"\u7ed3\u6784\u4e0e\u51fd\u6570","text":"<pre><code>int numberOfDays(struct date d);\n</code></pre> <p>\u6574\u4e2a\u7ed3\u6784\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u7684\u503c\u4f20\u5165\u51fd\u6570</p> <p>\u8fd9\u65f6\u5019\u662f\u5728\u51fd\u6570\u5185\u65b0\u5efa\u4e00\u4e2a\u7ed3\u6784\u53d8\u91cf\uff0c\u5e76\u590d\u5236\u8c03\u7528\u8005\u7684\u7ed3\u6784\u7684\u503c</p>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_13","title":"\u8f93\u5165\u7ed3\u6784","text":"<p>\u6ca1\u6709\u76f4\u63a5\u7684\u65b9\u5f0f\u53ef\u4ee5\u4e00\u6b21scanf\u4e00\u4e2a\u7ed3\u6784</p> <p>\u2192\u5728\u8fd9\u4e2a\u8f93\u5165\u51fd\u6570\u4e2d\uff0c\u5b8c\u5168\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684\u7ed3\u6784\u53d8\u91cf\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u7ed3\u6784\u8fd4\u56de\u7ed9\u8c03\u7528\u8005</p>"},{"location":"C/11%20%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/#_14","title":"\u7ed3\u6784 \u6307\u9488 \u4f5c\u4e3a\u53c2\u6570","text":"Quote <p>\"If a large structure is to be passed to a function, it is generally more efficient to pass a pointer than to copy the whole structure\"</p> <p>\u200b                                                                                       \u2013K&amp;R(p.131)</p> <pre><code>struct date *p =&amp;myday;\n\n(*p).month=12;//\u2460\np-&gt;month=12;//\u2461\n</code></pre> <p>\u7528<code>-&gt;</code>\u8868\u793a\u6307\u9488\u6240\u6307\u7684\u7ed3\u6784\u53d8\u91cf\u4e2d\u7684\u6210\u5458</p>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/","title":"2 \u3001\u53d8\u91cf\u4e0e\u8fd0\u7b97\u7b26","text":"<ul> <li>2<ul> <li>2.1.2<ul> <li>\u53d8\u91cf\u5b9a\u4e49</li> <li>\u5f62\u5f0f</li> <li>\u4fdd\u7559\u5b57</li> </ul> </li> <li>2.1.3<ul> <li>\u53d8\u91cf\u521d\u59cb\u5316\u3001\u8d4b\u503c</li> </ul> </li> <li>2.1.4<ul> <li>\u53d8\u91cf\u8f93\u5165</li> </ul> </li> <li>2.1.5<ul> <li>\u5e38\u91cf</li> </ul> </li> <li>2.1.6<ul> <li>\u6d6e\u70b9\u6570</li> <li>\u5bf9\u6bd4</li> </ul> </li> <li>2.2.1<ul> <li>\u8868\u8fbe\u5f0f</li> </ul> </li> <li>2.2.2<ul> <li>\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7</li> <li>\u4f18\u5148\u7ea7\u8868\u683c</li> </ul> </li> <li>2.2.3<ul> <li>\u4ea4\u6362\u53d8\u91cf</li> </ul> </li> <li>2.2.4<ul> <li>\u590d\u5408\u8d4b\u503c<ul> <li>\u9012\u589e/\u9012\u51cf\u8fd0\u7b97\u7b26\uff08++\uff0c--\uff09</li> <li>\u524d\u7f00/\u540e\u7f00</li> </ul> </li> </ul> </li> <li>2.2.5<ul> <li>Leetcode\u7f51\u7ad9\u4f7f\u7528</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#2","title":"2","text":""},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#212","title":"2.1.2","text":""},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_1","title":"\u53d8\u91cf\u5b9a\u4e49","text":"<p>e.g. \u9700\u6c42\uff1a\u6709\u5730\u65b9\u653e\u6570\u5b57\uff1b\u6709\u529e\u6cd5\u8f93\u5165\u6570\u5b57\uff1b\u8f93\u5165\u7684\u6570\u5b57\u80fd\u8fdb\u884c\u8fd0\u7b97</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int price=0;\n    printf(\"Enter Price:\");\n    scanf(\"%d\",&amp;price);\n\n    int change = 100-price;\n    printf(\"Change Price:%d\",change);\n    return 0;\n\n}\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_2","title":"\u5f62\u5f0f","text":"<p>&lt;\u7c7b\u578b\u540d\u79f0&gt;&lt;\u53d8\u91cf\u540d\u79f0&gt;</p> Danger <p>\u4e0d\u80fd\u6570\u5b57\u5f00\u5934</p> <pre><code>int price\nint amount\nint change\n\u2026\u2026\u2026\u2026\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_3","title":"\u4fdd\u7559\u5b57","text":"<pre><code>auto, break, case, char,const,\ncontinue, default,do,double,\nelse, enum,extern,float, for,\ngoto, if, int, long, register, return,\nshort,signed, sizeof,static,\nstruct,switch,typedef,union,\nunsigned, void, volatile, while\n    \u2026\u2026\u2026\u2026\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#213","title":"2.1.3","text":""},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_4","title":"\u53d8\u91cf\u521d\u59cb\u5316\u3001\u8d4b\u503c","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int price=0;\n    printf(\"Enter Price:\");\n    scanf(\"%d\",&amp;price);\n\n    int change = 100-price;\n    printf(\"Change Price:%d\",change);\n    return 0;\n\n}\n\n// \u5728C99\u6807\u51c6\u4e0b\u53ef\u4ee5\u968f\u5904\u5b9a\u4e49\u53d8\u91cf\uff0c ANSI-C\u5219\u4e0d\u884c\n</code></pre> <pre><code>scanf(\"%d\", &amp;price);\n#\u8bfb\u5165\u4e0b\u4e00\u4e2a\u6574\u6570\u8d4b\u503c\u7ed9price\n</code></pre> <p>Note</p> <p>a=b\u4e0eb=a\u662f\u4e0d\u540c\u7684\u8d4b\u503c\u8bed\u53e5</p> <p>\u6240\u6709\u53d8\u91cf\u90fd\u8981\u5148\u5b9a\u4e49\u521d\u59cb\u503c</p> <pre><code>int main()\n{\n    int i=0;\n    int j=0;\n    j=i+10;\n    printf(\"%d j: \\n\",j);\n\n\n    return 0;\n\n}\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#214","title":"2.1.4","text":""},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_5","title":"\u53d8\u91cf\u8f93\u5165","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int a=0;\n    int b=0;\n\n    scanf(\"hello%d %d\",&amp;a, &amp;b);\n    printf(\"%d %d\\n\",a,b);\n\n    return 0;\n}\n//\u51fa\u73b0\u5728scanf\u4e2d\u7684\u90e8\u5206\u5fc5\u987b\u5728\u8f93\u5165\u65f6\u8f93\u5165\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#215","title":"2.1.5","text":""},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_6","title":"\u5e38\u91cf","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int price=0;\n    const int AMOUNT=100;\n    printf(\"Enter Price:\");\n    scanf(\"%d\",&amp;price);\n\n    int change = AMOUNT-price;\n    printf(\"Change Price:%d\",change);\n    return 0;\n\n}\n//const\u662f\u4fee\u9970\u7b26\uff0c\u5728int\u524d\u9762\uff0c\u4e14\u4e00\u65e6\u521d\u59cb\u5316\uff0c\u4e0d\u80fd\u4fee\u6539\n</code></pre> <p>try\uff1a\u8ba9\u7528\u6237\u53ef\u4ee5\u8f93\u5165AMOUNT\u600e\u4e48\u529e\uff1f</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int price=0;\n    int amount=0;\n    printf(\"Enter Price:\");\n    scanf(\"%d\",&amp;price);\n\n    printf(\"Enter Amount:\");\n    scanf(\"%d\",&amp;amount);\n\n    int change = amount-price;\n    printf(\"Change Price:%d\",change);\n    return 0;\n\n}\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#216","title":"2.1.6","text":""},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_7","title":"\u6d6e\u70b9\u6570","text":"<ul> <li>\u7f8e\u56fd\u4f7f\u7528\u82f1\u5236\u8ba1\u91cf\u5355\u4f4d\uff0c\u4e60\u60ef\u7528\u51e0\u5c3a\u51e0\u5bf8\uff08\u82f1\u5c3a\u82f1\u5bf8\uff09\u6765\u62a5\u81ea\u5df1\u7684\u8eab\u9ad8\u3002\u5982\u679c\u9047\u5230\u4e00\u4e2a\u7f8e\u56fd\u4eba\u544a\u8bc9\u4f60\u4ed6\u662f5\u82f1\u5c3a7\uff0c\u4ed6\u7684\u8eab\u9ad8\u5e94\u8be5\u662f\u4e00\u7c73\u51e0\u5462\uff1f\u2192\uff085+7\u00f712\uff09\u00d70.3048=1.7018\u7c73</li> </ul> <p><pre><code>int main()\n{\n    int foot=0;\n    int inch=0;\n    printf(\"Please enter the foot:\");\n    scanf(\"%d\",&amp;foot);\n\n    printf(\"PLease enter the inch:\");\n    scanf(\"%d\",&amp;inch);\n\n    printf(\"The height is:%d\\n\",(foot+inch/12)*0.3048);\n\n    return 0;\n}\n//\u6709\u95ee\u9898\u56e0\u4e3a\u7c7b\u578b\u662fint\n\n//\u6539\u6b63\u5982\u4e0b\nint main()\n{\n    double foot;\n    double inch;\n    printf(\"Please enter the foot:\");\n    scanf(\"%lf\",&amp;foot);\n\n    printf(\"PLease enter the inch:\");\n    scanf(\"%lf\",&amp;inch);\n\n    printf(\"The height is:%f\\n\",(foot+inch/12)*0.3048);\n\n    return 0;\n}\n//\u8f93\u5165\u8981\u6539\u6210scanf(\"%lf\",\u2026\u2026)\n//\u6253\u5370\u8981\u6539\u6210printf(\"%f\")\n</code></pre> \u518d\u4e3e\u4e00\u4f8b <pre><code>int main() {\n\n    printf(\"%d\\n\",10/3*3);\n    return 0;\n\n}\n//\u6539\u6b63\u5982\u4e0b\nint main() {\n\n    printf(\"%f\\n\",10/3*3);\n    return 0;\n\n}\n</code></pre></p>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_8","title":"\u5bf9\u6bd4","text":"\u6574\u6570 \u6d6e\u70b9\u6570 int double/float printf(\"%d\",...) printf(\"%f\",...) scanf(\"%d\",...) scan(\"&amp;lf\",...)"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#221","title":"2.2.1","text":""},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_9","title":"\u8868\u8fbe\u5f0f","text":"<p>\u8fd0\u7b97\u7b26\u3001\u7b97\u5b50</p> <p>e.g.\u8ba1\u7b97\u65f6\u95f4\u5dee</p> <pre><code>//\u7b97\u6210\u5206\u949f\nint main()\n{\n    int hour1;\n    int minute1;\n    int hour2;\n    int minute2;\n\n\n    printf(\"Please enter the first hour and minute:\");\n    scanf(\"%d %d\",&amp;hour1,&amp;minute1);\n\n    printf(\"Please enter the second hour and minute:\");\n    scanf(\"%d %d\",&amp;hour2,&amp;minute2);\n\n    printf(\"%d\",(hour2-hour1)*60+(minute2-minute1));\n\n    return 0;\n}\n//\u7b97\u6210\u5c0f\u65f6\nint main()\n{\n    int hour1;\n    int minute1;\n    int hour2;\n    int minute2;\n\n\n    printf(\"Please enter the first hour and minute:\");\n    scanf(\"%d %d\",&amp;hour1,&amp;minute1);\n\n    printf(\"Please enter the second hour and minute:\");\n    scanf(\"%d %d\",&amp;hour2,&amp;minute2);\n\n    printf(\"%f\",(hour2-hour1)+(minute2-minute1)/60);\n\n    return 0;\n}\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#222","title":"2.2.2","text":""},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_10","title":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7","text":"<p>e.g. \u6c42\u5e73\u5747\u503c</p> <pre><code>int main()\n{\n    int a;\n    int b;\n    printf(\"Enter two integers:\");\n    scanf (\"%d %d\",&amp;a,&amp;b);\n    double c = (a+b)/2.0;\n    printf (\"%f\\n\",c);\n    return 0;\n}\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_11","title":"\u4f18\u5148\u7ea7\u8868\u683c","text":"<p>\u76ee\uff1a\u53c2\u4e0e\u4e00\u6b21\u8fd0\u7b97\u7684\u7b97\u5b50\u6570</p> <p>Info</p> <p>\u5355\u76ee\u548c\u8d4b\u503c\u662f\u81ea\u53f3\u5411\u5de6</p> \u4f18\u5148\u7ea7 \u8fd0\u7b97\u7b26 \u8fd0\u7b97 \u7ed3\u5408\u5173\u7cfb \u4e3e\u4f8b 1 + \u5355\u76ee\u4e0d\u53d8 \u81ea\u53f3\u5411\u5de6 a*+b 1 - \u5355\u76ee\u53d6\u8d1f \u81ea\u53f3\u5411\u5de6 a*-b 2 * \u4e58 \u81ea\u5de6\u5411\u53f3 a*b 2 / \u9664 \u81ea\u5de6\u5411\u53f3 a/b 2 % \u53d6\u4f59 \u81ea\u5de6\u5411\u53f3 a%b 3 + \u52a0 \u81ea\u5de6\u5411\u53f3 a+b 3 - \u51cf \u81ea\u5de6\u5411\u53f3 a-b 4 = \u8d4b\u503c \u81ea\u53f3\u5411\u5de6 a=b <p>Note</p> <p>\u8d4b\u503c\u4e5f\u662f\u8fd0\u7b97\uff0c\u4e5f\u6709\u7ed3\u679c</p> <p>a=b=6 &gt; a=(b=6)</p> <p>Warning</p> <p>\u201c\u5d4c\u5165\u5f0f\u8d4b\u503c\u201d\u4e0d\u8981\u7528</p> <pre><code>int a;\nint b;\nint c =1 + (b=a)\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#223","title":"2.2.3","text":""},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_12","title":"\u4ea4\u6362\u53d8\u91cf","text":"<pre><code>int main() {\n    int a=5;\n    int b=6;\n    int c=0;\n    c=b;\n    b=a;\n    a=c;\n    printf(\"%d %d\\n\",a,b);\n\n    return 0;\n\n}\n//\u7528\u65ad\u70b9\u8c03\u8bd5\u53ef\u4ee5\u770b\u8fc7\u7a0b\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#224","title":"2.2.4","text":""},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_13","title":"\u590d\u5408\u8d4b\u503c","text":"<pre><code>+=\uff0c-=,*=,/=,%=\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#-","title":"\u9012\u589e/\u9012\u51cf\u8fd0\u7b97\u7b26\uff08++\uff0c--\uff09","text":"<pre><code>  count++\n\u2192count=count+1\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#_14","title":"\u524d\u7f00/\u540e\u7f00","text":"\u8868\u8fbe\u5f0f \u8fd0\u7b97 \u8868\u8fbe\u5f0f\u7684\u503c count++ \u7ed9count\u52a01 count\u539f\u6765\u7684\u503c ++count \u7ed9count\u52a01 count+1\u4ee5\u540e\u7684\u503c count-- \u7ed9count\u51cf1 count\u539f\u6765\u7684\u503c --count \u7ed9count\u51cf1 count-1\u4ee5\u540e\u7684\u503c <pre><code>int main() {\n    int a;\n    a=10;\n    printf(\"a++=%d\\n\",a++);\n    printf(\"a=%d\\n\",a);\n\n    ++a;\n    printf(\"++a=%d\\n\",a);\n    printf(\"a=%d\\n\",a);\n\n    return 0;\n}\n\n\u2192a++=10\n a=11\n ++a=12\n a=12\n</code></pre>"},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#225","title":"2.2.5","text":""},{"location":"C/2%20%E3%80%81%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/#leetcode","title":"Leetcode\u7f51\u7ad9\u4f7f\u7528","text":"<p>Tip</p> <ul> <li>\u770b\u6837\u4f8b\u6570\u636e\u548c\u770b\u9898\u76ee\u4e00\u6837\u91cd\u8981</li> <li>\u4e0d\u8981\u4ea4\u4e92\u7684\u8f93\u51fa</li> <li>\u4e0d\u8981\u68c0\u67e5\u8f93\u5165</li> <li>\u4e25\u683c\u9075\u5b88\u8f93\u51fa\u7684\u683c\u5f0f</li> </ul>"},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/","title":"3 \u3001if else\u5224\u65ad","text":"<ul> <li>3<ul> <li>3.1.2</li> <li>3.1.3</li> <li>3.2.1<ul> <li>\u5224\u65ad\u8bed\u53e5--if</li> <li>\u6761\u4ef6</li> <li>\u4f18\u5148\u7ea7</li> </ul> </li> <li>3.2.3<ul> <li>\u627e\u96f6\u8ba1\u7b97\u5668\uff08\u4f18\u5316\uff09</li> </ul> </li> <li>3.2.4<ul> <li>\u5426\u5219 else \uff08if\uff09</li> </ul> </li> <li>3.2.5</li> <li>3.3.1<ul> <li>\u5d4c\u5957\u7684if-else</li> </ul> </li> <li>3.3.2<ul> <li>\u7ea7\u8054\u7684if/else</li> </ul> </li> <li>3.3.4<ul> <li>\u591a\u8defif/else\u2192switch case</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#3","title":"3","text":""},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#312","title":"3.1.2","text":"<p>e.g. BCD\u6570\u662f\u7528\u4e00\u4e2a\u5b57\u8282\u6765\u8868\u8fbe\u4e24\u4f4d\u5341\u8fdb\u5236\u7684\u6570\uff0c\u6bcf\u56db\u4e2a\u6bd4\u7279\u8868\u793a\u4e00\u4f4d\u3002\u6240\u4ee5\u5982\u679c\u4e00\u4e2aBCD\u6570\u662f0x12,\u5b83\u8868\u8fbe\u7684\u5c31\u662f\u5341\u8fdb\u5236\u768412\u3002 \u4f46\u662f\u5c0f\u660e\u6ca1\u5b66\u8fc7BCD,\u628a\u6240\u6709\u7684BCD\u6570\u90fd\u5f53\u4f5c\u4e8c\u8fdb\u5236\u6570\u8f6c\u6362\u6210\u5341\u8fdb\u5236\u8f93\u51fa\u4e86\u3002\u4e8e\u662fBCD\u76840x12\u88ab\u8f93\u51fa\u6210\u4e86\u5341\u8fdb\u5236\u768418\u4e86\uff01 \u73b0\u5728\uff0c\u4f60\u7684\u7a0b\u5e8f\u8981\u8bfb\u5165\u8fd9\u4e2a\u9519\u8bef\u7684\u5341\u8fdb\u5236\u6570\uff0c\u7136\u540e\u8f93\u51fa\u6b63\u786e\u7684\u5341\u8fdb\u5236\u6570\u3002\u63d0\u793a\uff1a\u4f60\u53ef\u4ee5\u628a18\u8f6c\u6362\u56de0\u00d712\uff0c\u7136\u540e\u518d\u8f6c\u6362\u56de12\u3002</p> <p>\u8f93\u5165\u683c\u5f0f\uff1a</p> <p>\u200b   \u8f93\u5165\u5728\u4e00\u884c\u4e2d\u7ed9\u51fa\u4e00\u4e2a[0,153]\u8303\u56f4\u5185\u7684\u6574\u6570\uff0c\u4fdd\u8bc1\u80fd\u8f6c\u6362\u56de\u6709\u6548\u7684BCD\u6570\uff0c\u5c31\u662f\u8bf4\u8fd9\u4e2a\u6574\u6570\u8f6c\u6362\u6210\u5341\u516d\u8fdb\u5236\u65f6\u4e0d\u4f1a\u51fa\u73b0A-F\u7684\u6570\u5b57\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f\uff1a</p> <p>\u200b   \u8f93\u51fa\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u6570\u3002</p> <pre><code>DEC 18 \nBIN 0001 0010 \nHEX 0x12\nBCD 12\n</code></pre> <pre><code>//\u65b9\u6cd5\u4e00\uff1a\n18/16 \u21921\n18%16 \u21922\n1*10+2=12\n----------------\nint main() {\n    int a;\n    int b;\n    int c;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &amp;a);\n    b=a/16;\n    c=a%16;\n    printf(\"%d\\n\",b*10+c);\n    return 0;\n}\n</code></pre> <pre><code>//\u65b9\u6cd5\u4e8c\uff1a\nprintf(\"%x\",x)\n-----------------\nint main() {\n    int a ;\n    printf(\"Enter a number: \");\n    scanf(\"%d\",&amp;a);\n    printf(\"The number is %x\",a);\n\n    return 0;\n}\n</code></pre> <p>Note</p> <p>%d\uff1a\u5341\u8fdb\u5236\u8f93\u51fa %x\uff1a\u5341\u516d\u8fdb\u5236\u8f93\u51fa</p>"},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#313","title":"3.1.3","text":"<pre><code>//0 O\u6709\u6240\u4e0d\u540c\n</code></pre>"},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#321","title":"3.2.1","text":""},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#-if","title":"\u5224\u65ad\u8bed\u53e5--if","text":"<pre><code>int main() {\n    int hour1,minute1,hour2,minute2;\n    printf(\"Enter the first time: \");\n    scanf(\"%d:%d\",&amp;hour1,&amp;minute1);\n    printf(\"Enter the second time: \");\n    scanf(\"%d:%d\",&amp;hour2,&amp;minute2);\n\n    int ih = hour2-hour1;\n    int im =minute2-minute1;\n    //\u5224\u65ad\u5206\u949f\u5dee\u662f\u5426\u5728\u4e00\u5c0f\u65f6\u4ee5\u5185\n    if(im&lt;0) {\n        im=60+im;\n        ih --;\n\n    }\n    printf(\"%d,%d\",ih,im);\n\n    return 0;\n}\n------------------\n//\u6539\u8fdb\uff0c\u7528\u5224\u65ad\u62d2\u7edd\u5206\u949f\u5927\u4e8e60\u7684\u8f93\u5165\n    int main() {\n    int hour1,minute1,hour2,minute2;\n    printf(\"Enter the first time: \");\n    scanf(\"%d:%d\",&amp;hour1,&amp;minute1);\n    printf(\"Enter the second time: \");\n    scanf(\"%d:%d\",&amp;hour2,&amp;minute2);\n\n    int ih = hour2-hour1;\n    int im =minute2-minute1;\n\n    if (minute1,minute2&gt;60) {\n        printf(\"Time error!!!\");\n    }\n    else if (im&lt;0) {\n\n        im=60+im;\n        ih --;\n    }\n    printf(\"%d,%d\",ih,im);\n\n\n\n    return 0;\n}\n</code></pre>"},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#_1","title":"\u6761\u4ef6","text":"\u8fd0\u7b97\u7b26 \u610f\u4e49 == \u76f8\u7b49 != \u4e0d\u76f8\u7b49 &gt; \u5927\u4e8e &gt;= \u5927\u4e8e\u6216\u7b49\u4e8e &lt; \u5c0f\u4e8e &lt;= \u5c0f\u4e8e\u6216\u7b49\u4e8e <p>Abstract</p> <ul> <li>\u5173\u7cfb\u8fd0\u7b97\u7ed3\u679c\u53ea\u67091/0</li> <li>==/!=\u8fd0\u7b97\u4f18\u5148\u7ea7\u6bd4\u5176\u4ed6\u5173\u7cfb\u8fd0\u7b97\u7b26\u66f4\u4f4e</li> </ul>"},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#_2","title":"\u4f18\u5148\u7ea7","text":"<p>\u8d4b\u503c\u8fd0\u7b97&lt;\u5173\u7cfb\u8fd0\u7b97&lt;\u7b97\u672f\u8fd0\u7b97</p> <pre><code>//\u9a8c\u8bc1\u7a0b\u5e8f\nprintf(\"%d\\n\",7&gt;=3+4)\n    \u2192[output]=1\n</code></pre>"},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#323","title":"3.2.3","text":""},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#_3","title":"\u627e\u96f6\u8ba1\u7b97\u5668\uff08\u4f18\u5316\uff09","text":"<pre><code>int main() {\n    double price;\n    double bill;\n    printf(\"Please enter your price:\");\n    scanf(\"%lf\", &amp;price);\n    printf(\"Please enter your bill:\");\n    scanf(\"%lf\", &amp;bill);\n    //\u5224\u65ad\u4ef7\u683c\u548c\u7968\u9762\n    if (price &lt; bill) {\n        printf(\"Your price is less than your bill\");\n    }\n    else if (bill&lt;price) {\n        printf(\"Your bill change: %f\", price-bill);\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#324","title":"3.2.4","text":""},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#else-if","title":"\u5426\u5219 else \uff08if\uff09","text":""},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#325","title":"3.2.5","text":"<p>if\u8bed\u53e5\u903b\u8f91\uff1a\u2460if\u540e\u6709\u4e00\u4e2a\u62ec\u53f7\uff0c\u82e5\u62ec\u53f7\u5185\u6210\u7acb\u2192\u6267\u884c\u5927\u62ec\u53f7\u5185\u8bed\u53e5</p> <p>\u200b           \u2461if\u540e\u6709\u4e00\u4e2a\u62ec\u53f7\uff0c\u62ec\u53f7\u5185\u6210\u7acb\u2192\u65e0\u5927\u62ec\u53f7\u2192\u53ea\u6267\u884cif\u540e\u9762\u4e00\u53e5</p> <pre><code>//\u5b9e\u4f8b\nint main() {\n    const int PASS=60;\n    int score;\n    printf(\"Please enter your score:\\n\");\n    scanf(\"%d\",%score);\n\n    if (score&lt;PASS)\n        printf(\"You failed\\n\");\n    else\n        printf(\"You passed\\n\");\n\n    return 0;\n}\n</code></pre> <p>Note</p> <p>if\u540e\u65e0\u5927\u62ec\u53f7\u7684\u8bdd\uff0c\u672c\u53e5\u7ed3\u5c3e\u6ca1\u6709\uff1b</p>"},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#331","title":"3.3.1","text":""},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#if-else","title":"\u5d4c\u5957\u7684if-else","text":"<p>e.g. \u5224\u65ad\u4e09\u4e2a\u6570\u4e2d\u6700\u5927\u7684</p> <pre><code>int main() {\n    int a,b,c;\n    printf(\"Enter three numbers:\");\n    scanf(\"%d %d %d\",&amp;a,&amp;b,&amp;c);\n    if (a&gt;b) {\n        if (a&gt;c) {\n            printf(\"%d is max\",a);\n        }\n        else {\n            printf(\"%d is max\",c);\n        }\n    }\n\n    if (a&lt;b) {\n        if (b&gt;c) {\n            printf(\"%d is max\",b);\n        }\n        else {\n            printf(\"%d is max\",c);\n        }\n    }\n\n    return 0;\n}\n</code></pre> <p>Warning</p> <p>else\uff08\u65e0\u5927\u62ec\u53f7\u7684\u60c5\u51b5\u4e0b\uff09\u603b\u4e0e\u6700\u8fd1\u7684if\u914d\u5bf9</p> <p>C\u8bed\u8a00\u4e2d\u7f29\u8fdb\u4e0d\u8868\u793a\u540c\u4e00\u5c42\u7ea7\uff0c\u4f46\u662f\u6700\u597d\u7f16\u5199\u65f6\u6ce8\u610f\u2192\u4fbf\u4e8e\u9605\u8bfb</p> <p>\u2234\u6700\u597dif/else\u603b\u662f\u7528  { }</p>"},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#332","title":"3.3.2","text":""},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#ifelse","title":"\u7ea7\u8054\u7684if/else","text":"<pre><code>if(){\n\n}\nelse if(){\n\n}\nelse(){\n\n}\n</code></pre> <p>\u5355\u4e00\u51fa\u53e3\u7075\u6d3b\u6027</p>"},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#334","title":"3.3.4","text":""},{"location":"C/3%20%E3%80%81if-else%E5%88%A4%E6%96%AD/#ifelseswitch-case","title":"\u591a\u8defif/else\u2192switch case","text":"<pre><code>//\u683c\u5f0f\nswitch case(\u63a7\u5236\u8868\u8fbe\u5f0f){\n    case constant:\n    \u2026\u2026\n    case constant:\n    \u2026\u2026\n    default:\n    \u2026\u2026\n\n}\n//\u63a7\u5236\u8868\u8fbe\u5f0f\u7684\u8f93\u5165\u53ea\u80fd\u662f\u201c\u6574\u6570\u201d\n//const \u5fc5\u987b\u662f\u6574\u6570\uff0c\u6216\u8005\u6574\u6570\u8ba1\u7b97\u8868\u8fbe\u5f0f\n//switch-case\u5fc5\u987b\u8981\u6709\u201cbreak\u201d\uff0cif\u4e0d\u9700\u8981\n</code></pre> <pre><code>//\u7ea7\u8054\u7684\nint main() {\n\n    int type;\n    printf(\"type a number:\");\n    scanf(\"%d\",&amp;type);\n    if (type==1)\n        printf(\"Good morning!\");\n    else if (type==2)\n        printf(\"Good afternoon!\");\n    else if (type==3)\n        printf(\"Good evening!\");\n    else if (type==4)\n        printf(\"Good night!\");\n\n    return 0;\n}\n//\u591a\u8def\u7684\nint main() {\n     int type;\n\n     printf(\"Enter a number:\");\n     scanf(\"%d\", &amp;type);\n  switch (type) {\n      case 1:\n          printf(\"Good morning!\");\n      break;\n      case 2:\n          printf(\"Good afternoon!\");\n      break;\n      case 3:\n          printf(\"Good evening!\");\n      break;\n      case 4:\n          printf(\"Good night!\");\n      break;\n      default:\n          printf(\"Wrong number!\");\n      break;\n  }\n     return 0;\n }\n</code></pre> <p>e.g.\u6210\u7ee9\u4e92\u8f6c</p> <pre><code>int main() {\n    int score;\n    int grade;\n    printf(\"Enter your score: \");\n    scanf(\"%d\", &amp;score);\n    grade=score/10;\n    switch(grade) {\n        case 10:\n        case 9:\n            printf(\"A\\n\");\n        break;\n        case 8:\n            printf(\"B\\n\");\n        break;\n        case 7:\n            printf(\"C\\n\");\n        break;\n        case 6:\n            printf(\"D\\n\");\n        break;\n        default:\n            printf(\"F\\n\");\n        break;\n    }\n      return 0;\n}\n</code></pre>"},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/","title":"4 \u3001while\u5faa\u73af","text":"<ul> <li>4<ul> <li>4.1.1<ul> <li>\u5faa\u73af</li> <li>\u9a8c\u8bc1</li> </ul> </li> <li>4.1.2</li> <li>4.1.3<ul> <li>do-while\u5faa\u73af</li> </ul> </li> <li>4.2.2<ul> <li>\u731c\u6570\u6e38\u620f<ul> <li>\u751f\u6210\u968f\u673a\u6570 rand()</li> </ul> </li> </ul> </li> <li>4.2.3<ul> <li>\u7b97\u5e73\u5747\u6570</li> </ul> </li> <li>4.2.4<ul> <li>\u6574\u6570\u7684\u5206\u89e3\uff08\u9006\u5e8f\uff09</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#4","title":"4","text":""},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#411","title":"4.1.1","text":""},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#_1","title":"\u5faa\u73af","text":"<p>e.g. \u6570\u4f4d\u5224\u65ad</p> <pre><code>int main() {\n   int a;\n   int digits=0;\n\n   printf(\"Enter a number:\");\n   scanf(\"%d\",&amp;a);\n//\u4ee5\u4e0b\u4e24\u53e5\u5199\u5728\u5faa\u73af\u5916\u662f\u4e3a\u4e86\u5904\u7406\u201c0\u201d\u7684\u60c5\u51b5\uff0c\u5426\u5219\u5c06\u4f1a\u8f93\u51fa0\u4f4d\u6570\n    digits++;\n    a=a/10;\n\n   while (a&gt;0) {\n     digits++;\n       a=a/10;\n }\n printf(\"%d\",digits);\n\n    return 0;\n}\n//\u7535\u8111\u4e2d\u6709\u6570\u4f4d\u9650\u5236\uff0c\u592a\u5927\u7684\u6570\u5b57\u4e0d\u884c\n</code></pre>"},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#_2","title":"\u9a8c\u8bc1","text":"<p>\u6d4b\u8bd5\u7a0b\u5e8f\u5e38\u4f7f\u7528 \u8fb9\u754c\u6570\u636e ,\u5982\u6709\u6548\u8303\u56f4\u4e24\u7aef\u7684\u6570\u636e\u3001\u7279\u6b8a\u7684\u500d\u6570\u7b49 \u4e2a\u4f4d\u6570\uff1b \u8d1f\u6570\uff1b 10; 0\uff1b \u2026\u2026</p>"},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#412","title":"4.1.2","text":"<p>\u5faa\u73af\u4f53\u5185\u8981\u6709\u6539\u53d8\u6761\u4ef6\u7684\u673a\u4f1a\u2192\u4e0d\u7136\u4f1a\u53d8\u6210\u6b7b\u5faa\u73af</p> <p>while\u5faa\u73af\u5148\u5224\u65ad\u6761\u4ef6</p> <p>Tip</p> <p>\u2460\u53ef\u4ee5\u4f7f\u7528  \u8c03\u8bd5  \u6765\u68c0\u67e5\u4ee3\u7801</p> <p>\u2461\u53ef\u4ee5\u5728\u9002\u5f53\u7684\u5730\u65b9\u4f7f\u7528 printf</p>"},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#413","title":"4.1.3","text":""},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#do-while","title":"do-while\u5faa\u73af","text":"do-while\u5faa\u73af while\u5faa\u73af \u5148\u8fdb\u5165\u5faa\u73af\u518d\u5224\u65ad\u6761\u4ef6 \u5148\u5224\u65ad\u6761\u4ef6\u518d\u8fdb\u5165\u5faa\u73af <pre><code>int main(){\n    int a;\n    int digits=0;\n    printf(\"Enter a number:\");\n    scanf(\"%d\\n\",a);\n\n    do{\n        x=x/10;\n        digits++;\n    }while(a&gt;0);\n\n    return 0;\n}\n</code></pre>"},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#422","title":"4.2.2","text":""},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#_3","title":"\u731c\u6570\u6e38\u620f","text":""},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#rand","title":"\u751f\u6210\u968f\u673a\u6570 rand()","text":"<pre><code>int main(){\n    srand(time(0));\n    int a =rand();\n    printf(\"%d\\n\",a)\n    return 0;\n}\n---------------------&gt;\nint main(){\n    srand(time(0));\n    int a =rand();\n    //\u4fdd\u8bc1a\u5728100\u4ee5\u5185\n    a=a%100\n    printf(\"%d\\n\",a)\n    return 0;\n}\n</code></pre>"},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#423","title":"4.2.3","text":""},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#_4","title":"\u7b97\u5e73\u5747\u6570","text":"<pre><code>int main() {\n    int x;\n    int sum=0;\n    int count=0;\n    int number[100];\n\n    scanf(\"%d\",&amp;x);\n    while(x!=-1) {\n        number[count]=x;\n        sum=sum+x;\n        count++;\n        scanf(\"%d\",&amp;x);\n    }\n\n    if(count&gt;0){\n\n        printf(\"The average of all numbers is %f\\n\", 1.0*sum/count);\n        int i;\n        printf(\"%d\\t\",number[i]);\n        for(i=0;i&lt;count;i++){\n\n            if (number[i]&gt;sum/count){\n                printf(\"%d\\n\",number[i]);\n            }\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#424","title":"4.2.4","text":""},{"location":"C/4%20%E3%80%81while%E5%BE%AA%E7%8E%AF/#_5","title":"\u6574\u6570\u7684\u5206\u89e3\uff08\u9006\u5e8f\uff09","text":"<p>\u4e00\u4e2a\u6574\u6570\u662f\u75311\u81f3\u591a\u4f4d\u6570\u5b57\u7ec4\u6210\u7684,\u5982\u4f55\u5206\u89e3\u51fa\u6574\u6570\u7684\u5404\u4e2a\u4f4d\u4e0a\u7684\u6570\u5b57\uff0c\u7136\u540e\u52a0\u4ee5\u8ba1\u7b97 \u5bf9\u4e00\u4e2a\u6574\u6570\u505a%10\u7684\u64cd\u4f5c,\u5c31\u5f97\u5230\u5b83\u7684\u4e2a\u4f4d\u6570; \u5bf9\u4e00\u4e2a\u6574\u6570\u505a/10\u7684\u64cd\u4f5c\uff0c\u5c31\u53bb\u6389\u4e86\u5b83\u7684\u4e2a\u4f4d\u6570\uff1b \u7136\u540e\u518d\u5bf92\u7684\u7ed3\u679c\u505a%10\uff0c\u5c31\u5f97\u5230\u539f\u6765\u6570\u7684\u5341\u4f4d\u6570\u4e86 \u4f9d\u6b64\u7c7b\u63a8</p> <pre><code>int main(){\n    int  x;\n    int  reverse=0;\n    int  digits=0;\n    printf(\"Enter a number:\");\n    scanf(\"%d\",&amp;x);\n\n    while(x&gt;0) {\n        digits=x%10;\n        x=x/10;\n        reverse=reverse*10+digits;\n        printf(\"%d,%d,%d\\n\",digits,x,reverse);//\u6d4b\u8bd5\u8bed\u53e5\n    }\nprintf(\"The reverse is: %d\",reverse);//\u9006\u5e8f\u8f93\u51fa\nreturn 0;\n}\n</code></pre>"},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/","title":"5 \u3001for\u5faa\u73af","text":"<ul> <li>5<ul> <li>5.1.1<ul> <li>for\u5faa\u73af</li> </ul> </li> <li>5.1.2<ul> <li>\u5faa\u73af\u7684\u9009\u62e9</li> </ul> </li> <li>5.2.1<ul> <li>\u5faa\u73af\u63a7\u5236<ul> <li>break v.s. continue</li> </ul> </li> </ul> </li> <li>5.2.2<ul> <li>\u5faa\u73af\u5d4c\u5957</li> </ul> </li> <li>5.2.3<ul> <li>\u8df3\u51fa\u5faa\u73af \uff08goto\uff09</li> </ul> </li> <li>5.3.1<ul> <li>\u6c42\u524dn\u9879\u548c</li> </ul> </li> <li>5.3.2<ul> <li>\u6574\u6570\u5206\u89e3\uff08\u6b63\u5e8f\uff09</li> </ul> </li> <li>5.3.3<ul> <li>\u6700\u5927\u516c\u7ea6\u6570</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#5","title":"5","text":""},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#511","title":"5.1.1","text":""},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#for","title":"for\u5faa\u73af","text":"<pre><code>//\u7528while\u8bed\u53e5\nint main() {\n    int n;\n    int count=0;\n    int factorial=1;\n    printf(\"Enter the number of factorial: \");\n    scanf(\"%d\", &amp;n);\n    while(count&lt;n) {\n        count ++;\n        factorial=factorial*count;\n    }\n\n    printf(\"The factorial is %d\",factorial);\n    return 0;\n}\n//\u7528for\u8bed\u53e5\nint main() {\n\n int n;\n int fact=1;\n int i=1;\n printf(\"Enter the number of factorial: \");\n scanf(\"%d\", &amp;n);\n//\u2460\u4ece1\u5f00\u59cb\u4e58\nfor(i=1;i&lt;=n;i++) {\n fact=fact*i;\n}\n//\u2461\u4ecen\u5f00\u59cb\u4e58\nfor(i=n;i&gt;=2;i--){\n    fact=fact*i\n}\n\n printf(\"The factorial of %d is %d\",n,fact);\n\n return 0;\n}\n</code></pre> <pre><code>for (i=1\u2460 ; i&lt;=n \u2461; i++\u2462 )\n/*\n\u2460\u521d\u59cb\u6761\u4ef6\n\u2461\u5faa\u73af\u7ee7\u7eed\u7684\u6761\u4ef6\n\u2462\u5faa\u73af\u6bcf\u8f6e\u8981\u505a\u7684\u4e8b\u60c5\n */\n</code></pre>"},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#512","title":"5.1.2","text":""},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#_1","title":"\u5faa\u73af\u7684\u9009\u62e9","text":"<p>for==while</p> <p>Warning</p> <p>for\u5faa\u73af\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u8fbe\u5f0f\u90fd\u53ef\u4ee5\u7701\u7565\uff0c\u4f46\u662f\u5206\u53f7\u4e0d\u80fd\u7701\u7565</p> <p>for(\uff1b\u6761\u4ef6\uff1b)==while\uff08\u6761\u4ef6\uff09</p> <ul> <li>for\u5faa\u73af</li> <li>while\u5faa\u73af</li> <li>do-while\u5faa\u73af</li> </ul> <p>Tip</p> <p>\u6709\u56fa\u5b9a\u6b21\u6570\uff0c\u7528for</p> <p>\u5fc5\u987b\u6267\u884c\u4e00\u6b21\uff0c\u7528do-while</p> <p>\u5176\u4ed6\u60c5\u51b5\uff0c\u7528while</p>"},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#521","title":"5.2.1","text":""},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#_2","title":"\u5faa\u73af\u63a7\u5236","text":"<pre><code>int main(){\n\n int x;\n int i;\n int isPrime=1;\n scanf(\"%d\",&amp;x);\n\n for(i=2;i&lt;x;i++) {\n    if(x%i==0) {\n     isPrime=0;\n     break;//\u8df3\u51fa\u6574\u4e2a\u5faa\u73af\n    }\n }\n\nif(isPrime==1) {\n printf(\"yes\");\n}else {\n printf(\"no\");\n}\n\nreturn 0;\n}\n</code></pre>"},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#break-vs-continue","title":"break v.s. continue","text":"<ul> <li> <p>break\uff1a\u8df3\u51fa\u6574\u4e2a\u5faa\u73af</p> </li> <li> <p>continue\uff1a\u8df3\u51fa\u672c\u8f6e\u5faa\u73af\uff0c\u53bb\u4e0b\u4e00\u8f6e\u5faa\u73af</p> </li> </ul> <p>break/continue\u53ea\u80fd\u8df3\u51fa\u672c\u5c42\u5faa\u73af</p>"},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#522","title":"5.2.2","text":""},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#_3","title":"\u5faa\u73af\u5d4c\u5957","text":"<p>e.g.\u8f93\u51fa100\u4ee5\u5185\u7684\u7d20\u6570</p> <pre><code>int main(){\n\n int x;\n int i;\n\n\n\n for (x=2;x&lt;100;x++) {\n  int isPrime=1;\n       for(i=2;i&lt;x;i++) {\n          if(x%i==0) {\n           isPrime=0;\n           break;\n          }\n       }\n\n       if(isPrime==1) {\n        printf(\"%d\\n\",x);\n       }\n\n }\nreturn 0;\n}\n</code></pre>"},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#523","title":"5.2.3","text":""},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#goto","title":"\u8df3\u51fa\u5faa\u73af \uff08goto\uff09","text":"<p>e.g.\u51d1\u786c\u5e01\uff1a1\u89d2\u30012\u89d2\u30015\u89d2\u51d1\u51fa10\u5143\u4ee5\u4e0b\u91d1\u989d</p>"},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#531","title":"5.3.1","text":""},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#n","title":"\u6c42\u524dn\u9879\u548c","text":"\\[ f(n)=1+  \\frac {1}{2}  +   \\frac {1}{3}  + \\frac {1}{4}  +  \\cdots  ++  \\frac {1}{n}   \\]"},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#532","title":"5.3.2","text":""},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#_4","title":"\u6574\u6570\u5206\u89e3\uff08\u6b63\u5e8f\uff09","text":"<pre><code>/*13425/10000-&gt;1\n13425%10000-&gt;3425\n10000/10-&gt;1000\n\n3425/1000-&gt;3\n3425%1000-&gt;425\n1000/10-&gt;100\n\n^^^^\n*/\n</code></pre> <pre><code>int main() {\n    int x=13425;\n     int div=10000;\n     int n;\n     while(x&gt;0) {\n\n          n=x/div;\n          x=x%div;\n          div=div/10;\n\n          printf(\"%d \",n);\n         }\n\n return 0;\n}\n\n//////////////////////////////\n//\u6539\u8fdb\uff1a\u53ef\u8f93\u5165\u6570\u5b57\u81ea\u52a8\u5224\u65ad\u4f4d\u6570//\n/////////////////////////////\nint main() {\n\n int x;\n int count=0;\n printf(\"Enter a number: \");\n scanf(\"%d\", &amp;x);\n//\u7edf\u8ba1\u4f4d\u6570\n int num=x;\n while(x&gt;0) {\n  x=x/10;\n  count+=1;\n }\n//\u5206\u79bb\u6570\u4f4d\n int div=pow(10,count-1);\n int n=0;\n while(num&gt;0) {\n\n      n=num/div;\n      num=num%div;\n      div=div/10;\n\n  printf(\"%d \",n);\n }\n\n\n return 0;\n}\n</code></pre>"},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#533","title":"5.3.3","text":""},{"location":"C/5%20%E3%80%81for%E5%BE%AA%E7%8E%AF/#_5","title":"\u6700\u5927\u516c\u7ea6\u6570","text":"<p>\uff081\uff09\u679a\u4e3e\u6cd5</p> <pre><code>int main() {\n    int a,b;\n    int min;\n    printf(\"Enter two numbers:\");\n    scanf(\"%d%d\",&amp;a,&amp;b);\n\n    if(a&gt;b) {\n        min=b;\n    }else {min=a;}\n\n\n    int i=1;\n    int ret=0;\n    for(i=1;i&lt;min;i++) {\n        if(a%i==0) {\n            if(b%i==0) {\n                ret=i;\n            }\n        }\n        if(b%i==0) {\n        }\n\n    }\n\n    printf(\"GCS is %d\",ret);\n\n    return 0;\n}\n</code></pre> <p>\uff082\uff09\u8f97\u8f6c\u76f8\u9664\u6cd5</p> <pre><code>/*\u5982\u679cb\u7b49\u4e8e0\uff0c\u8ba1\u7b97\u7ed3\u675f\uff0ca\u5c31\u662f\u6700\u5927\u516c\u7ea6\u6570\uff1b\n\u5426\u5219\uff0c\u8ba1\u7b97a\u9664\u4ee5b\u7684\u4f59\u6570\uff0c\u8ba9a\u7b49\u4e8eb,\u800cb\u7b49\u4e8e\u90a3\u4e2a\u4f59\u6570\n\u56de\u5230\u7b2c\u4e00\u6b65*/\n</code></pre> a b t 12 18 12 18 12 6 12 6 0 6 0 <pre><code>int main() {\n\n    int a,b;\n    printf(\"Enter two numbers:\\n\");\n    scanf(\"%d %d\",&amp;a,&amp;b);\n\n    if(b==0) {\n        printf(\"%d\",a);\n    }\n    else {\n        while(b!=0) {\n\n            int t = a % b;\n            a=b;\n            b=t;\n        }\n        printf(\"%d\",a);\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/","title":"6 \u3001\u6570\u636e\u7c7b\u578b\u548c\u8fd0\u7b97","text":"<ul> <li>6<ul> <li>6.1.1-6.1.7<ul> <li>\u7f16\u7a0b\u7ec3\u4e60\u89e3\u6790\uff08\u6682\u65f6\u8df3\u8fc7\u2757\u2757\u2757\u2757\uff09</li> </ul> </li> <li>6.2.1<ul> <li>\u6570\u636e\u7c7b\u578b</li> <li>\u5de5\u5177 \uff08sizeof\uff09</li> </ul> </li> <li>6.2.2<ul> <li>\u6574\u6570\u7c7b\u578b</li> </ul> </li> <li>6.2.3<ul> <li>\u6574\u6570\u7684\u5185\u90e8\u8868\u8fbe<ul> <li>*\u4e8c\u8fdb\u5236\u8d1f\u6570</li> </ul> </li> </ul> </li> <li>6.2.4<ul> <li>\u6574\u6570\u7684\u8303\u56f4</li> </ul> </li> <li>6.2.5<ul> <li>\u6574\u6570\u7684\u8f93\u5165\u8f93\u51fa</li> </ul> </li> <li>6.2.6<ul> <li>\u9009\u62e9\u6574\u6570\u7c7b\u578b</li> </ul> </li> <li>6.2.7<ul> <li>\u6d6e\u70b9\u7c7b\u578b</li> </ul> </li> <li>6.2.8<ul> <li>\u6d6e\u70b9\u7684\u7cbe\u5ea6\u548c\u8303\u56f4</li> </ul> </li> <li>6.2.9<ul> <li>\u5b57\u7b26\u7c7b\u578b</li> <li>\u5b57\u7b26\u8ba1\u7b97</li> </ul> </li> <li>6.2.10<ul> <li>\u9003\u9038\u5b57\u7b26</li> <li>\u5236\u8868\u4f4d</li> </ul> </li> <li>6.2.11<ul> <li>\u7c7b\u578b\u8f6c\u6362<ul> <li>\u81ea\u52a8</li> <li>\u5f3a\u5236</li> </ul> </li> </ul> </li> <li>6.3.1<ul> <li>\u903b\u8f91\u7c7b\u578b</li> </ul> </li> <li>6.3.2<ul> <li>\u903b\u8f91\u8fd0\u7b97</li> <li>\u4f18\u5148\u7ea7</li> <li>\u77ed\u8def</li> </ul> </li> <li>6.3.3<ul> <li>\u6761\u4ef6\u8fd0\u7b97/\u9017\u53f7\u8fd0\u7b97<ul> <li>\u6761\u4ef6\u8fd0\u7b97\u7b26<ul> <li>\u5d4c\u5957\u6761\u4ef6\u8868\u8fbe\u5f0f</li> </ul> </li> <li>\u9017\u53f7\u8fd0\u7b97</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#6","title":"6","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#611-617","title":"6.1.1-6.1.7","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_1","title":"\u7f16\u7a0b\u7ec3\u4e60\u89e3\u6790\uff08\u6682\u65f6\u8df3\u8fc7\u2757\u2757\u2757\u2757\uff09","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#621","title":"6.2.1","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_2","title":"\u6570\u636e\u7c7b\u578b","text":"<ul> <li>C\u8bed\u8a00\u53d8\u91cf\u5fc5\u987b</li> <li>\u63d0\u524d\u5b9a\u4e49</li> <li> <p>\u786e\u5b9a\u7c7b\u578b</p> </li> <li> <p>C++/Java\uff1a\u66f4\u52a0\u5f3a\u8c03\u7c7b\u578b</p> </li> <li>JS/Python/PHP\uff1a\u4e0d\u770b\u91cd\u7c7b\u578b\uff0c\u751a\u81f3\u4e0d\u7528\u4e8b\u5148\u5b9a\u4e49</li> </ul> \u6574\u6570 char\u3001short\u3001int\u3001long\u3001long long \u6d6e\u70b9\u6570 float\u3001double\u3001long double \u903b\u8f91 bool \u6307\u9488 \u81ea\u5b9a\u4e49 <p>Note</p> <p>\u7c7b\u578b\u540d\u79f0\uff1a<code>int\u3001long\u3001double</code> \u8f93\u5165\u8f93\u51fa\u65f6\u7684\u683c\u5f0f\u5316\uff1a<code>%d\u3001%ld\u3001%lf</code> \u6240\u8868\u8fbe\u7684\u6570\u7684\u8303\u56f4\uff1a<code>char &lt; short&lt; int &lt; float &lt;double</code> \u5185\u5b58\u4e2d\u6240\u5360\u636e\u7684\u5927\u5c0f\uff1a1\u4e2a\u5b57\u8282\u523016\u4e2a\u5b57\u8282 \u5185\u5b58\u4e2d\u7684\u8868\u8fbe\u5f62\u5f0f\uff1a\u4e8c\u8fdb\u5236\u6570\uff08\u8865\u7801\uff09\u3001\u7f16\u7801</p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#sizeof","title":"\u5de5\u5177 \uff08sizeof\uff09","text":"<ul> <li>\u9759\u6001\u8fd0\u7b97\u7b26</li> </ul> <pre><code>int main() {\n\n int a;\n a=6;\n printf(\"%ld\",sizeof(a++));\n printf(\"%d\",a);//\u8f93\u51fa\u4ecd\u7136\u662f6\uff0c\u524d\u4e00\u53e5\u4e2d\u7684a++\u53ea\u5728\u90a3\u4e00\u53e5\u751f\u6548-&gt;\u9759\u6001\u8fd0\u7b97\n\n return 0;\n}\n</code></pre>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#622","title":"6.2.2","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_3","title":"\u6574\u6570\u7c7b\u578b","text":"\u7c7b\u578b \u5927\u5c0f char 1\u5b57\u8282\uff088\u6bd4\u7279\uff09 short short: 2\u5b57\u8282 int \u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668(CPU) ,\u901a\u5e38\u7684\u610f\u4e49\u662f\u201c1\u4e2a\u5b57\u201d long \u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668(CPU) ,\u901a\u5e38\u7684\u610f\u4e49\u662f\u201c1\u4e2a\u5b57\u201d long long 8\u5b57\u8282 <p>Note</p> <p>int\u5c31\u662f\u7528\u6765\u8868\u793a\u5bc4\u5b58\u5668\uff08reg\uff09\u7684</p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#623","title":"6.2.3","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_4","title":"\u6574\u6570\u7684\u5185\u90e8\u8868\u8fbe","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_5","title":"*\u4e8c\u8fdb\u5236\u8d1f\u6570","text":"<p>\u4e00\u4e2a\u5b57\u8282\u53ef\u4ee5\u8868\u8fbe\u7684\u6570\uff1a0000 0000-1111 1111\uff080-255\uff09</p> <p>\u200b   \u4e09\u79cd\u65b9\u6848</p> <p>\u200b       1\u3001\u4eff\u7167\u5341\u8fdb\u5236\uff0c\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u6807\u5fd7\u8868\u793a\u8d1f\u6570 \u200b           \u95ee\u9898\uff1a\u9700\u89811 0000 0001+ 0000 0001=0000 0000 \u200b       2\u3001\u53d6\u4e2d\u95f4\u7684\u6570\u4e3a0\uff0c\u59821000000\u8868\u793a0\uff0c\u6bd4\u5b83\u5c0f\u7684\u662f\u8d1f\u6570\uff0c\u6bd4\u5b83\u5927\u7684\u662f\u6b63\u6570 \u200b           \u95ee\u9898\uff1a\u8f93\u5165\u8f93\u51fa\u8f83\u4e3a\u590d\u6742 \u200b       3\u3001 \u8865\u7801 \u221a</p> <p>1111 1111+0000 0001\u2192 1 0000 0000\uff08\u591a\u4e00\u4f4d\uff09</p> <p>\u2235 1 0000 0000-0000 0001\u21921111 1111</p> <p>\u200b        \uff080\uff09      -      \uff081\uff09  \u2192     \uff08-1\uff09</p> <p>\u8be5\u6570\u88ab\u5f53\u4f5c \u7eaf\u4e8c\u8fdb\u5236 \u4e3a255\uff0c\u4f5c\u4e3a \u8865\u7801 \u65f6\u5219\u662f-1</p> <p>\u8865\u7801\u7684\u610f\u4e49\uff1a\u62ff\u8865\u7801\u548c\u6e90\u7801\u53ef\u4ee5\u52a0\u51fa\u4e00\u4e2a\u6ea2\u51fa\u7684\u96f6</p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#624","title":"6.2.4","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_6","title":"\u6574\u6570\u7684\u8303\u56f4","text":"<p>\u4e00\u4e2a\u5b57\u8282\uff088\u4f4d\uff09\u53ef\u4ee5\u8868\u793a\uff1a0000 0000 ~1111 1111</p> <p>1111 1111~1000 0000 \u2192-1~-128</p> <p>0000 0001~0111 1111 \u21921~127</p> <pre><code>int main() {\n\n    char c =255;//\u5f53\u4f5c\u8865\u7801\n    int i =255;//\u5f53\u4f5c\u6b63\u5e38\u4e8c\u8fdb\u5236\n    unsigned char e=255;//\u5f3a\u5236\u5f53\u4f5c\u6b63\u5e38\u4e8c\u8fdb\u5236\n    printf(\"c=%d,i=%d\uff0ce=%d\\n\",c,i);\n\n    return 0;\n}\n\n-------------------\n    c=-1,i=255\uff0ce=255\n</code></pre> <p>\u5982\u679c\u4e00\u4e2a\u5b57\u9762\u91cf\u5e38\u6570\u60f3\u8981\u8868\u8fbe\u81ea\u5df1\u662funsigned,\u53ef\u4ee5\u5728\u540e\u9762\u52a0u\u6216U :e.g.<code>255U</code> \u7528I\u6216L\u8868\u793a<code>long(long)</code> unsigned\u7684\u521d\u8877\u5e76\u975e\u6269\u5c55\u6570\u80fd\u8868\u8fbe\u7684\u8303\u56f4\uff0c\u800c\u662f\u4e3a\u4e86\u505a\u7eaf\u4e8c\u8fdb\u5236\u8fd0\u7b97*\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u79fb\u4f4d</p> <p>\u5b57\u9762\u91cf\uff1a\u201c123\u201d \u53d8\u91cf\uff1aa </p> <p>Tip</p> <p>\u6570\u5b57\u53ef\u4ee5\u7406\u89e3\u6210\u4e00\u4e2a\u5708</p> <pre><code>stateDiagram-v2\n\n0--&gt; \uff0d1\n\uff0d1--&gt;\uff0d128\n\uff0d128--&gt;127\n127--&gt;0\n\n\n\n</code></pre> <p><pre><code>stateDiagram-v2\n\n0--&gt;255\n255--&gt;0\n</code></pre> </p> <pre><code>int main() {\n\n    int a=0,b=0;\n    while (++a&gt;0);\n    printf(\"The biggest number is int is :%d\\n\",a-1);//\u4ec0\u4e48\u65f6\u5019\u8f6c\u8fc7\u4e00\u5708\u5373\u53ef\u77e5\u9053\u6700\u5927\u7684\u6570\u5b57\n\n    b++;\n\n    while((a=a/10)!=0) {\n        b++;\n    }\n\n    printf(\"The biggest digit in int is : %d\\n\",b);\n    return 0;\n}\n----------------------&gt;\nThe biggest number is int is :2147483647//\u5c31\u662f2\u768431\u6b21\u65b9-1\nThe biggest digit in int is : 10\n</code></pre> <pre><code>//\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\uff08\u7b80\u5355\uff09\nint main() {\n    int a = 0;\n    int bits = sizeof(int) * 8; // \u83b7\u53d6 int \u7684\u4f4d\u6570\n    printf(\"The biggest number in int is: %d\\n\", (1 &lt;&lt; (bits - 1)) - 1);\n    printf(\"The biggest digit in int is: %d\\n\", bits);\n    return 0;\n}\n</code></pre>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#625","title":"6.2.5","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_7","title":"\u6574\u6570\u7684\u8f93\u5165\u8f93\u51fa","text":"<p>\u53ea\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a<code>int</code>\u6216<code>long long</code> <code>%d</code>: int     <code>%u</code>: unsigned     <code>%ld</code>: long long     <code>%lu</code>: unsigned long long</p> <p>8\u8fdb\u5236/16\u8fdb\u5236</p> <ul> <li>8\u8fdb\u5236\uff1a0\u5f00\u5934</li> <li>16\u8fdb\u5236\uff1a0x\u5f00\u5934</li> </ul> <pre><code>int main() {\n\n    char c = 012;\n    int i= 0x12;\n    printf(\"c=%d,i=%d\\n\",c,i);\n    printf(\"c=%o,i=%x\\n\",c,i);\n    return 0;\n}\n-----------------&gt;\nc=10,i=18\nc=12,i=12\n</code></pre> <p>Tip</p> <p><code>%o</code>\u8868\u793a8\u8fdb\u5236\uff1b<code>%x</code>\u8868\u793a16\u8fdb\u5236</p> <ul> <li>16\u8fdb\u5236\u5f88\u9002\u5408\u8868\u8fbe\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u56e0\u4e3a4\u4f4d\u4e8c\u8fdb\u5236\u6b63\u597d\u662f\u4e00\u4e2a16\u8fdb\u5236\u4f4d</li> <li>8\u8fdb\u5236\u7684\u4e00\u4f4d\u6570\u5b57\u6b63\u597d\u8868\u8fbe3\u4f4d\u4e8c\u8fdb\u5236<ul> <li>\u56e0\u4e3a\u65e9\u671f\u8ba1\u7b97\u673a\u7684\u5b57\u957f\u662f12\u7684\u500d\u6570\uff0c\u800c\u975e8</li> </ul> </li> </ul>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#626","title":"6.2.6","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_8","title":"\u9009\u62e9\u6574\u6570\u7c7b\u578b","text":"<p>Tip</p> <p>\u6ca1\u6709\u7279\u6b8a\u9700\u8981\uff0c\u5c31\u9009\u62e9<code>int</code></p> <p><code>unsigned</code>\u4e0e\u5426\u53ea\u662f\u8f93\u51fa\u7684\u4e0d\u540c\uff0c\u5185\u90e8\u8ba1\u7b97\u662f\u4e00\u6837\u7684</p> <p>\u2460\u73b0\u5728\u7684CPU\u7684\u5b57\u957f\u666e\u904d\u662f32\u4f4d\u621664\u4f4d\uff0c\u4e00\u6b21\u5185\u5b58\u8bfb\u5199\u5c31\u662f\u4e00\u4e2aint\uff0c\u4e00\u6b21\u8ba1\u7b97\u4e5f\u662f\u4e00\u4e2aint\uff0c\u9009\u62e9\u66f4\u77ed\u7684\u7c7b\u578b\u4e0d\u4f1a\u66f4\u5feb\uff0c\u751a\u81f3\u53ef\u80fd\u66f4\u6162</p> <p>\u2461\u73b0\u4ee3\u7684\u7f16\u8bd1\u5668\u4e00\u822c\u4f1a\u8bbe\u8ba1\u5185\u5b58\u5bf9\u9f50\uff0c\u6240\u4ee5\u66f4\u77ed\u7684\u7c7b\u578b\u5b9e\u9645\u5728\u5185\u5b58\u4e2d\u6709\u53ef\u80fd\u4e5f\u5360\u636e\u4e00\u4e2aint\u7684\u5927\u5c0f\uff08\u867d\u7136sizeof\u544a\u8bc9\u4f60\u66f4\u5c0f)</p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#627","title":"6.2.7","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_9","title":"\u6d6e\u70b9\u7c7b\u578b","text":"\u7c7b\u578b \u5b57\u957f \u8303\u56f4 \u6709\u6548\u6570\u5b57 scanf printf float 32 \u00b1(1.20x10<sup>-38</sup>~3.40x10<sup>38</sup>),0,\u00b1inf,nan 7 %f %f,%e double 64 \u00b1(2.2x10<sup>-308</sup>~1.79x10<sup>308</sup>),0,\u00b1inf,nan 15 %lf %f,%e <p><code>%e</code>:\u79d1\u5b66\u8ba1\u6570\u6cd5</p> <pre><code>int main() {\n    double ff =1E-10;\n    printf(\"%E,%.16f\\n\", ff, ff);//.16\u8868\u793a\u8f93\u51fa\u4f4d\u6570\uff1a16\u4f4d\n    return 0;\n}\n</code></pre> <pre><code>int main() {\n    printf(\"%.3f\\n\", -0.0049);\n    printf(\"%.30f\\n\", -0.0049);\n    printf(\"%.3f\\n\", -0.00049);\n    return 0;\n}\n---------------------&gt;\n-0.005\n-0.004899999999999999841793218991\n-0.000\n</code></pre>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#628","title":"6.2.8","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_10","title":"\u6d6e\u70b9\u7684\u7cbe\u5ea6\u548c\u8303\u56f4","text":"<pre><code>printf(\"%f\\n\",12.0/0);\nprintf(\"%f\\n\",-12.0/0);\nprintf(\"%f\\n\",0.0/0);\u3001\n-------------\ninf\n-inf\nnan\n</code></pre> <p>Warning</p> <ul> <li><code>f1 == f2</code>\u53ef\u80fd\u5931\u8d25\uff0c\u4f7f\u7528<code>fabs(f1-f2) &lt; le-12</code></li> <li><code>float</code>\u8981\u7528f/F\u540e\u7f00\u8868\u660e\u8eab\u4efd</li> <li>\u5e26\u5c0f\u6570\u70b9\u5b57\u9762\u91cf\u662f<code>double</code>\uff0c\u800c\u4e0d\u662f<code>float</code></li> </ul> <p>Tip</p> <p>\u6ca1\u6709\u7279\u6b8a\u9700\u8981\uff0c\u53ea\u4f7f\u7528<code>double</code></p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#629","title":"6.2.9","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_11","title":"\u5b57\u7b26\u7c7b\u578b","text":"<pre><code>int main() {\n    if (49=='1') {\n        printf(\"Yep!\\n\");\n    }\n    return 0;\n}\n----------&gt;\nYep!\n</code></pre>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_12","title":"\u5b57\u7b26\u8ba1\u7b97","text":"<pre><code>char a='A';\na++;\nprintf(\"%d\\n\",a);\n</code></pre> <p>\u4e00\u4e2a\u5b57\u7b26\u52a0\u4e00\u4e2a\u6570\u5b57\u5f97\u5230ASCII\u7801\u8868\u4e2d\u90a3\u4e2a\u6570\u4e4b\u540e\u7684\u5b57\u7b26 \u4e24\u4e2a\u5b57\u7b26\u7684\u51cf\uff0c\u5f97\u5230\u5b83\u4eec\u5728\u8868\u4e2d\u7684\u8ddd\u79bb \u5b57\u6bcd\u5728ASCII\u8868\u4e2d\u662f\u987a\u5e8f\u6392\u5217\u7684 \u5927\u5199\u5b57\u6bcd\u548c\u5c0f\u5199\u5b57\u6bcd\u662f\u5206\u5f00\u6392\u5217\u7684\uff0c\u5e76\u4e0d\u5728\u4e00\u8d77</p> <pre><code>//\u5927\u5c0f\u5199\u8f6c\u6362\na+'a'-'A'//\u5927\u5199\u2192\u5c0f\u5199\na+'A'-'a'//\u5c0f\u5199\u2192\u5927\u5199\n</code></pre>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#6210","title":"6.2.10","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_13","title":"\u9003\u9038\u5b57\u7b26","text":"\u5b57\u7b26 \u610f\u4e49 \\b \u56de\u9000\u4e00\u683c \\t \u5230\u4e0b\u4e00\u4e2a\u8868\u683c\u4f4d \\n \u6362\u884c \\r \u56de\u8f66 \\\" \u53cc\u5f15\u53f7 \\' \u5355\u5f15\u53f7 \\\\ \u53cd\u659c\u6760\u672c\u8eab <p><pre><code>stateDiagram\n[*]--&gt;Keyboard\nKeyboard--&gt;Shell:\u2460\nShell--&gt;Programme:\u2461\nProgramme--&gt;Shell:\u2462\nShell--&gt;Terminal:\u2463\nTerminal--&gt;[*]\n</code></pre> \u5b8c\u6574 <pre><code>graph LR\n    A[User Input] --&gt;|stdin| B[Shell]\n    B --&gt;|Parse and Execute| C[Program]\n    C --&gt;|stdout| D[Terminal Output]\n    C --&gt;|stderr| D\n    B --&gt;|Built-in Commands| D\n    E[File] -.-&gt;|Redirection| B\n    B -.-&gt;|Redirection| F[File]</code></pre></p> <p>\u6ce8\uff1a<code>\\b</code>\u4e4b\u540e\u8ddf\u4e1c\u897f\uff0c\u90a3\u4e2a\u4e1c\u897f\u4f1a\u66ff\u6362\u524d\u4e00\u4e2a\u5b57\u7b26</p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_14","title":"\u5236\u8868\u4f4d","text":"<p><code>1tab=\\t</code></p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#6211","title":"6.2.11","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_15","title":"\u7c7b\u578b\u8f6c\u6362","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_16","title":"\u81ea\u52a8","text":"<p>\u5f53\u8fd0\u7b97\u7b26\u7684\u4e24\u8fb9\u51fa\u73b0\u4e0d\u4e00\u81f4\u7684\u7c7b\u578b\u65f6\uff0c\u4f1a\u81ea\u52a8\u8f6c\u6362\u6210\u8f83\u5927\u7684\u7c7b\u578b \u5927:\u80fd\u8868\u8fbe\u7684\u6570\u7684\u8303\u56f4\u66f4\u5927 <code>char-&gt; short-&gt; int-&gt; long-&gt; long long</code> <code>int -&gt; float -&gt; double</code></p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_17","title":"\u5f3a\u5236","text":"<p>\u8981\u628a\u4e00\u4e2a\u91cf\u5f3a\u5236\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u7c7b\u578b\uff08\u901a\u5e38\u662f\u8f83\u5c0f\u7684\u7c7b\u578b)\uff0c\u9700\u8981\uff1a</p> <p>\uff08\u7c7b\u578b\uff09\u503c\uff1a</p> <pre><code>(int) 10.1;\n(short)32;\n(short)32768;//\u6ce8\u610f\u5b89\u5168\u6027\uff1a\u5c0f\u7684\u53d8\u91cf\u4e0d\u603b\u80fd\u8868\u8fbe\u5927\u7684\u91cf  --&gt; -32768\n</code></pre> <p>\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u4f18\u5148\u7ea7\u9ad8\u4e8e\u56db\u5219\u8fd0\u7b97</p> <pre><code>int i= (int) a/b\nint i= (int) (a/b)\n</code></pre>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#631","title":"6.3.1","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_18","title":"\u903b\u8f91\u7c7b\u578b","text":"<pre><code>#include &lt;stdbool.h&gt;\n//\u4e4b\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528bool\u548ctrue\u3001false \n</code></pre> <pre><code>bool c=6&gt;5;\nbool t=true;\nt=2//\u5e03\u5c14\u91cf\u4ecd\u7136\u662f\u6574\u6570\uff0c\u8f93\u51fa\u662f0/1\n</code></pre>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#632","title":"6.3.2","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_19","title":"\u903b\u8f91\u8fd0\u7b97","text":"\u903b\u8f91\u8fd0\u7b97 \u903b\u8f91\u91cf \u7ed3\u679c 0/1 true/false \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u793a\u4f8b \u7ed3\u679c \uff01 \u903b\u8f91\u975e !a \u5982\u679ca\u662ftrue\u7ed3\u679c\u5c31\u662ffalse,  \u5982\u679ca\u662ffalse\u7ed3\u679c\u5c31\u662ftrue &amp;&amp; \u903b\u8f91\u4e0e a&amp;&amp;b \u5982\u679ca\u548cb\u90fd\u662ftrue,\u7ed3\u679c\u5c31  \u662ftrue;\u5426\u5219\u5c31\u662ffalse || \u903b\u8f91\u6216 a||b \u5982\u679ca\u548cb\u6709\u4e00\u4e2a\u662ftrue,\u7ed3\u679c\u4e3atrue;  \u4e24\u4e2a\u90fd\u662ffalse,\u7ed3\u679c\u4e3afalse <p>e.g. 4&lt;x&lt;6\u274c --&gt; x&gt;4&amp;&amp;x&lt;6\u2714\ufe0f</p> <p>\u200b   \u5224\u65ad\u662f\u5426\u662f\u5927\u5199\u5b57\u6bcd\uff1ac&gt;='A'&amp;&amp;c&lt;='Z'\u2714\ufe0f</p> <p>\u200b   !age&lt;20--&gt;\u7ed3\u679c\u4e00\u5b9a\u662ftrue  \u2235\uff01age\u7ed3\u679c\u662f0/1</p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_20","title":"\u4f18\u5148\u7ea7","text":"<p>Note</p> <p><code>\uff01&gt;&amp;&amp;&gt;||</code></p> <p>e.g. <code>!done&amp;&amp;(count&gt;MAX)</code></p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_21","title":"\u77ed\u8def","text":"<p>\u903b\u8f91\u8fd0\u7b97\u662f\u81ea\u5de6\u5411\u53f3\u8fdb\u884c\u7684\uff0c\u5982\u679c\u5de6\u8fb9\u7684\u7ed3\u679c\u5df2\u7ecf\u80fd\u591f\u51b3\u5b9a\u7ed3\u679c\u4e86\uff0c\u5c31\u4e0d\u4f1a\u505a\u53f3\u8fb9\u7684\u8ba1\u7b97</p> <p>e.g. \u5bf9\u4e8e&amp;&amp;\uff1a\u5de6\u8fb9false--&gt;\u4e0d\u505a\u53f3\u8fb9</p> <p>\u200b   \u5bf9\u4e8e||\uff1a\u5de6\u8fb9true--&gt;\u4e0d\u505a\u53f3\u8fb9</p> <p>Bug</p> <p>\u4e0d\u8981\u628a\u8d4b\u503c\uff0c\u5305\u62ec\u590d\u5408\u8d4b\u503c\u7ec4\u5408\u8fdb\u8868\u8fbe\u5f0f</p> <p>e.g. <code>a==1&amp;&amp;b+=6</code></p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#633","title":"6.3.3","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_22","title":"\u6761\u4ef6\u8fd0\u7b97/\u9017\u53f7\u8fd0\u7b97","text":""},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_23","title":"\u6761\u4ef6\u8fd0\u7b97\u7b26","text":"<pre><code>count=(count&gt;20)? count-10:count+10;\n//      (\u6761\u4ef6)     (\u6ee1\u8db3\u65f6) (\u4e0d\u6ee1\u8db3\u65f6)\n</code></pre> <p>\u4f18\u5148\u7ea7\uff1a\u6bd4\u8d4b\u503c\u9ad8\u4f46\u662f\u4f4e\u4e8e\u5176\u4ed6\u8fd0\u7b97\u7b26</p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_24","title":"\u5d4c\u5957\u6761\u4ef6\u8868\u8fbe\u5f0f","text":"<p><code>count = (count &gt; 20) ? (cout &lt; 50) ? count - 10 :count - 5 :(count&lt;10 ) ? count+ 10: count + 5;</code></p> <p>\u6761\u4ef6\u8ba1\u7b97\u81ea\u53f3\u5411\u5de6\uff1a\u5148\u8ba1\u7b97\u5206\u652f\uff0c\u518d\u6c47\u603b</p>"},{"location":"C/6%20%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97/#_25","title":"\u9017\u53f7\u8fd0\u7b97","text":"<p>e.g. \u5728for\u4e2d\u4f7f\u7528\uff1a<code>for(i=1,j=10 ; i&lt;j ; i++,j--)</code></p>"},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/","title":"7 \u3001\u51fd\u6570","text":"<ul> <li>7<ul> <li>7.1.1<ul> <li>\u521d\u89c1\u51fd\u6570</li> </ul> </li> <li>7.1.2<ul> <li>\u51fd\u6570\u7684\u5b9a\u4e49\u548c\u4f7f\u7528</li> <li>\u8c03\u7528\u51fd\u6570</li> </ul> </li> <li>7.2.3<ul> <li>\u4ece\u51fd\u6570\u8fd4\u56de</li> <li>\u6ca1\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570</li> </ul> </li> <li>7.2.1<ul> <li>\u51fd\u6570\u539f\u578b<ul> <li>\u51fd\u6570\u5148\u540e\u5173\u7cfb</li> </ul> </li> </ul> </li> <li>7.2.2<ul> <li>\u53c2\u6570\u4f20\u9012<ul> <li>\u7c7b\u578b\u4e0d\u5339\u914d</li> <li>\u4f20\u8fc7\u53bb\u7684\u662f\u4ec0\u4e48\uff1f</li> </ul> </li> </ul> </li> <li>7.2.3<ul> <li>\u672c\u5730\u53d8\u91cf</li> </ul> </li> <li>7.2.4<ul> <li>\u6ca1\u6709\u53c2\u6570\u65f6</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#7","title":"7","text":""},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#711","title":"7.1.1","text":""},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#_1","title":"\u521d\u89c1\u51fd\u6570","text":"<p>\u201c\u4ee3\u7801\u590d\u5236\u201d\u662f\u7a0b\u5e8f\u4e0d\u826f\u7684\u8868\u73b0</p> <p>\u2192\u5305\u88c5\u6210\u51fd\u6570</p>"},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#712","title":"7.1.2","text":""},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#_2","title":"\u51fd\u6570\u7684\u5b9a\u4e49\u548c\u4f7f\u7528","text":"\\[ y=f(x) \\] <p>\u63a5\u53d7\u53c2\u6570\uff0c\u8fd4\u56de\u503c</p> <pre><code>void sum(int begin, int end)                                        //\u51fd\u6570\u5934\n{                                                                 //\u51fd\u6570\u4f53{}\n    int i;\n    int sum=0;\n    for(i=begin;i&lt;=end;i++){\n        sum+=i;\n    }\n    printf(\"The sum of %d to %d is %d : \",begin,end,sum);\n}\n</code></pre> <p><code>void</code>\uff1a\u8fd4\u56de\u7c7b\u578b</p> <p><code>sum</code>\uff1a\u51fd\u6570\u540d</p> <p><code>(int begin, int end)</code>\uff1a\u53c2\u6570\u8868</p>"},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#_3","title":"\u8c03\u7528\u51fd\u6570","text":"<ul> <li>\u51fd\u6570\u540d\uff08\u53c2\u6570\u503c\uff09</li> <li>\uff08\uff09\u8d77\u5230\u8868\u793a\u51fd\u6570\u8c03\u7528\u7684\u4f5c\u7528</li> <li>\u5373\u4f7f\u6ca1\u6709\u53c2\u6570\u4e5f\u8981\uff08\uff09</li> <li>\u5982\u679c\u6709\u53c2\u6570\uff0c\u9700\u8981\u7ed9\u51fa\u6b63\u786e\u7684\u6570\u91cf\u548c\u987a\u5e8f</li> </ul> <pre><code>void cheer() {\n    printf(\"Cheer!\");\n}\n\nint main() {\n    cheer();            //\u6ce8\u610f\u8981\u6709()\n    return 0;\n}\n</code></pre> <pre><code>int sum(int begin,int end) {\n\n    int i;\n    int sum=0;\n    for (i=begin;i&lt;=end;i++) {\n        sum+=i;\n    }\n    return sum;\n}\n\nint main() {\n\n\n    printf(\"%d\\n\",sum(1,10));\n    return 0;\n}\n</code></pre>"},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#723","title":"7.2.3","text":""},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#_4","title":"\u4ece\u51fd\u6570\u8fd4\u56de","text":"<p><code>return</code>\u505c\u6b62\u51fd\u6570\u6267\u884c\uff0c\u5e76\u9001\u56de\u4e00\u4e2a\u503c</p> <pre><code>//\u4e24\u79cd\u5199\u6cd5\nreturn;\nreturn something    //+\u8fd4\u56de\u503c\n</code></pre> <p>\u4e00\u4e2a\u51fd\u6570\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2areturn\u8bed\u53e5</p> <pre><code>int max(int a,int b) {\n    if(a&gt;b){\n        return a;\n    }\n    else{\n        return b;\n    }\n}\n//\u6b64\u5904\u51fd\u6570\u6709\u591a\u4e2a\u51fa\u53e3\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199\u4f46\u4e0d\u5efa\u8bae\nint main() {\n    printf(\"The bigger one is :%d\",max(10,20));\n    return 0;\n}\n</code></pre>"},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#_5","title":"\u6ca1\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570","text":"<ul> <li>void \u51fd\u6570\u540d\uff08\u53c2\u6570\u8868\uff09</li> <li>\u4e0d\u80fd\u4f7f\u7528\u5e26\u503c\u7684return</li> <li>\u53ef\u4ee5\u6ca1\u6709return</li> <li>\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u80fd\u505a\u8fd4\u56de\u503c\u7684\u8d4b\u503c</li> </ul> <p>Danger</p> <p>\u5982\u679c\u51fd\u6570\u6709\u8fd4\u56de\u503c\uff0c\u5fc5\u987b\u4f7f\u7528\u5e26\u503c\u7684<code>return</code></p>"},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#721","title":"7.2.1","text":""},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#_6","title":"\u51fd\u6570\u539f\u578b","text":""},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#_7","title":"\u51fd\u6570\u5148\u540e\u5173\u7cfb","text":"<p>\u628asum()\u5199\u5728\u4e0a\u9762\uff0c\u56e0\u4e3a\uff1a</p> <ul> <li>C\u7684\u7f16\u8bd1\u5668\u81ea\u4e0a\u800c\u4e0b\u5206\u6790\u4f60\u7684\u4ee3\u7801</li> </ul> <p>Note</p> <p>\u4e00\u822c\uff1a\u51fd\u6570\u8981\u5199\u5728\u8c03\u7528\u4e4b\u524d</p> <p>\u89e3\u51b3\uff1a\u53ef\u4ee5\u5c06 \u51fd\u6570\u5934 \u642c\u5230\u7a0b\u5e8f\u524d\uff0c\u4ee5\u8fbe\u5230\u8ba9main\u7a0b\u5e8f\u4e00\u76ee\u4e86\u7136\u2192\u539f\u578b\u58f0\u660e</p> <pre><code>int max(int a,int b);         //\u58f0\u660e\nint max(int ,int );               //\u7701\u53bb\u53c2\u6570\u540d\u79f0\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4e0d\u597d\u8bfb\n\nint main() {\n\n    printf(\"The bigger one is :%d\",max(10,20));\n    return 0;\n}\n\nint max(int a,int b) {            //\u5b9a\u4e49\n    if(a&gt;b){return a;}\n    else{return b;}\n}\n</code></pre>"},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#722","title":"7.2.2","text":""},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#_8","title":"\u53c2\u6570\u4f20\u9012","text":"<pre><code>int cheer(int i){\n    printf(\"cheer!%d\\n\",i);\n}\n\nint main(){\n    cheer(2.4);\n    return 0;\n}\n-----------------&gt;\ncheer 2\n</code></pre>"},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#_9","title":"\u7c7b\u578b\u4e0d\u5339\u914d","text":"<ul> <li> <p>\u8c03\u7528\u51fd\u6570\u65f6\u7ed9\u7684\u503c\u4e0e\u53c2\u6570\u7684\u7c7b\u578b\u4e0d\u5339\u914d\u662fC\u8bed\u8a00\u4f20\u7edf\u4e0a\u6700\u5927\u7684\u6f0f\u6d1e</p> </li> <li> <p>\u7f16\u8bd1\u5668\u603b\u662f\u6084\u6084\u66ff\u4f60\u628a\u7c7b\u578b\u8f6c\u6362\u597d\uff0c\u4f46\u662f\u8fd9\u5f88\u53ef\u80fd\u4e0d\u662f\u4f60\u6240\u671f\u671b\u7684</p> </li> <li> <p>\u540e\u7eed\u7684\u8bed\u8a00\uff0cC++/Java\u5728\u8fd9\u65b9\u9762\u5f88\u4e25\u683c</p> </li> </ul>"},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#_10","title":"\u4f20\u8fc7\u53bb\u7684\u662f\u4ec0\u4e48\uff1f","text":"<pre><code>void swap(int a,int b);\nint main() {\n    int a,b;\n    printf(\"Enter two numbers:\");\n    scanf(\"%d %d\",a,b);\n    swap(a,b);\n\n    printf(\"The numbers after swapping are:%d %d\",a,b);\n    return 0;\n}\n\nvoid swap(int a,int b) {\n    int t=b;\n    b=a;\n    a=t;\n}\n//\u8fd9\u6bb5\u4ee3\u7801\u5e76\u4e0d\u80fd\u8fbe\u5230\u4ea4\u6362\u4e24\u6570\u7684\u6548\u679c\u2192\u6bcf\u4e2a\u51fd\u6570\u90fd\u6709\u81ea\u5df1\u7684\u53d8\u91cf\u7a7a\u95f4\n</code></pre> <p>Warning</p> <p>C\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u6c38\u8fdc\u53ea\u80fd\u4f20\u503c\u7ed9\u51fd\u6570</p>"},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#723_1","title":"7.2.3","text":""},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#_11","title":"\u672c\u5730\u53d8\u91cf","text":"<ul> <li>\u51fd\u6570\u7684\u6bcf\u6b21\u8fd0\u884c\uff0c\u5c31\u4ea7\u751f\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u53d8\u91cf\u7a7a\u95f4\uff0c\u5728\u8fd9\u4e2a\u7a7a\u95f4\u4e2d\u7684\u53d8\u91cf\uff0c\u662f\u51fd\u6570\u7684\u8fd9\u6b21\u8fd0\u884c\u6240\u72ec\u6709\u7684\uff0c\u79f0\u4f5c\u672c\u5730\u53d8\u91cf</li> <li>\u5b9a\u4e49\u5728\u51fd\u6570\u5185\u90e8\u7684\u53d8\u91cf\u5c31\u662f\u672c\u5730\u53d8\u91cf</li> <li>\u53c2\u6570\u4e5f\u662f\u672c\u5730\u53d8\u91cf</li> </ul> <p>\u751f\u5b58\u671f\uff1a\u4ec0\u4e48\u65f6\u5019\u8fd9\u4e2a\u53d8\u91cf\u5f00\u59cb\u51fa\u73b0\u4e86\uff0c\u5230\u4ec0\u4e48\u65f6\u5019\u5b83\u6d88\u4ea1\u4e86 \u4f5c\u7528\u57df\uff1a\u5728\uff08\u4ee3\u7801\u7684\uff09\u4ec0\u4e48\u8303\u56f4\u5185\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u53d8\u91cf\uff08\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u8d77\u4f5c\u7528\uff09 \u5bf9\u4e8e\u672c\u5730\u53d8\u91cf\uff0c\u8fd9\u4e24\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u662f\u7edf\u4e00\u7684\uff1a\u5927\u62ec\u53f7\u5185\u2014\u2014\u5757</p> <pre><code>stateDiagram-v2\n\u5757--&gt;\u751f\u5b58\u671f:\u51b3\u5b9a\n\u751f\u5b58\u671f--&gt;\u4ec0\u4e48\u65f6\u5019\u8fd9\u4e2a\u53d8\u91cf\u5f00\u59cb\u51fa\u73b0\u4e86\uff0c\u5230\u4ec0\u4e48\u65f6\u5019\u5b83\u6d88\u4ea1\u4e86\n\u5757--&gt;\u4f5c\u7528\u57df:\u51b3\u5b9a\n\u4f5c\u7528\u57df--&gt;\u5728\uff08\u4ee3\u7801\u7684\uff09\u4ec0\u4e48\u8303\u56f4\u5185\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u53d8\u91cf\uff08\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u8d77\u4f5c\u7528\uff09</code></pre> <p>Tip</p> <ul> <li>\u672c\u5730\u53d8\u91cf\u662f\u5b9a\u4e49\u5728\u5757\u5185\u7684</li> <li>\u5b83\u53ef\u4ee5\u662f\u5b9a\u4e49\u5728\u51fd\u6570\u7684\u5757\u5185</li> <li>\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u5728\u8bed\u53e5\u7684\u5757\u5185</li> <li>\u751a\u81f3\u53ef\u4ee5\u968f\u4fbf\u62c9\u4e00\u5bf9\u5927\u62ec\u53f7\u6765\u5b9a\u4e49\u53d8\u91cf</li> <li>\u7a0b\u5e8f\u8fd0\u884c\u8fdb\u5165\u8fd9\u4e2a\u5757\u4e4b\u524d\uff0c\u5176\u4e2d\u7684\u53d8\u91cf\u4e0d\u5b58\u5728\uff0c\u79bb\u5f00\u8fd9\u4e2a\u5757\uff0c\u5176\u4e2d\u7684\u53d8\u91cf\u5c31\u6d88\u5931\u4e86</li> <li>\u5757\u5916\u9762\u5b9a\u4e49\u7684\u53d8\u91cf\u5728\u91cc\u9762\u4ecd\u7136\u6709\u6548</li> <li>\u5757\u91cc\u9762\u5b9a\u4e49\u4e86\u548c\u5916\u9762\u540c\u540d\u7684\u53d8\u91cf\u5219\u63a9\u76d6\u4e86\u5916\u9762\u7684</li> <li>\u4e0d\u80fd\u5728\u4e00\u4e2a\u5757\u5185\u5b9a\u4e49\u540c\u540d\u7684\u53d8\u91cf</li> <li>\u672c\u5730\u53d8\u91cf\u4e0d\u4f1a\u88ab\u9ed8\u8ba4\u521d\u59cb\u5316</li> <li>\u53c2\u6570\u5728\u8fdb\u5165\u51fd\u6570\u7684\u65f6\u5019\u88ab\u521d\u59cb\u5316\u4e86</li> </ul>"},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#724","title":"7.2.4","text":""},{"location":"C/7%20%E3%80%81%E5%87%BD%E6%95%B0/#_12","title":"\u6ca1\u6709\u53c2\u6570\u65f6","text":"<pre><code>void f()        //\u4e0d\u5efa\u8bae\uff0c\u8868\u793a\u53c2\u6570\u672a\u77e5\nvoid f(void)    //\u8868\u793a\u6ca1\u6709\u53c2\u6570\n</code></pre> <p>C\u8bed\u8a00\u4e0d\u5141\u8bb8\u51fd\u6570\u5d4c\u5957\u5b9a\u4e49</p> <p><code>int main</code>\u4e5f\u662f\u51fd\u6570</p> <p><code>return 0;</code>\u4f5c\u7528\u2192   Windows: if errorlevel 1\u2026\u2026                 Unix Bash: echo \\(?                 Csh: echo\\)status</p>"},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/","title":"8 \u3001\u6570\u7ec4","text":"<ul> <li>8<ul> <li>8.1.1<ul> <li>\u521d\u8bd5\u6570\u7ec4</li> </ul> </li> <li>8.1.2<ul> <li>\u5b9a\u4e49\u6570\u7ec4</li> <li>\u6709\u6548\u7684\u4e0b\u6807\u8303\u56f4</li> </ul> </li> <li>8.1.3<ul> <li>e.g. \u7edf\u8ba1\u4e2a\u6570</li> </ul> </li> <li>8.2.1<ul> <li>\u6570\u7ec4\u8fd0\u7b97<ul> <li>\u6570\u7ec4\u7684\u96c6\u6210\u521d\u59cb\u5316</li> <li>\u96c6\u6210\u521d\u59cb\u5316\u7684\u5b9a\u4f4d</li> <li>\u6570\u7ec4\u7684\u5927\u5c0f</li> <li>\u6570\u7ec4\u7684\u8d4b\u503c\u548c\u904d\u5386\u6570\u7ec4</li> </ul> </li> </ul> </li> <li>8.2.2<ul> <li>e.g.\u6570\u7ec4\u4f8b\u5b50\uff1a\u7d20\u6570</li> </ul> </li> <li>8.2.3<ul> <li>\u4e8c\u7ef4\u6570\u7ec4<ul> <li>\u4e8c\u7ef4\u6570\u7ec4\u521d\u59cb\u5316</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#8","title":"8","text":""},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#811","title":"8.1.1","text":""},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#_1","title":"\u521d\u8bd5\u6570\u7ec4","text":"<pre><code>int main() {\n    int x;\n    int sum=0;\n    int count=0;\n    int number[100];\n\n    scanf(\"%d\",&amp;x);\n    while(x!=-1) {\n        number[count]=x;\n        //\n        {\n            int i;\n            printf(\"%d\\t\",count);\n            for(i=0;i&lt;=count;i++) {\n                printf(\"%d\\t\",number[i]);\n            }\n            printf(\"\\n\");\n        }\n        //\n        sum=sum+x;\n        count++;\n        scanf(\"%d\",&amp;x);\n    }\n\n    if(count&gt;0){\n\n        printf(\"The average of all numbers is %f\\n\", 1.0*sum/count);\n        int i;\n\n        for(i=0;i&lt;count;i++){\n\n            if (number[i]&gt;sum/count){\n                printf(\"%d\\n\",number[i]);\n            }\n        }\n    }\n    return 0;\n}\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u5b58\u5728\u5b89\u5168\u9690\u60a3\uff1a\u6570\u7ec4\u957f\u5ea6\u5927\u4e8e100</p>"},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#812","title":"8.1.2","text":""},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#_2","title":"\u5b9a\u4e49\u6570\u7ec4","text":"<pre><code>//  &lt;\u7c7b\u578b&gt; \u53d8\u91cf\u540d\u79f0 [\u5143\u7d20\u6570\u91cf]\ne.g. int grades   [100]\n    double weight [20]\n</code></pre> <p>Tip</p> <p>\u5143\u7d20\u6570\u91cf\u5fc5\u987b\u662f\u6574\u6570\uff0c\u800c\u4e14\u662f\u786e\u5b9a\u7684\u5b57\u9762\u91cf</p> <ul> <li>\u6240\u6709\u5143\u7d20\u6570\u636e\u7c7b\u578b\u76f8\u540c</li> <li>\u4e00\u65e6\u521b\u5efa\u4e0d\u80fd\u6539\u53d8\u5927\u5c0f</li> <li>*\uff08\u6570\u7ec4\u4e2d\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u662f\u8fde\u7eed\u4f9d\u6b21\u6392\u5217\u7684\uff09</li> </ul> <p>\u4e0b\u6807\u4ece0\u5f00\u59cb</p> <pre><code>timeline\na[0]: 1\na[1]: 2\na[2]: 3\na[3]: 4\na[4]: 5\na[5]: 6\na[6]: 7\n</code></pre> <p><code>a[2]=a[1]+6</code>\uff1a\u8d4b\u503c\u5de6\u8fb9\u7684\u53eb\u5de6\u503c</p>"},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#_3","title":"\u6709\u6548\u7684\u4e0b\u6807\u8303\u56f4","text":"<ul> <li>\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u73af\u5883\u90fd \u4e0d\u4f1a \u68c0\u67e5\u6570\u7ec4\u4e0b\u6807\u662f\u5426\u8d8a\u754c</li> <li>\u4e00\u65e6\u7a0b\u5e8f\u8fd0\u884c\uff0c\u8d8a\u754c\u7684\u6570\u7ec4\u8bbf\u95ee\u53ef\u80fd\u9020\u6210\u95ee\u9898\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u2192segmentation fault</li> <li>\u957f\u5ea6\u4e3a0\u7684\u6570\u7ec4\u5b58\u5728\uff0c\u4f46\u662f\u65e0\u7528</li> </ul>"},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#813","title":"8.1.3","text":""},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#eg","title":"e.g. \u7edf\u8ba1\u4e2a\u6570","text":"<pre><code>int main(void) {\n    const int number = 10;//\u6570\u7ec4\u5927\u5c0f\n    int x;\n    int count[number];//\u5b9a\u4e49\u6570\u7ec4\n    int i;\n\n    //\u6570\u7ec4\u521d\u59cb\u5316\n    for (i = 0; i &lt; number; i++) {\n        count[i] = 0;\n    }\n\n\n    scanf(\"%d\", &amp;x);\n    while (x != -1) {\n        if (x &gt; 0 &amp;&amp; x &lt;= 9) {\n            count[x]++;//\u6570\u7ec4\u53c2\u4e0e\u8fd0\u7b97\n        }\n\n        scanf(\"%d\",&amp;x);\n    }\n    //\u904d\u5386\u6570\u7ec4\u8f93\u51fa\n    for (int i = 0; i &lt; number; i++) {\n        printf(\"%d:%d\\n\", i, count[i]);\n    }\n\n\n    return 0;\n}\n</code></pre>"},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#821","title":"8.2.1","text":""},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#_4","title":"\u6570\u7ec4\u8fd0\u7b97","text":""},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#_5","title":"\u6570\u7ec4\u7684\u96c6\u6210\u521d\u59cb\u5316","text":"<pre><code>int a[]={2,4,6,8,9,6,5,3};\nint a[12]={2};//\u7b2c\u4e00\u4e2a\u662f2\uff0c\u5176\u4f59\u662f0\n</code></pre>"},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#_6","title":"\u96c6\u6210\u521d\u59cb\u5316\u7684\u5b9a\u4f4d","text":"<pre><code>int a[12] = { [1]=2,4,  [5]=6};//\u7b2c2\uff0c3\u4e2a\u662f\u20182\uff0c4\u2019\uff0c\u7b2c6\u4e2a\u662f\u20186\u2019\n</code></pre>"},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#_7","title":"\u6570\u7ec4\u7684\u5927\u5c0f","text":"<p>sizeof\u7ed9\u51fa\u6574\u4e2a\u6570\u7ec4\u6240\u5360\u636e\u7684\u5185\u5bb9\u7684\u5927\u5c0f\uff0c\u5355\u4f4d\u662f\u5b57\u8282</p> <pre><code>int main(void) {\n    int a[]={4,5,6,7,8,9,10,11,12,13};\n    {\n        int i=0;\n        printf(\"%llu\",sizeof(a)/sizeof(a[0]));\n    }\n    return 0;\n}\n</code></pre> <pre><code>sizeof(a)/sizeof(a[0])\n    //\u8fd9\u6837\u7684\u4ee3\u7801\uff0c\u4e00\u65e6\u4fee\u6539\u6570\u7ec4\u4e2d\u521d\u59cb\u7684\u6570\u636e\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u904d\u5386\u7684\u4ee3\u7801\n</code></pre>"},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#_8","title":"\u6570\u7ec4\u7684\u8d4b\u503c\u548c\u904d\u5386\u6570\u7ec4","text":"<pre><code>//\u9519\u8bef\u274c\nint a[]={1,2,3,4,5,6};\nint b[]=a;\n//\u6b63\u786e\u2714\ufe0f\nint a[]={1,2,3,4,5,6};\nfor (i=0; i&lt;length; i++){\n    b[i]=a[i];\n}\n</code></pre> <p>\u901a\u5e38\u4f7f\u7528for\u5faa\u73af\uff0c\u53d8\u91cfi\u4ece0\u5230 &lt; \u6570\u7ec4\u957f\u5ea6</p> <p>Warning</p> <p>\u5e38\u89c1\u9519\u8bef\uff1a\u274c</p> <ul> <li>\u5faa\u73af\u7ed3\u675f\u6761\u4ef6\uff1a\u7528&lt;=\u6570\u7ec4\u957f\u5ea6</li> <li>\u79bb\u5f00\u5faa\u73af\u540e\uff0c\u4ecd\u65e7\u7528i\u7684\u503c\u6765\u505a\u6570\u7ec4\u4e0b\u6807</li> </ul> <p>\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u5f80\u5f80\u5fc5\u987b\u7528\u53e6\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u6570\u7ec4\u7684\u5927\u5c0f</p>"},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#822","title":"8.2.2","text":""},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#eg_1","title":"e.g.\u6570\u7ec4\u4f8b\u5b50\uff1a\u7d20\u6570","text":"<ol> <li>\u904d\u53860~n</li> </ol> <pre><code>int isPrime(int x) {\n    int ret = 1;\n    for (int i = 2; i &lt; x; i++) {\n        if (x % i == 0) {\n            ret = 0;\n            break;\n        }\n    }\n\n    return ret;\n}\n\nint main() {\n    int x;\n    scanf(\"%d\", &amp;x);\n    if (isPrime(x) == 1) {\n        printf(\"YES\\n\");\n    } else {\n        printf(\"NO\\n\");\n    }\n    return 0;\n}\n</code></pre> <ol> <li>\u904d\u53860~n\uff08\u53bb\u6389\u6240\u6709\u5076\u6570\uff09</li> <li>\u904d\u53860~<code>sqrt(x)</code></li> <li>\u5224\u65ad\u662f\u5426\u80fd\u88ab\u5df2\u77e5\u7684\u7d20\u6570\u6574\u9664</li> </ol> <p><pre><code>prime [count++]=i;\n</code></pre> 5. \u6784\u9020\u7d20\u6570\u8868\uff08\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\uff09</p> <p>\uff081\uff09\u4ee4x\u4e3a2</p> <p>\uff082\uff09\u5c062x\u30013x\u30014x\u76f4\u81f3ax&lt;n\u7684\u6570\u6807\u8bb0\u4e3a\u975e\u7d20\u6570</p> <p>\uff083\uff09\u4ee4x\u4e3a\u4e0b\u4e00\u4e2a\u6ca1\u6709\u88ab\u6807\u8bb0\u4e3a\u975e\u7d20\u6570\u7684\u6570\uff0c\u91cd\u590d\uff082\uff09\uff1b\u76f4\u5230\u6240\u6709\u7684\u6570\u90fd\u5df2\u7ecf\u5c1d\u8bd5\u5b8c\u6bd5</p> <pre><code>flowchart TD\n    st[Start]\n    e[End]\n    op1[Create list 2 to n]\n    op2[Mark smallest unmarked number as prime]\n    op3[Cross out its multiples]\n    cond[Unmarked numbers left?]\n    op4[Output prime numbers]\n\n    st --&gt; op1\n    op1 --&gt; op2\n    op2 --&gt; op3\n    op3 --&gt; cond\n    cond --&gt;|yes| op2\n    cond --&gt;|no| op4\n    op4 --&gt; e</code></pre>"},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#823","title":"8.2.3","text":""},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#_9","title":"\u4e8c\u7ef4\u6570\u7ec4","text":"<pre><code>//3\u884c5\u5217\u7684\u77e9\u9635\nint a[3][5]\n</code></pre> <p><code>a [i][j]</code>\u662f\u4e00\u4e2a<code>int</code></p>"},{"location":"C/8%20%E3%80%81%E6%95%B0%E7%BB%84/#_10","title":"\u4e8c\u7ef4\u6570\u7ec4\u521d\u59cb\u5316","text":"<pre><code>int a[][5]{\n    {0,1,2,3,4},\n    {2,3,4,5,6},\n};\n</code></pre> <ul> <li>\u5217\u6570\u5fc5\u987b\u7ed9\u51fa</li> <li>\u4e00\u884c\u4e00\u4e2a<code>{}</code>\uff0c\u9017\u53f7\u5206\u9694</li> <li>\u7701\u7565\u8868\u793a\u8865\u96f6</li> <li>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b9a\u4f4d</li> </ul>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/","title":"9 \u3001\u6307\u9488","text":"<ul> <li>9<ul> <li>9.1.1<ul> <li>\u53d6\u5730\u5740\u8fd0\u7b97<ul> <li>\u8fd0\u7b97\u7b26&amp;</li> </ul> </li> </ul> </li> <li>9.1.2<ul> <li>\u6307\u9488</li> <li>\u8bbf\u95ee\u5730\u5740\u4e0a\u7684\u53d8\u91cf*</li> </ul> </li> <li>9.1.3<ul> <li>\u6307\u9488\u7684\u4f7f\u7528<ul> <li>1\u3001\u4e24\u4e2a\u53d8\u91cf\u505a\u4ea4\u6362\uff08\u4e4b\u524d\u53d8\u91cf\u90fd\u6709\u9650\u5b9a\u7684\u4f5c\u7528\u57df\uff09</li> <li>2\u3001\u51fd\u6570\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u67d0\u4e9b\u503c\u8981\u6307\u9488\u5e26\u56de\uff08return\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u503c\uff09</li> </ul> </li> </ul> </li> <li>9.1.4<ul> <li>\u6307\u9488\u548c\u6570\u7ec4<ul> <li>\u4f20\u5165\u6570\u7ec4\u6210\u4e86\u4ec0\u4e48\uff1f</li> </ul> </li> <li>\u6570\u7ec4\u53d8\u91cf\u662f\u7279\u6b8a\u7684\u6307\u9488</li> </ul> </li> <li>9.1.5<ul> <li>\u6307\u9488\u4e0e\u53d8\u91cf</li> <li>const\u6570\u7ec4</li> </ul> </li> <li>9.2.1<ul> <li>\u6307\u9488\u8fd0\u7b97</li> <li>*p++</li> <li>0\u5730\u5740</li> <li>\u6307\u9488\u7c7b\u578b<ul> <li>\u6307\u9488\u7c7b\u578b\u8f6c\u6362</li> </ul> </li> </ul> </li> <li>9.2.2<ul> <li>\u52a8\u6001\u5185\u5b58\u5206\u914d</li> <li>\u6ca1\u7a7a\u95f4\u4e86\uff1f</li> <li>free()</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul> </li> </ul> </li> </ul>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#9","title":"9","text":""},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#911","title":"9.1.1","text":""},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_1","title":"\u53d6\u5730\u5740\u8fd0\u7b97","text":""},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_2","title":"\u8fd0\u7b97\u7b26<code>&amp;</code>","text":"<p>\u83b7\u5f97\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5b83\u7684\u64cd\u4f5c\u5fc5\u987b\u662f\u5730\u5740</p> <p>Bug</p> <p>\u5730\u5740\u5927\u5c0f\u662f\u5426\u4e0e<code>int</code>\u76f8\u540c\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668</p> <p><code>&amp;(a\u00b1b)</code>\u4e0d\u80fd\u53d6\u5730\u5740</p> <pre><code>printf(\"%p\",&amp;i);//&amp;i \u8868\u793a\u6253\u5370\u53d8\u91cf\u5730\u5740\n</code></pre>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#912","title":"9.1.2","text":""},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_3","title":"\u6307\u9488","text":"<p>\u5c31\u662f \u4fdd\u5b58\u5730\u5740 \u7684\u53d8\u91cf</p> <pre><code>int *p = &amp;i;\nint *p,q;//p\u662f\u6307\u9488\uff0cq\u662fint\u2192 *p\u662f\u4e00\u79cd\u7c7b\u578b\uff0c\u6ca1\u6709int*\u8fd9\u79cd\u7c7b\u578b\n</code></pre>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_4","title":"\u8bbf\u95ee\u5730\u5740\u4e0a\u7684\u53d8\u91cf<code>*</code>","text":"<pre><code>flowchart LR\n    subgraph Memory\n        A[\u53d8\u91cf x\\n\u503c: 10\\n\u5730\u5740: 0x7ffd5]\n    end\n    subgraph \"\u53d6\u5730\u5740\u64cd\u4f5c &amp;x\"\n        B((\u53d6\u5730\u5740\u8fd0\u7b97\u7b26 &amp;))\n    end\n    subgraph \"\u6307\u9488 p\"\n        C[\u6307\u9488 p\\n\u5b58\u50a8\u7684\u5730\u5740: 0x7ffd5]\n    end\n    A --&gt;|\u5730\u5740| B\n    B --&gt;|\u8d4b\u503c| C\n    C -.-&gt;|\u6307\u5411| A</code></pre> <pre><code>int main(void) {\n    int *p;\n    int a=8;\n    p=&amp;a;\n    printf(\"%d\\n\",*p);//\u21928               \uff1a*p\u6307\u5411\u503c\n    printf(\"%p\\n\",p);//\u21920000005ff6bffaa4   \uff1ap\u8868\u793a\u5730\u5740\n    return 0;\n}\n</code></pre> <pre><code>void f(int *p);\nvoid g(int k);\nint main(void) {\n    int i =6;\n    printf(\"&amp;i=%p\\n\",&amp;i);\n    f(&amp;i);\n    g(i);\n    return 0;\n}\n\nvoid f(int *p) {\n    printf(\"p=%p\\n\",p);\n    printf(\"*p=%p\\n\",*p);\n    *p=26;//\u901a\u8fc7\u6307\u9488\u4fee\u6539\u503c\n}\n\nvoid g(int k) {\n    printf(\"k=%d\\n\",k);\n}\n-----------------------------&gt;\n&amp;i=000000050cfffd7c\np=000000050cfffd7c\n*p=0000000000000006\nk=26\n</code></pre>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#913","title":"9.1.3","text":""},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_5","title":"\u6307\u9488\u7684\u4f7f\u7528","text":""},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#1","title":"1\u3001\u4e24\u4e2a\u53d8\u91cf\u505a\u4ea4\u6362\uff08\u4e4b\u524d\u53d8\u91cf\u90fd\u6709\u9650\u5b9a\u7684\u4f5c\u7528\u57df\uff09","text":"<pre><code>void swap(int *pa, int *pb);\n\nint main(void) {\n    int a=5;\n    int b=6;\n    swap (&amp;a,&amp;b);\n    printf(\"a=%d, b=%d\\n\",a,b);\n    return 0;\n}\nvoid swap(int *pa, int *pb) {\n    int t =*pa;\n    *pa=*pb;\n    *pb=t;\n}\n</code></pre>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#2return","title":"2\u3001\u51fd\u6570\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u67d0\u4e9b\u503c\u8981\u6307\u9488\u5e26\u56de\uff08return\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u503c\uff09","text":"<pre><code>void minmax(int a[],int len,int *max,int *min);\n\nint main (void) {\n    int a[]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n    int min,max;\n    minmax(a,sizeof(a)/sizeof(a[0]),&amp;max,&amp;min);\n    printf(\"min = %d,max = %d\\n\",min,max);\n    return 0;\n}\n\nvoid minmax(int a[],int len,int *max,int *min) {\n    int i;\n    *min =*max =a[0];\n    for (i=1;i&lt;len;i++) {\n        if (a[i]&lt;*min) {\n            *min = a[i];\n        }\n        if (a[i]&gt;*max) {\n            *max = a[i];\n        }\n    }\n\n}\n</code></pre> <p>3\u3001\u51fd\u6570\u8fd4\u56de\u8fd0\u7b97\u7684\u72b6\u6001\uff0c\u7ed3\u679c\u901a\u8fc7\u6307\u9488\u8fd4\u56de</p> <p>\u200b   \u5e38\u7528\u5957\u8def\uff1a\u8ba9\u51fd\u6570\u8fd4\u56dei\u7279\u6b8a\u7684\u4e0d\u5c5e\u4e8e\u6709\u6548\u8303\u56f4\u7684\u503c\u8868\u793a\u51fa\u9519\u2192-1/0</p> <pre><code>int divide(int a, int b,int *result);\n\nint main() {\n    int a=5;\n    int b=2;\n    int c;\n    if(divide(a,b,&amp;c)) {\n        printf(\"%d/%d=%d\\n\",a,b,c);\n    }\n    return 0;\n}\nint divide(int a, int b,int *result) {\n    int ret =1;\n    if (b==0) ret=0;\n    else {\n        *result=a/b;\n    }\n    return ret;\n}\n</code></pre> <p>Bug</p> <p>\u6307\u9488\u6ca1\u6709\u6307\u5411\u53d8\u91cf\u5730\u5740\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528\u6307\u9488</p>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#914","title":"9.1.4","text":""},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_6","title":"\u6307\u9488\u548c\u6570\u7ec4","text":""},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_7","title":"\u4f20\u5165\u6570\u7ec4\u6210\u4e86\u4ec0\u4e48\uff1f","text":"<pre><code>void minmax(int a[],int len,int *max,int *min);\n\nint main (void) {\n    int a[]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n    int min,max;\n    printf(\"main sizeof(a)=%llu\\n\",sizeof(a));//\u219260\n    printf(\"main a=%p\\n\",&amp;a);//\u219200000077c0fffe00\n    minmax(a,sizeof(a)/sizeof(a[0]),&amp;max,&amp;min);\n    printf(\"min = %d,max = %d\\n\",min,max);\n    return 0;\n}\n        //\ud83d\udc47a[]\u548c*a\u7b49\u4ef7\nvoid minmax(int a[],int len,int *max,int *min) {\n    int i;\n    printf(\"minmax sizeof(a)=%llu\\n\",sizeof(a));//\u21928\n    printf(\"minmax a=%p\\n\",&amp;a);//\u219200000077c0fffe00\n    *min =*max =a[0];\n    for (i=1;i&lt;len;i++) {\n        if (a[i]&lt;*min) {\n            *min = a[i];\n        }\n        if (a[i]&gt;*max) {\n            *max = a[i];\n        }\n    }\n}\n</code></pre> <p>Note</p> <ul> <li>\u51fd\u6570\u53c2\u6570\u8868\u4e2d\u7684\u6570\u7ec4\u5176\u5b9e\u662f\u6307\u9488</li> <li><code>sizeof(a) == sizeof(int*)</code></li> </ul>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_8","title":"\u6570\u7ec4\u53d8\u91cf\u662f\u7279\u6b8a\u7684\u6307\u9488","text":"<p>\u6570\u7ec4\u672c\u8eab\u8868\u8fbe\u5730\u5740</p> <pre><code>int a[10];int *p=a;//\u65e0\u9700\u7528&amp;\u53d6\u5730\u5740\n</code></pre> <pre><code>a == &amp;a[0];       //\u6570\u7ec4\u5355\u5143\u8868\u793a\u53d8\u91cf\uff0c\u9700\u8981&amp;\u53d6\u5730\u5740\n</code></pre> <p><code>*</code>\u8fd0\u7b97\u7b26\u53ef\u4ee5\u5bf9\u6307\u9488\u505a\u4e5f\u53ef\u4ee5\u5bf9\u6570\u7ec4\u505a</p> <pre><code> *a =25\uff1b\n</code></pre> <p>\u6570\u7ec4\u53d8\u91cf\u662f<code>const</code>\u6307\u9488\uff0c\u4e0d\u80fd\u88ab\u590d\u5236</p> <pre><code>int b[]-&gt;int *const b\n</code></pre>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#915","title":"9.1.5","text":""},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_9","title":"\u6307\u9488\u4e0e\u53d8\u91cf","text":"<pre><code>int i;\nconst int* p1 = &amp;i;\nint const *p2 = &amp;i;\nint *const p3 = &amp;i;\n</code></pre> <p>Note</p> <p><code>const</code>\u5728<code>*</code>\u524d\uff1a\u6240\u6307\u7684\u4e1c\u897f\u4e0d\u80fd\u88ab\u4fee\u6539</p> <p><code>const</code>\u5728<code>*</code>\u540e\uff1a\u6307\u9488\u4e0d\u80fd\u88ab\u4fee\u6539</p>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#const","title":"<code>const</code>\u6570\u7ec4","text":"<pre><code>const int a[]={1,2,3,4,5,6,};\n//\u4e0d\u53ef\u4fee\u6539\uff0c\u5fc5\u987b\u521d\u59cb\u5316\n</code></pre>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#921","title":"9.2.1","text":""},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_10","title":"\u6307\u9488\u8fd0\u7b97","text":"<pre><code>int main(void) {\n    //char\n    char ac[]={0,1,2,3,4,5,6,};\n    char *p =ac;\n    printf(\"p= %p\\n\",p);\n    printf(\"p+1= %p\\n\",p+1);\n\n    //int\n    int ai[]={0,1,2,3,4,5,6,};\n    int *q =ai;\n    printf(\"q= %p\\n\",q);\n    printf(\"q+1= %p\\n\",q+1);\n}\n------------------------&gt;\np= 0000006976dffbb9\np+1= 0000006976dffbba//+1\nq= 0000006976dffb90\nq+1= 0000006976dffb94//+4\n</code></pre> <pre><code>block-beta\n    columns 3\n  block:group1:3\n  %% columns auto (default)\n  1 2 3 \n end\n\n  block:group2:3\n    %% columns auto (default)\n     54 55 56 57 58 59 5a 5b 5c 5d 5e 5f\n  end\n\n</code></pre> <ul> <li><code>*p    -&gt;a[0]</code></li> <li><code>*(p+1)-&gt;a[1]</code></li> </ul> <p>\u5e76\u4e0d\u662f\u5728\u5730\u5740\u4e0a+1\uff0c\u5426\u5219\u6ca1\u6709\u610f\u4e49</p> <pre><code>int main(void) {\n    char ac[]={0,1,2,3,4,5,6,};\n    char *p =ac;//--&gt;\u7b49\u4ef7*p=&amp;ac[0]\n    char *p1=&amp;ac[5];\n    printf(\"p= %p\\n\",p);//p= 0000008992bff7c6\n    printf(\"p1= %p\\n\",p1);//p1= 0000008992bff7cb\n    printf(\"p1-p= %p\\n\",p1-p);//p1-p= 5\n\n    //0000008992bff7c6[HEX] - 0000008992bff7cb[HEX]= 5[DEC]\u2192 sizeof(char)*5\n\n    int ai[]={0,1,2,3,4,5,6,};\n    int *q =ai;\n    int *q1=&amp;ai[6];\n    printf(\"q= %p\\n\",q);//q= 00000039e4bffaf0\n    printf(\"q1= %p\\n\",q1);//q1= 00000039e4bffb08\n    printf(\"q1-q= %p\\n\",q1-q);//q1-q= 6\n\n    //00000039e4bffb08[HEX] - 00000039e4bffaf0[HEX]= 24[DEC]\u2192 sizeof(int)*6\n}\n</code></pre>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#p","title":"<code>*p++</code>","text":"<pre><code>int main(void) {\n    char ac[]={0,1,2,3,4,5,6,7,8,9,-1,};\n    char *p =&amp;ac[0];\n//\u7b2c\u4e00\u79cd\u904d\u5386\n    for(int i=0;i&lt;sizeof(ac)/sizeof(ac[0]);i++) {\n        printf(\"%d\\n\",ac[i]);\n    }\n//\u7b2c\u4e8c\u79cd\u904d\u5386\n    while(*p!=-1) {\n        printf(\"%d\\n\",*p++);\n    }\n}\n</code></pre>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#0","title":"<code>0</code>\u5730\u5740","text":"<pre><code>stateDiagram\n0\u5730\u5740\u53ef\u4ee5\u7528\u6765\u8868\u793a\u7279\u6b8a\u4e8b\u60c5--&gt;\u8fd4\u56de\u6307\u9488\u65e0\u6548\n0\u5730\u5740\u53ef\u4ee5\u7528\u6765\u8868\u793a\u7279\u6b8a\u4e8b\u60c5--&gt;\u6307\u9488\u6ca1\u6709\u88ab\u521d\u59cb\u5316</code></pre> <p>\u6307\u9488\u4e0d\u5e94\u8be5\u5177\u67090\u503c</p> <p><code>NULL</code>\u662f\u4e00\u4e2a\u9884\u5b9a\u5b9a\u4e49\u7684\u7b26\u53f7\uff0c\u8868\u793a<code>0</code>\u5730\u5740</p> <ul> <li>\u6709\u7684\u7f16\u8bd1\u5668\u4e0d\u613f\u610f\u4f60\u7528<code>0</code>\u6765\u8868\u793a<code>0</code>\u5730\u5740</li> </ul>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_11","title":"\u6307\u9488\u7c7b\u578b","text":"<p>\u6307\u5411\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u9488\u4e0d\u80fd\u4e92\u76f8\u76f4\u63a5\u8d4b\u503c\u2190\u4e3a\u907f\u514d\u7528\u9519\u6307\u9488</p>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_12","title":"\u6307\u9488\u7c7b\u578b\u8f6c\u6362","text":"<p><code>void*</code> \u8868\u793a\u4e0d\u77e5\u9053\u6307\u5411\u4ec0\u4e48\u4e1c\u897f\u7684\u6307\u9488</p> <pre><code>int *p =&amp;i;\nvoid *q=(void*)p;\n//\u901a\u8fc7p\u770bi\u662fint\uff1b\u901a\u8fc7q\u770bi\u662fvoid\n</code></pre> <pre><code>stateDiagram\np--&gt;i :int\nq--&gt;i :void</code></pre>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#922","title":"9.2.2","text":""},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_13","title":"\u52a8\u6001\u5185\u5b58\u5206\u914d","text":"<p>C99\u80fd\u7528\u53d8\u91cf\u505a\u6570\u7ec4\u5b9a\u4e49\u7684\u5927\u5c0f\uff0c\u4e4b\u524d\u5462\uff1f</p> <pre><code>int *a=(*int)malloc(*n*sizeof(int));\n//(int*) \u5c06 void* \u7c7b\u578b\u7684\u6307\u9488\u5f3a\u5236\u8f6c\u6362\u4e3a int* \u7c7b\u578b\u7684\u6307\u9488\uff0c\u4f7f\u5176\u53ef\u4ee5\u6307\u5411\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\n</code></pre> <pre><code>//malloc\u6307\u4ee4\u5b9e\u8d28\nvoid *           malloc(size_t _Size);\n//\u6307\u9488\u6307\u5411\u5185\u5b58                  \u5f53\u4f5c\u6574\u6570  \n</code></pre> <pre><code>int main() {\n\n    int number;\n    int *a;\n    int i;\n    printf(\"Enter number:\");\n    scanf(\"%d\", &amp;number);//malloc \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a void* \u7c7b\u578b\u7684\u6307\u9488\n    a=(int*)malloc(number*sizeof(int));\n    for(i=0;i&lt;number;i++) {\n        scanf(\"%d\",&amp;a[i]);\n    }\n\n    for(i=number-1;i&gt;=0;i--) {\n        printf(\"%d\",a[i]);\n    }\n\n    free(a);// \u91ca\u653e\u4e4b\u524d\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\n\n    return 0;\n}\n</code></pre>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_14","title":"\u6ca1\u7a7a\u95f4\u4e86\uff1f","text":"<p>\u7533\u8bf7\u5931\u8d25\u8fd4\u56de<code>NULL(0)</code></p> <pre><code>int main(void) {\n    void *p;// \u5b9a\u4e49\u4e00\u4e2a\u6307\u5411 void \u7c7b\u578b\u7684\u6307\u9488\u53d8\u91cf p\uff0c\u7528\u4e8e\u5b58\u653e malloc \u5206\u914d\u7684\u5185\u5b58\u5730\u5740\n    int count=0;\n    while((p=malloc(100*1024*1024))) {//malloc \u51fd\u6570\u5c1d\u8bd5\u5206\u914d 100MB \u7684\u5185\u5b58\uff08100 * 1024 * 1024 \u5b57\u8282\uff09\n        count++;\n    }\n    printf(\"%d\\n\",count);//Given 58800MB of memory space\n    return 0;\n}\n</code></pre>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#free","title":"<code>free()</code>","text":"<ul> <li>\u628a\u7533\u8bf7\u8fc7\u7684\u7a7a\u95f4\u8fd8\u7ed9\u201c\u7cfb\u7edf\u201d</li> <li>\u53ea\u80fd\u8fd8\u7533\u8bf7\u6765\u7684\u7a7a\u95f4\u7684\u9996\u5730\u5740</li> </ul> <p>\u826f\u597d\u4e60\u60ef\uff1a\u5b9a\u4e49\u6307\u9488\u5c31\u521d\u59cb\u4e3a0</p>"},{"location":"C/9%20%E3%80%81%E6%8C%87%E9%92%88/#_15","title":"\u5e38\u89c1\u95ee\u9898","text":"<ul> <li>\u7533\u8bf7\u4e86\u6ca1\u6709`free\u2192\u957f\u65f6\u95f4\u8fd0\u884c\u5185\u5b58\u9010\u6e10\u4e0b\u964d</li> <li><code>free</code>\u8fc7\u4e86\u518d<code>free</code></li> <li>\u5730\u5740\u53d8\u8fc7\u4e86\uff0c\u76f4\u63a5\u53bb<code>free</code></li> </ul>"},{"location":"DataStruct/1%20%E3%80%81%E6%A6%82%E8%BF%B0/","title":"1 \u3001\u6982\u8ff0","text":"\u6982\u8ff0  <p>\u6570\u636e\u7ed3\u6784\u662f\u5728\u8ba1\u7b97\u673a\u4e2d\u5b58\u50a8\u3001\u7ec4\u7ec7\u6570\u636e\u7684\u65b9\u5f0f\u3002\u5c0f\u5230\u53d8\u91cf\u3001\u6570\u7ec4\uff0c\u5927\u5230\u7ebf\u6bb5\u6811\u3001\u5e73\u8861\u6811\uff0c\u90fd\u662f\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u7a0b\u5e8f\u8fd0\u884c\u79bb\u4e0d\u5f00\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\u53c8\u5404\u6709\u4f18\u52a3\uff0c\u80fd\u591f\u5904\u7406\u7684\u95ee\u9898\u5404\u4e0d\u76f8\u540c\uff0c\u800c\u6839\u636e\u5177\u4f53\u95ee\u9898\u9009\u53d6\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u5927\u5927\u63d0\u5347\u7a0b\u5e8f\u7684\u6548\u7387\u3002\u6240\u4ee5\uff0c\u5b66\u4e60\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u7ed3\u6784\u662f\u5f88\u6709\u5fc5\u8981\u7684\u3002</p> <ul> <li>\u4e00\u3001\u6570\u636e\u7ed3\u6784\u57fa\u672c\u6982\u5ff5</li> <li>\u4e8c\u3001\u7b97\u6cd5\u57fa\u672c\u6982\u5ff5<ul> <li>\u7b97\u6cd5\u7279\u6027</li> </ul> </li> <li>\u4e09\u3001\u603b\u7ed3</li> </ul>"},{"location":"DataStruct/1%20%E3%80%81%E6%A6%82%E8%BF%B0/#_1","title":"\u4e00\u3001\u6570\u636e\u7ed3\u6784\u57fa\u672c\u6982\u5ff5","text":"<p>Note</p> <ul> <li> <p>\u6570\u636e\u7684\u5b58\u50a8\u7ed3\u6784\u4f1a\u5f71\u54cd\u5b58\u50a8\u7a7a\u95f4\u5206\u914d\u7684\u65b9\u4fbf\u7a0b\u5ea6</p> </li> <li> <p>\u6570\u636e\u7684\u5b58\u50a8\u7ed3\u6784\u4f1a\u5f71\u54cd\u5bf9\u6570\u636e\u8fd0\u7b97\u7684\u901f\u5ea6 </p> </li> </ul> <p>Info</p> <p>\ud83c\udf1f\u62bd\u8c61\u6570\u636e\u7c7b\u578b</p> <ul> <li> <p>\u62bd\u8c61\u6570\u636e\u7c7b\u578b</p> <p>\u62bd\u8c61\u6570\u636e\u7c7b\u578b(Abstract Data Type,ADT)\u662f\u62bd\u8c61\u6570\u636e\u7ec4\u7ec7\u53ca\u4e0e\u4e4b\u76f8\u5173\u7684\u64cd\u4f5c\ud83d\udc49\u4e0d\u6d89\u53ca\u5177\u4f53\u5b9e\u73b0\u3002</p> </li> </ul>"},{"location":"DataStruct/1%20%E3%80%81%E6%A6%82%E8%BF%B0/#_2","title":"\u4e8c\u3001\u7b97\u6cd5\u57fa\u672c\u6982\u5ff5","text":"\\[ \u7a0b\u5e8f=\u6570\u636e\u7ed3\u6784+\u7b97\u6cd5 \\]"},{"location":"DataStruct/1%20%E3%80%81%E6%A6%82%E8%BF%B0/#_3","title":"\u7b97\u6cd5\u7279\u6027","text":"\u7279\u6027 \u63cf\u8ff0 \u2460 \u6709\u7a77\u6027 \u7a0b\u5e8f\u53ef\u4ee5\u662f\u65e0\u7a77\u7684\uff08\u8fd9\u4e2a\u63cf\u8ff0\u4f3c\u4e4e\u6709\u8bef\uff0c\u6709\u7a77\u6027\u610f\u5473\u7740\u7a0b\u5e8f\u5728\u6709\u9650\u65f6\u95f4\u5185\u7ed3\u675f\uff09 \u2461 \u786e\u5b9a\u6027 \u76f8\u540c\u8f93\u5165\u5f97\u5230\u76f8\u540c\u8f93\u51fa \u2462 \u53ef\u884c\u6027 \u8f93\u5165\uff1a0/\u591a\u4e2a\uff1b\u8f93\u51fa\uff1a1/\u591a\u4e2a \u2463 \u8f93\u5165 \u2464 \u8f93\u51fa"},{"location":"DataStruct/1%20%E3%80%81%E6%A6%82%E8%BF%B0/#_4","title":"\u4e09\u3001\u603b\u7ed3","text":"<p>Tip</p> <p>\u65f6\u95f4/\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u8861\u91cf</p> <p></p>"},{"location":"DataStruct/10%20%E3%80%81%E5%89%8D%E7%BC%80%E5%92%8C/","title":"10 \u3001\u524d\u7f00\u548c","text":"<ul> <li>1\u3001\u89e3\u91ca</li> <li>2\u3001\u4e00\u7ef4\u524d\u7f00\u548c</li> <li>3\u3001\u4e8c\u7ef4\u524d\u7f00\u548c</li> <li>\u4f8b\u9898<ul> <li>e.g.18\u3010\u6df1\u8fdb1.\u4f8b1\u3011\u6c42\u533a\u95f4\u548c</li> <li>e.g.19 [\u84dd\u6865\u676f 2022 \u7701 A] \u6c42\u548c</li> <li>e.g.20 \u53ef\u83b7\u5f97\u7684\u6700\u5c0f\u503c</li> <li>e.g.21 [\u84dd\u6865\u676f 2024 \u7701 A] \u8bad\u7ec3\u58eb\u5175</li> <li>e.g.22 \u9886\u5730\u9009\u62e9</li> </ul> </li> </ul>"},{"location":"DataStruct/10%20%E3%80%81%E5%89%8D%E7%BC%80%E5%92%8C/#1","title":"1\u3001\u89e3\u91ca","text":"<pre><code>// \u539f\u59cb\u6570\u7ec4\uff1a\ncoins[] = {0, 3, 5, 2, 1, 4}\n\n// \u524d\u7f00\u548c\u8ba1\u7b97\u8fc7\u7a0b\uff1a\nprefix[1] = prefix[0] + coins[1] = 0 + 3 = 3\nprefix[2] = prefix[1] + coins[2] = 3 + 5 = 8\nprefix[3] = prefix[2] + coins[3] = 8 + 2 = 10\nprefix[4] = prefix[3] + coins[4] = 10 + 1 = 11\nprefix[5] = prefix[4] + coins[5] = 11 + 4 = 15\n\n// \u6c42\u533a\u95f4[L,R]\u7684\u548c\u7684\u516c\u5f0f\uff1a\nsum = prefix[R] - prefix[L-1]\n\n//\u4f8b\u5982\u6c42[2,4]\u7684\u548c\uff1a\nsum = prefix[4] - prefix[1] = 11 - 3 = 8\n</code></pre>"},{"location":"DataStruct/10%20%E3%80%81%E5%89%8D%E7%BC%80%E5%92%8C/#2","title":"2\u3001\u4e00\u7ef4\u524d\u7f00\u548c","text":"<pre><code>// \u4e00\u7ef4\u524d\u7f00\u548c\u7684\u6807\u51c6\u6a21\u677f\nconst int N = 100010;\nint a[N];     // \u539f\u59cb\u6570\u7ec4\nint s[N];     // \u524d\u7f00\u548c\u6570\u7ec4\nint n;        // \u6570\u7ec4\u957f\u5ea6\n\n// 1. \u6784\u5efa\u524d\u7f00\u548c\ns[0] = 0;  // \u521d\u59cb\u5316\uff0c\u9632\u6b62\u8d8a\u754c\uff08\u91cd\u8981\uff01\uff09\nfor(int i = 1; i &lt;= n; i++) {\n    s[i] = s[i-1] + a[i];\n}\n\n// 2. \u533a\u95f4\u548c\u67e5\u8be2\n// \u67e5\u8be2\u533a\u95f4[l,r]\u7684\u548c\nint query(int l, int r) {\n    return s[r] - s[l-1];\n}\n</code></pre> <p>Tip</p> <p>\u7528\u6765\u8ba1\u7b97\u8fde\u7eed\u6570\u5b57\u7684\u548c\ud83d\udc49\u63d0\u9ad8\u6548\u7387</p>"},{"location":"DataStruct/10%20%E3%80%81%E5%89%8D%E7%BC%80%E5%92%8C/#3","title":"3\u3001\u4e8c\u7ef4\u524d\u7f00\u548c","text":"<pre><code>// \u4e8c\u7ef4\u524d\u7f00\u548c\u6a21\u677f\nconst int N = 1010;\nint a[N][N];    // \u539f\u59cb\u6570\u7ec4\nint s[N][N];    // \u524d\u7f00\u548c\u6570\u7ec4\n\n// \u6784\u5efa\u4e8c\u7ef4\u524d\u7f00\u548c\nvoid init(int n, int m) {\n    for(int i = 1; i &lt;= n; i++) {\n        for(int j = 1; j &lt;= m; j++) {\n            s[i][j] = s[i-1][j] + s[i][j-1] - s[i-1][j-1] + a[i][j];\n        }\n    }\n}\n\n// \u67e5\u8be2\u5b50\u77e9\u9635\u548c (x1,y1)\u5230(x2,y2)\nint query(int x1, int y1, int x2, int y2) {\n    return s[x2][y2] - s[x2][y1-1] - s[x1-1][y2] + s[x1-1][y1-1];\n}\n</code></pre>"},{"location":"DataStruct/10%20%E3%80%81%E5%89%8D%E7%BC%80%E5%92%8C/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/10%20%E3%80%81%E5%89%8D%E7%BC%80%E5%92%8C/#eg1811","title":"e.g.18\u3010\u6df1\u8fdb1.\u4f8b1\u3011\u6c42\u533a\u95f4\u548c","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u5b9a \\(n\\) \u4e2a\u6b63\u6574\u6570\u7ec4\u6210\u7684\u6570\u5217 \\(a_1, a_2, \\cdots, a_n\\) \u548c \\(m\\) \u4e2a\u533a\u95f4 \\([l_i,r_i]\\)\uff0c\u5206\u522b\u6c42\u8fd9 \\(m\\) \u4e2a\u533a\u95f4\u7684\u533a\u95f4\u548c\u3002</p> <p>\u5bf9\u4e8e\u6240\u6709\u6d4b\u8bd5\u6570\u636e\uff0c\\(n,m\\le10^5,a_i\\le 10^4\\)</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\uff0c\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\) \u3002</p> <p>\u7b2c\u4e8c\u884c\uff0c\u4e3a \\(n\\) \u4e2a\u6b63\u6574\u6570 \\(a_1,a_2, \\cdots ,a_n\\)</p> <p>\u7b2c\u4e09\u884c\uff0c\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570 \\(m\\) \u3002</p> <p>\u63a5\u4e0b\u6765 \\(m\\) \u884c\uff0c\u6bcf\u884c\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570 \\(l_i,r_i\\) \uff0c\u6ee1\u8db3\\(1\\le l_i\\le r_i\\le n\\)</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u5171 \\(m\\) \u884c\u3002</p> <p>\u7b2c \\(i\\) \u884c\u4e3a\u7b2c \\(i\\) \u7ec4\u7b54\u6848\u7684\u8be2\u95ee\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>4\n4 3 2 1\n2\n1 4\n2 3\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>10\n5\n</code></pre> <p>\u63d0\u793a</p> <p>\u6837\u4f8b\u89e3\u91ca\uff1a\u7b2c \\(1\\) \u5230\u7b2c \\(4\\) \u4e2a\u6570\u52a0\u8d77\u6765\u548c\u4e3a \\(10\\)\u3002\u7b2c \\(2\\) \u4e2a\u6570\u5230\u7b2c \\(3\\) \u4e2a\u6570\u52a0\u8d77\u6765\u548c\u4e3a \\(5\\)\u3002</p> <p>\u5bf9\u4e8e \\(50 \\%\\) \u7684\u6570\u636e\uff1a\\(n,m\\le 1000\\)\uff1b</p> <p>\u5bf9\u4e8e \\(100 \\%\\) \u7684\u6570\u636e\uff1a\\(1 \\le n, m\\le 10^5\\)\uff0c\\(1 \\le a_i\\le 10^4\\)</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int n, m;\n    cin &gt;&gt; n;\n    int arr[100000];\n    int s[100000];\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; arr[i];\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        s[i] = s[i - 1] + arr[i]; // \u524d\u7f00\u548c\n    }\n    cin &gt;&gt; m;\n    while (m--) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        cout &lt;&lt; s[r] - s[l - 1] &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/10%20%E3%80%81%E5%89%8D%E7%BC%80%E5%92%8C/#eg19-2022-a","title":"e.g.19 [\u84dd\u6865\u676f 2022 \u7701 A] \u6c42\u548c","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u5b9a \\(n\\) \u4e2a\u6574\u6570 \\(a_{1}, a_{2}, \\cdots, a_{n}\\), \u6c42\u5b83\u4eec\u4e24\u4e24\u76f8\u4e58\u518d\u76f8\u52a0\u7684\u548c\uff0c\u5373</p> \\[ S=a_{1} \\cdot a_{2}+a_{1} \\cdot a_{3}+\\cdots+a_{1} \\cdot a_{n}+a_{2} \\cdot a_{3}+\\cdots+a_{n-2} \\cdot a_{n-1}+a_{n-2} \\cdot a_{n}+a_{n-1} \\cdot a_{n} \\] <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 \\(n\\) \u3002</p> <p>\u7b2c\u4e8c\u884c\u5305\u542b \\(n\\) \u4e2a\u6574\u6570 \\(a_{1}, a_{2}, \\cdots a_{n}\\) \u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570 \\(S\\)\uff0c\u8868\u793a\u6240\u6c42\u7684\u548c\u3002\u8bf7\u4f7f\u7528\u5408\u9002\u7684\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u8fd0\u7b97\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>4\n1 3 6 9\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>117\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e \\(30 \\%\\) \u7684\u6570\u636e, \\(1 \\leq n \\leq 1000,1 \\leq a_{i} \\leq 100\\) \u3002</p> <p>\u5bf9\u4e8e\u6240\u6709\u8bc4\u6d4b\u7528\u4f8b, \\(1 \\leq n \\leq 2\\times10^5,1 \\leq a_{i} \\leq 1000\\) \u3002 </p> <p>\u84dd\u6865\u676f 2022 \u7701\u8d5b A \u7ec4 C \u9898\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nll n, ans, a[1000000], s[1000000];\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    for (int i = 1; i &lt;= n; i++) { // \u5faa\u73af\u8ba1\u7b97\u524d\u7f00\u548c\n        s[i] = s[i - 1] + a[i];    // \u524d\u7f00\u548cs[i]\u662f\u5f53\u524d\u5143\u7d20a[i]\u52a0\u4e0a\u524d\u4e00\u4e2a\u524d\u7f00\u548cs[i-1]\n    }\n    for (int i = 1; i &lt;= n; i++) {   // \u5faa\u73af\u8ba1\u7b97\u6700\u7ec8\u7ed3\u679c\n        ans += a[i] * (s[n] - s[i]); // \u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20a[i]\uff0c\u8ba1\u7b97\u5176\u4e0e\u5269\u4f59\u6240\u6709\u5143\u7d20\u7684\u548c\u7684\u4e58\u79ef\uff0c\u7d2f\u52a0\u5230ans\n    }\n    cout &lt;&lt; ans;\n}\n</code></pre>"},{"location":"DataStruct/10%20%E3%80%81%E5%89%8D%E7%BC%80%E5%92%8C/#eg20","title":"e.g.20 \u53ef\u83b7\u5f97\u7684\u6700\u5c0f\u503c","text":"<p>\u95ee\u9898\u63cf\u8ff0</p> <p>\u59ae\u59ae\u5b66\u59d0\u624b\u5934\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(a\\)\uff0c\u5979\u60f3\u8fdb\u884c \\(k\\) \u6b21\u64cd\u4f5c\u6765\u53d6\u51fa\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u3002\u6bcf\u6b21\u64cd\u4f5c\u5fc5\u987b\u9009\u62e9\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u4e4b\u4e00\uff1a</p> <ul> <li>\u53d6\u51fa\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20\u3002</li> <li>\u53d6\u51fa\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u548c\u6b21\u5c0f\u5143\u7d20\u3002</li> </ul> <p>\u59ae\u59ae\u5b66\u59d0\u5e0c\u671b\u5728\u8fdb\u884c\u5b8c \\(k\\) \u6b21\u64cd\u4f5c\u540e\uff0c\u53d6\u51fa\u7684\u6570\u7684\u548c\u6700\u5c0f\u3002\u5979\u611f\u89c9\u6709\u4e9b\u56f0\u96be\uff0c\u4e8e\u662f\u8bf7\u64c5\u957f\u8d2a\u5fc3\u7684\u4f60\u5e2e\u52a9\u5979\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570\\(n\\)\u548c\\(k\\) \uff0c\u8868\u793a\u6570\u7ec4\u957f\u5ea6\u548c\u64cd\u4f5c\u6b21\u6570\u3002</p> <p>\u7b2c\u4e8c\u884c\u8f93\u5165\\(n\\)\u4e2a\u6574\u6570\u8868\u793a\u6570\u7ec4 \\(a\\) \u3002</p> <p>\u6570\u636e\u8303\u56f4\u4fdd\u8bc1 \\(3\u2264n\u22642\u00d710^5\uff0c1\u2264a_i\u226410^9\uff0c1\u2264k\u226499999\uff0c2k&lt;n\\) \u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u6837\u4f8b\u8f93\u5165</p> <pre><code>5 1\n2 5 1 10 6\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa</p> <pre><code>3\n</code></pre> <p>\u8bf4\u660e</p> <p>\u5bf9\u4e8e\u6837\u4f8b\uff0c\u6211\u4eec\u901a\u8fc7\u64cd\u4f5c \\(2\\)\u53d6\u51fa \\(1\\) \u548c \\(2\\) \u53ef\u4ee5\u83b7\u5f97\u6700\u5c0f\u503c</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N = 2e5 + 10;\nll n, k, ans, a[N], s[N];\nint main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    sort(a + 1, a + 1 + n);\n    for (int i = 1; i &lt;= n; i++)\n        s[i] = s[i - 1] + a[i];\n    ll ans = 1e18;\n    for (int i = 0; i &lt;= k; i++)\n        ans = min(ans, s[n] - s[n - i] + s[2 * k - 2 * i]);\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/10%20%E3%80%81%E5%89%8D%E7%BC%80%E5%92%8C/#eg21-2024-a","title":"e.g.21 [\u84dd\u6865\u676f 2024 \u7701 A] \u8bad\u7ec3\u58eb\u5175","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5728\u84dd\u6865\u738b\u56fd\u4e2d\uff0c\u6709 \\(n\\) \u540d\u58eb\u5175\uff0c\u8fd9\u4e9b\u58eb\u5175\u9700\u8981\u63a5\u53d7\u4e00\u7cfb\u5217\u7279\u6b8a\u7684\u8bad\u7ec3\uff0c\u4ee5\u63d0\u5347\u4ed6\u4eec\u7684\u6218\u6597\u6280\u80fd\u3002\u5bf9\u4e8e\u7b2c \\(i\\) \u540d\u58eb\u5175\u6765\u8bf4\uff0c\u8fdb\u884c\u4e00\u6b21\u8bad\u7ec3\u6240\u9700\u7684\u6210\u672c\u4e3a \\(p_i\\) \u679a\u91d1\u5e01\uff0c\u800c\u8981\u60f3\u6210\u4e3a\u9876\u5c16\u6218\u58eb\uff0c\u4ed6\u81f3\u5c11\u9700\u8981\u8fdb\u884c \\(c_i\\) \u6b21\u8bad\u7ec3\u3002 \u4e3a\u4e86\u786e\u4fdd\u8bad\u7ec3\u7684\u9ad8\u6548\u6027\uff0c\u738b\u56fd\u63a8\u51fa\u4e86\u4e00\u79cd\u7ec4\u56e2\u8bad\u7ec3\u7684\u65b9\u6848\u3002\u8be5\u65b9\u6848\u5305\u542b\u6bcf\u4f4d\u58eb\u5175\u6240\u9700\u7684\u4e00\u6b21\u8bad\u7ec3\uff0c\u4e14\u603b\u5171\u53ea\u9700\u652f\u4ed8 \\(S\\) \u679a\u91d1\u5e01\uff08\u7ec4\u56e2\u8bad\u7ec3\u65b9\u6848\u53ef\u4ee5\u591a\u6b21\u8d2d\u4e70\uff0c\u5373\u58eb\u5175\u53ef\u4ee5\u8fdb\u884c\u591a\u6b21\u7ec4\u56e2\u8bad\u7ec3\uff09\u3002 \u4f5c\u4e3a\u8bad\u7ec3\u6307\u6325\u5b98\uff0c\u8bf7\u4f60\u8ba1\u7b97\u51fa\u6700\u5c11\u9700\u8981\u82b1\u8d39\u591a\u5c11\u91d1\u5e01\uff0c\u624d\u80fd\u4f7f\u5f97\u6240\u6709\u7684\u58eb\u5175\u90fd\u6210\u4e3a\u9876\u5c16\u6218\u58eb\uff1f</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(n\\) \u548c \\(S\\)\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u8868\u793a\u58eb\u5175\u7684\u6570\u91cf\u548c\u8fdb\u884c\u4e00\u6b21\u7ec4\u56e2\u8bad\u7ec3\u6240\u9700\u7684\u91d1\u5e01\u6570\u3002 \u63a5\u4e0b\u6765\u7684 \\(n\\) \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(p_i\\) \u548c \\(c_i\\)\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u8868\u793a\u7b2c \\(i\\) \u540d\u58eb\u5175\u8fdb\u884c\u4e00\u6b21\u8bad\u7ec3\u7684\u91d1\u5e01\u6210\u672c\u548c\u8981\u6210\u4e3a\u9876\u5c16\u6218\u58eb\u6240\u9700\u7684\u8bad\u7ec3\u6b21\u6570\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4f7f\u6240\u6709\u58eb\u5175\u6210\u4e3a\u9876\u5c16\u6218\u58eb\u6240\u9700\u7684\u6700\u5c11\u91d1\u5e01\u6570\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>3 6\n5 2\n2 4\n3 2\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>16\n</code></pre> <p>\u63d0\u793a</p> <p>\u82b1\u8d39\u91d1\u5e01\u6700\u5c11\u7684\u8bad\u7ec3\u65b9\u5f0f\u4e3a\uff1a\u8fdb\u884c \\(2\\) \u6b21\u7ec4\u56e2\u8bad\u7ec3\uff0c\u82b1\u8d39 \\(2 \u00d7 6 = 12\\) \u679a\u91d1\u5e01\uff0c\u6b64\u65f6\u58eb\u5175 \\(1, 3\\) \u5df2\u6210\u4e3a\u9876\u5c16\u6218\u58eb\uff1b\u518d\u82b1\u8d39 \\(4\\) \u679a\u91d1\u5e01\uff0c\u8ba9\u58eb\u5175 \\(2\\) \u8fdb\u884c\u4e24\u6b21\u8bad\u7ec3\uff0c\u6210\u4e3a\u9876\u5c16\u6218\u58eb\u3002\u603b\u82b1\u8d39\u4e3a \\(12 + 4 = 16\\)\u3002</p> <p>\u5bf9\u4e8e \\(40\\%\\) \u7684\u8bc4\u6d4b\u7528\u4f8b\uff0c\\(1 \u2264 n \u2264 10^3\uff0c1 \u2264 p_i , c_i \u2264 10^5\uff0c1 \u2264 S \u2264 10^7\\)\u3002</p> <p>\u5bf9\u4e8e\u6240\u6709\u8bc4\u6d4b\u7528\u4f8b\uff0c\\(1 \u2264 n \u2264 10^5\uff0c1 \u2264 p_i , c_i \u2264 10^6\uff0c1 \u2264 S \u2264 10^{10}\\)\u3002</p>"},{"location":"DataStruct/10%20%E3%80%81%E5%89%8D%E7%BC%80%E5%92%8C/#eg22","title":"e.g.22 \u9886\u5730\u9009\u62e9","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4f5c\u4e3a\u5728\u865a\u62df\u4e16\u754c\u91cc\u7edf\u5e05\u5343\u519b\u4e07\u9a6c\u7684\u9886\u8896\uff0c\u5c0f Z \u8ba4\u4e3a\u5929\u65f6\u3001\u5730\u5229\u3001\u4eba\u548c\u4e09\u8005\u662f\u7f3a\u4e00\u4e0d\u53ef\u7684\uff0c\u6240\u4ee5\uff0c\u8c28\u614e\u5730\u9009\u62e9\u9996\u90fd\u7684\u4f4d\u7f6e\u5bf9\u4e8e\u5c0f Z \u6765\u8bf4\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002</p> <p>\u9996\u90fd\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5360\u5730 \\(C\\times C\\) \u7684\u6b63\u65b9\u5f62\u3002\u5c0f Z \u5e0c\u671b\u4f60\u5bfb\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u9996\u90fd\u6240\u5360\u9886\u7684\u4f4d\u7f6e\u7684\u571f\u5730\u4ef7\u503c\u548c\u6700\u9ad8\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e09\u4e2a\u6574\u6570 \\(N,M,C\\)\uff0c\u8868\u793a\u5730\u56fe\u7684\u5bbd\u548c\u957f\u4ee5\u53ca\u9996\u90fd\u7684\u8fb9\u957f\u3002</p> <p>\u63a5\u4e0b\u6765 \\(N\\) \u884c\u6bcf\u884c \\(M\\) \u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e86\u5730\u56fe\u4e0a\u6bcf\u4e2a\u5730\u5757\u7684\u4ef7\u503c\u3002\u4ef7\u503c\u53ef\u80fd\u4e3a\u8d1f\u6570\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(X,Y\\)\uff0c\u8868\u793a\u9996\u90fd\u5de6\u4e0a\u89d2\u7684\u5750\u6807\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>3 4 2\n1 2 3 1\n-1 9 0 2\n2 0 1 1\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>1 2\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e \\(60\\%\\) \u7684\u6570\u636e\uff0c\\(N,M\\le 50\\)\u3002</p> <p>\u5bf9\u4e8e \\(90\\%\\) \u7684\u6570\u636e\uff0c\\(N,M\\le 300\\)\u3002</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1\\le N,M\\le 10^3\\)\uff0c\\(1\\le C\\le \\min(N,M)\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int n = 1005;\nint N, M, C, a[n][n], s[n][n], ansX, ansY;\nint main() {\n    cin &gt;&gt; N &gt;&gt; M &gt;&gt; C;\n    for (int i = 1; i &lt;= N; i++) {\n        for (int j = 1; j &lt;= M; j++) {\n            cin &gt;&gt; a[i][j];\n        }\n    }\n    // \u6784\u5efa\u4e8c\u7ef4\u524d\u7f00\u548c\n    for (int i = 1; i &lt;= N; i++) {\n        for (int j = 1; j &lt;= M; j++) {\n            s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j];\n        }\n    }\n    /*\n    \u601d\u8def\uff1a\n    x2=x1+C-1\n    y2=y1+C-1\n    return s[x2][y2] - s[x2][y1-1] - s[x1-1][y2] + s[x1-1][y1-1];\n    */\n    int maxVal = -1e9;\n    for (int x1 = 1; x1 &lt;= N - C + 1; x1++) { // \u5343\u4e07\u6ce8\u610f\u622a\u81f3\u8fb9\u754c\n        for (int y1 = 1; y1 &lt;= M - C + 1; y1++) {\n            int temp = s[x1 + C - 1][y1 + C - 1] - s[x1 + C - 1][y1 - 1] - s[x1 - 1][y1 + C - 1] + s[x1 - 1][y1 - 1];\n            if (temp &gt; maxVal) {\n                maxVal = temp;\n                ansX = x1;\n                ansY = y1;\n            }\n        }\n    }\n    cout &lt;&lt; ansX &lt;&lt; \" \" &lt;&lt; ansY;\n}\n</code></pre>"},{"location":"DataStruct/11%20%E3%80%81%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/","title":"11 \u3001\u5dee\u5206\u6570\u7ec4","text":"<ul> <li>1\u3001\u89e3\u91ca</li> <li>2\u3001\u5e38\u89c1\u601d\u8def</li> <li>\u4f8b\u9898<ul> <li>e.g.23 \u91cd\u65b0\u6392\u5e8f</li> <li>e.g.24 [NewOJ Week 6] \u63a8\u7bb1\u5b50</li> <li>e.g.25  \u68cb\u76d8</li> </ul> </li> </ul>"},{"location":"DataStruct/11%20%E3%80%81%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/#1","title":"1\u3001\u89e3\u91ca","text":"<p>Tip</p> <p>\u5dee\u5206\u6570\u7ec4\u8bb0\u5f55\u7684\u662f\u539f\u6765\u6570\u7ec4\u76f8\u90bb\u5143\u7d20\u7684\u5dee\u503c</p> <p>\u8981\u5bf9\u4e00\u4e2a\u533a\u95f4\u52a0\u4e0a\u6216\u8005\u51cf\u53bb\u4e00\u4e2a\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ec5\u4fee\u6539\u5dee\u5206\u6570\u7ec4\u7684\u4e24\u4e2a\u7aef\u70b9\u6765\u5b9e\u73b0\uff0c\u800c\u4e0d\u904d\u5386\u6574\u4e2a\u533a\u95f4\u3002</p> <p>\u5dee\u5206\u65f6\u95f4\u590d\u6742\u5ea6\uff1a <code>O(1)</code></p> <p>\u904d\u5386\u6570\u7ec4\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n)</code></p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[100] = {0, 1, 2, 3, 4, 5, 6, 7};\nint b[100];\nint main() {\n    int n=7;\n    /*\n    \u533a\u95f42-5\u90fd\u52a03\n    b[6]\u8981\u5148-3\uff0c\u518d\u52a03\uff0c\u6700\u540e\u662f0\n    */\n    b[2] += 3, b[6] -= 3;\n    for (int i = 0; i &lt; n; i++) {\n        b[i] += b[i - 1];\n    }\n    for(int i=0;i&lt;n;i++){\n        a[i]+=b[i];\n    }\n    for(int i=0;i&lt;n;i++){\n        cout&lt;&lt;a[i];\n    }\n    cout&lt;&lt;endl;\n    for(int i=0;i&lt;n;i++){\n        cout&lt;&lt;b[i];\n    }\n}\n/*\n\u7528\u4e8e\u5feb\u901f\u4fee\u6539\u5927\u91cf\u6570\u7ec4\uff0c\u800c\u4e0d\u7206\u65f6\u95f4\u590d\u6742\u5ea6\n*/\n</code></pre>"},{"location":"DataStruct/11%20%E3%80%81%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/#2","title":"2\u3001\u5e38\u89c1\u601d\u8def","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 100010;  // \u6839\u636e\u9898\u76ee\u8303\u56f4\u4fee\u6539\n\nint a[N];     // \u539f\u6570\u7ec4\nint d[N];     // \u5dee\u5206\u6570\u7ec4\nint n;        // \u6570\u7ec4\u957f\u5ea6\n\n// \u6784\u5efa\u5dee\u5206\u6570\u7ec4\nvoid init() {\n    d[0] = a[0];\n    for(int i = 1; i &lt; n; i++) {\n        d[i] = a[i] - a[i-1];\n    }\n}\n\n// \u533a\u95f4\u52a0\u64cd\u4f5c\nvoid add(int l, int r, int val) {\n    d[l] += val;\n    d[r + 1] -= val;\n}\n\n// \u8fd8\u539f\u539f\u6570\u7ec4\nvoid get_origin() {\n    a[0] = d[0];\n    for(int i = 1; i &lt; n; i++) {\n        a[i] = a[i-1] + d[i];\n    }\n}\n\nint main() {\n    int m;  // \u64cd\u4f5c\u6b21\u6570\n    cin &gt;&gt; n &gt;&gt; m;\n    // \u8bfb\u5165\u539f\u6570\u7ec4\n    for(int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }    \n    // \u6784\u5efa\u5dee\u5206\u6570\u7ec4\n    init();\n    // \u5904\u7406\u64cd\u4f5c\n    while(m--) {\n        int l, r, val;\n        cin &gt;&gt; l &gt;&gt; r &gt;&gt; val;\n        l--;  // \u8f6c\u6362\u4e3a0\u57fa\u4e0b\u6807\n        r--;\n        add(l, r, val);\n    }\n    // \u8fd8\u539f\u5e76\u8f93\u51fa\u7ed3\u679c\n    get_origin();\n    for(int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; a[i] &lt;&lt; \" \\n\"[i == n-1];\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/11%20%E3%80%81%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/11%20%E3%80%81%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/#eg23","title":"e.g.23 \u91cd\u65b0\u6392\u5e8f","text":"<p>\u95ee\u9898\u63cf\u8ff0</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 A \u548c\u4e00\u4e9b\u67e5\u8be2 \\(L_i,R_i\\), \u6c42\u6570\u7ec4\u4e2d\u7b2c \\(L_i\\)\u81f3\u7b2c \\(R_i\\)\u4e2a\u5143\u7d20\u4e4b\u548c\u3002</p> <p>\u5c0f\u84dd\u89c9\u5f97\u8fd9\u4e2a\u95ee\u9898\u5f88\u65e0\u804a, \u4e8e\u662f\u4ed6\u60f3\u91cd\u65b0\u6392\u5217\u4e00\u4e0b\u6570\u7ec4, \u4f7f\u5f97\u6700\u7ec8\u6bcf\u4e2a\u67e5 \u8be2\u7ed3\u679c\u7684\u548c\u5c3d\u53ef\u80fd\u5730\u5927\u3002\u5c0f\u84dd\u60f3\u77e5\u9053\u76f8\u6bd4\u539f\u6570\u7ec4, \u6240\u6709\u67e5\u8be2\u7ed3\u679c\u7684\u603b\u548c\u6700\u591a\u53ef \u4ee5\u589e\u52a0\u591a\u5c11?</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 \\(n\\) \u3002</p> <p>\u7b2c\u4e8c\u884c\u5305\u542b \\(n\\) \u4e2a\u6574\u6570\\(A_1,A_2,\u22ef,A_n\\), \u76f8\u90bb\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002</p> <p>\u7b2c\u4e09\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\\(m\\)\u8868\u793a\u67e5\u8be2\u7684\u6570\u76ee\u3002</p> <p>\u63a5\u4e0b\u6765 \\(m\\)\u884c, \u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(L_i\u3001R_i\\) \u76f8\u90bb\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\u8868\u793a\u7b54\u6848\u3002</p> <p>\u6837\u4f8b\u8f93\u5165</p> <pre><code>5\n1 2 3 4 5\n2\n1 3\n2 5\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa</p> <pre><code>4\n</code></pre> <p>\u6837\u4f8b\u8bf4\u660e</p> <p>\u539f\u6765\u7684\u548c\u4e3a \\(6+14=20\\), \u91cd\u65b0\u6392\u5217\u4e3a \\((1,4,5,2,3)\\) \u540e\u548c\u4e3a \\(10+14=24\\), \u589e\u52a0\u4e86 \\(4\\)\u3002</p> <p>\u8bc4\u6d4b\u7528\u4f8b\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <p>\u5bf9\u4e8e\u6240\u6709\u8bc4\u6d4b\u7528\u4f8b, \\(1\u2264n,m\u226410^5,1\u2264A_i\u226410^6,1\u2264L_i\u2264R_i\u226410^6\\)\u3002</p> Tip <p>\u601d\u8def\uff1a\u8ba9\u5927\u7684\u6570\u5b57\u88ab\u67e5\u8be2\u7684\u673a\u4f1a\u66f4\u591a\u5373\u53ef</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define int long long\nconst int N = 1e5 + 10;\nint n, m, a[N], b[N];\nint32_t main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    cin &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        b[l] += 1;\n        b[r + 1] -= 1;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        b[i] += b[i - 1]; \n    }\n    // for (int i = 1; i &lt;= n; i++) {\n    //     cout &lt;&lt; b[i] &lt;&lt; \" \";\n    // }\n    int ans1 = 0;\n    for (int i = 0; i &lt;= n; i++) {\n        ans1 += a[i] * b[i];\n    }\n    sort(b + 1, b + n + 1);\n    sort(a + 1, a + n + 1);\n    int ans2 = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        ans2 += a[i] * b[i];\n    }\n    cout &lt;&lt; ans2 - ans1;\n}\n</code></pre>"},{"location":"DataStruct/11%20%E3%80%81%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/#eg24-newoj-week-6","title":"e.g.24 [NewOJ Week 6] \u63a8\u7bb1\u5b50","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5728\u4e00\u4e2a\u9ad8\u5ea6\u4e3a\\(H\\)\u7684\u7bb1\u5b50\u524d\u65b9\uff0c\u6709\u4e00\u4e2a\u957f\u548c\u9ad8\u4e3a\\(N\\)\u7684\u969c\u788d\u7269\u3002 \u969c\u788d\u7269\u7684\u6bcf\u4e00\u5217\u5b58\u5728\u4e00\u4e2a\u8fde\u7eed\u7684\u7f3a\u53e3\uff0c\u7b2ci\u5217\u7684\u7f3a\u53e3\u4ece\u7b2cl\u5404\u5355\u4f4d\u5230\u7b2ch\u4e2a\u5355\u4f4d\uff08\u4ece\u5e95\u90e8\u7531\\(0\\)\u5f00\u59cb\u6570\uff09\u3002 \u73b0\u5728\u8bf7\u4f60\u6e05\u7406\u51fa\u4e00\u6761\u9ad8\u5ea6\u4e3a\\(H\\)\u7684\u901a\u9053\uff0c\u4f7f\u5f97\u7bb1\u5b50\u53ef\u4ee5\u76f4\u63a5\u63a8\u51fa\u53bb\u3002 \u8bf7\u8f93\u51fa\u6700\u5c11\u9700\u8981\u6e05\u7406\u7684\u969c\u788d\u7269\u9762\u79ef\u3002 \u5982\u4e0b\u56fe\u4e3a\u6837\u4f8b\u4e2d\u7684\u969c\u788d\u7269\uff0c\u957f\u548c\u9ad8\u5ea6\u5747\u4e3a\\(5\\)\uff0c\u7bb1\u5b50\u9ad8\u5ea6\u4e3a\\(2\\)\u3002\uff08\u4e0d\u9700\u8981\u8003\u8651\u7bb1\u5b50\u4f1a\u6389\u5165\u67d0\u4e9b\u5751\u4e2d\uff09</p> <p>\u6700\u5c11\u9700\u8981\u79fb\u9664\u4e24\u4e2a\u5355\u4f4d\u7684\u969c\u788d\u7269\u53ef\u4ee5\u9020\u51fa\u4e00\u6761\u9ad8\u5ea6\u4e3a2\u7684\u901a\u9053\u3002</p> <p></p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570N\u548cH\uff0c\u8868\u793a\u969c\u788d\u7269\u7684\u5c3a\u5bf8\u548c\u7bb1\u5b50\u7684\u9ad8\u5ea6\uff0c\\(1\u2264H\u2264N\u22641000000\\)\u3002 \u63a5\u4e0b\u6765\\(N\\)\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570\\(l_i\\)\u548c\\(h_i\\)\uff0c\u8868\u793a\u7b2ci\u5217\u7f3a\u53e3\u7684\u8303\u56f4\uff0c\\(0\u2264l_i\u2264h_i&lt;N\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6570\u5b57\u8868\u793a\u7b54\u6848\u3002</p> <p>\u8f93\u5165\u6837\u4f8b </p> <pre><code>5 2\n2 3\n1 2\n2 3\n1 2\n2 3\n</code></pre> <p>\u8f93\u51fa\u6837\u4f8b </p> <pre><code>2\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e6 + 10; // \u6700\u5927\u5217\u6570\u8303\u56f4\n\nll n, h, a[N], s[N];\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; h; // \u8f93\u5165\u5217\u6570\u548c\u76ee\u6807\u901a\u9053\u9ad8\u5ea6\n\n    // \u6784\u5efa\u5dee\u5206\u6570\u7ec4\n    for (int i = 1; i &lt;= n; i++) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r; // \u8f93\u5165\u6bcf\u5217\u7f3a\u53e3\u8303\u56f4\n        l++, r++;      // \u56e0\u4e3a\u6570\u7ec4\u662f\u4ece1\u5f00\u59cb\u7d22\u5f15\n        a[l]++;        // \u5dee\u5206\u8d77\u70b9 +1\n        a[r + 1]--;    // \u5dee\u5206\u7ec8\u70b9 +1 \u7684\u4e0b\u4e00\u4f4d -1\n    }\n\n    // \u5dee\u5206\u6570\u7ec4\u524d\u7f00\u548c\uff0c\u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u969c\u788d\u7269\u6570\u91cf\n    for (int i = 1; i &lt;= n; i++) {\n        a[i] += a[i - 1];\n    }\n\n    // \u6784\u5efa\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u5feb\u901f\u67e5\u8be2\u4efb\u610f\u533a\u95f4\u7684\u969c\u788d\u7269\u603b\u6570\n    for (int i = 1; i &lt;= n; i++) {\n        s[i] = s[i - 1] + a[i];\n    }\n\n    ll ans = 1e18; // \u521d\u59cb\u5316\u7b54\u6848\u4e3a\u4e00\u4e2a\u6781\u5927\u503c\n\n    // \u6ed1\u52a8\u7a97\u53e3\u8ba1\u7b97\u9ad8\u5ea6\u4e3a h \u7684\u901a\u9053\u9700\u8981\u6e05\u7406\u7684\u6700\u5c0f\u9762\u79ef\n    for (int i = h; i &lt;= n; i++) {\n        // \u6e05\u7406\u7684\u9762\u79ef = \u603b\u9ad8\u5ea6 n*h - \u5f53\u524d\u901a\u9053\u5185\u969c\u788d\u7269\u9762\u79ef\n        ans = min(ans, n * h - (s[i] - s[i - h]));\n    }\n\n    cout &lt;&lt; ans &lt;&lt; endl; // \u8f93\u51fa\u7ed3\u679c\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/11%20%E3%80%81%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/#eg25","title":"e.g.25  \u68cb\u76d8","text":"<p>\u95ee\u9898\u63cf\u8ff0</p> <p>\u5c0f\u84dd\u62e5\u6709 \\(n\u00d7n\\) \u5927\u5c0f\u7684\u68cb\u76d8\uff0c\u4e00\u5f00\u59cb\u68cb\u76d8\u4e0a\u5168\u90fd\u662f\u767d\u5b50\u3002\u5c0f\u84dd\u8fdb\u884c\u4e86 \\(m\\)\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4f1a\u5c06\u68cb\u76d8\u4e0a\u67d0\u4e2a\u8303\u56f4\u5185\u7684\u6240\u6709\u68cb\u5b50\u7684\u989c\u8272\u53d6\u53cd\uff08\u4e5f\u5c31\u662f\u767d\u8272\u68cb\u5b50\u53d8\u4e3a\u9ed1\u8272\uff0c\u9ed1\u8272\u68cb\u5b50\u53d8\u4e3a\u767d\u8272\uff09\u3002\u8bf7\u8f93\u51fa\u6240\u6709\u64cd\u4f5c\u505a\u5b8c\u540e\u68cb\u76d8\u4e0a\u6bcf\u4e2a\u68cb\u5b50\u7684\u989c\u8272\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(n\\)\uff0c\\(m\\)\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u8868\u793a\u68cb\u76d8\u5927\u5c0f\u4e0e\u64cd\u4f5c\u6570\u3002</p> <p>\u63a5\u4e0b\u6765\\(m\\) \u884c\u6bcf\u884c\u5305\u542b\u56db\u4e2a\u6574\u6570 \\(x_1\uff0cy_1\uff0cx_2\uff0cy_2\\)\uff0c\u76f8\u90bb\u6574\u6570\u4e4b\u95f4\u4f7f\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u8868\u793a\u5c06\u5728 \\(x_1\\) \u81f3 \\(x_2\\) \u884c\u548c\\(y_1\\) \u81f3 \\(y_2\\) \u5217\u4e2d\u7684\u68cb\u5b50\u989c\u8272\u53d6\u53cd\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa \\(n\\)\u884c\uff0c\u6bcf\u884c \\(n\\)\u4e2a \\(0\\)\u6216 \\(1\\)\u8868\u793a\u8be5\u4f4d\u7f6e\u68cb\u5b50\u7684\u989c\u8272\u3002\u5982\u679c\u662f\u767d\u8272\u5219\u8f93\u51fa\\(0\\)\uff0c\u5426\u5219\u8f93\u51fa\\(1\\)\u3002</p> <p>\u6837\u4f8b\u8f93\u5165</p> <pre><code>3 3\n1 1 2 2\n2 2 3 3\n1 1 3 3\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa</p> <pre><code>001\n010\n100\n</code></pre> <p>\u8bc4\u6d4b\u7528\u4f8b\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <p>\u5bf9\u4e8e\u6240\u6709\u8bc4\u6d4b\u7528\u4f8b\uff0c\\(1\u2264n,m\u22642000\\)\uff0c\\(1\u2264x_1\u2264x_2\u2264n\\)\uff0c\\(1\u2264y_1\u2264y_2\u2264m\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define int long long\nconst int N = 2e3 + 10;\nint n, m, a[N][N];\n\nint32_t main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        int x1, x2, y1, y2;\n        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;\n        a[x1][y1]++, a[x2 + 1][y2 + 1]++;\n        a[x1][y2 + 1]--, a[x2 + 1][y1]--;\n    }\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= n; j++)\n            a[i][j] += a[i - 1][j] + a[i][j - 1] - a[i - 1][j - 1];\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            if (a[i][j] % 2 == 1)\n                cout &lt;&lt; 1;\n            else\n                cout &lt;&lt; 0;\n        }\n        cout &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/","title":"12 \u3001\u4e8c\u5206","text":"<ul> <li>1\u3001\u601d\u60f3</li> <li>2\u3001\u524d\u63d0</li> <li>3\u3001\u5e38\u89c1\u601d\u8def<ul> <li>\u5199\u6cd5\u6ce8\u610f</li> </ul> </li> <li>4\u3001\u7ecf\u5178\u5e94\u7528<ul> <li>\u2460\u6700\u5c0f\u503c\u6700\u5927\u5316</li> <li>\u2461\u6700\u5927\u503c\u6700\u5c0f\u5316</li> </ul> </li> <li>\u4f8b\u9898<ul> <li>e.g.26 [\u84dd\u6865\u676f 2017 \u7701 AB] \u5206\u5de7\u514b\u529b</li> <li>\u2b50e.g.27 \u5976\u725b\u6652\u8863\u670d</li> <li>e.g.28 \u6c42\u9636\u4e58</li> <li>e.g.29 [\u84dd\u6865\u676f 2022 \u56fd B] \u5361\u724c</li> <li>e.g.30 [\u84dd\u6865\u676f 2022 \u7701 A] \u9752\u86d9\u8fc7\u6cb3</li> <li>e.g.31 \u7ba1\u9053</li> </ul> </li> </ul>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#1","title":"1\u3001\u601d\u60f3","text":"<p>\u5728\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\u4e0a\uff0c\u6bcf\u6b21\u628a\u641c\u7d22\u8303\u56f4\u7f29\u5c0f\u4e00\u500d</p>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#2","title":"2\u3001\u524d\u63d0","text":"<p>\u5e8f\u5217\u5355\u8c03\u6709\u5e8f\uff0c\u65e0\u5e8f\u65e0\u6cd5\u4e8c\u5206\uff0c\u9700\u8981\u5148\u6392\u5e8f</p>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#3","title":"3\u3001\u5e38\u89c1\u601d\u8def","text":"<pre><code>while (L &lt; R) {            // \u4e00\u76f4\u4e8c\u5206\uff0c\u76f4\u5230[L, R]\u7f29\u5c0f\u5230L = R\n    int mid = (L + R) / 2; // mid\u662f[L, R]\u7684\u4e2d\u95f4\u503c\n    if (check(mid))\n        R = mid; // \u7b54\u6848\u5728\u5de6\u534a\u90e8\u5206\uff0cR = mid\n    else         // \u7b54\u6848\u5728\u53f3\u534a\u90e8\u5206\uff0cL = mid + 1\n        L = mid + 1;\n}\n</code></pre>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#_1","title":"\u5199\u6cd5\u6ce8\u610f","text":"<pre><code>int find(int q) {\n    int l = 0, r = n + 1; // \u5f00\u533a\u95f4\n    while (l + 1 &lt; r) {   // l+1=r\u65f6\u7ed3\u675f\n        int mid = (l + r) / 2;\n        if (a[mid] &lt;= q)\n            l = mid;\n        else\n            r = mid;\n    }\n    return 1;\n}\n//--------------------------------------------------\nint find(int q) {\n    int l = 1, r = n; // \u95ed\u533a\u95f4\n    while (l &lt; r) {   // l+1=r\u65f6\u7ed3\u675f\n        int mid = (l + r) / 2;\n        if (a[mid] &lt;= q)\n            l = mid;\n        else\n            r = mid;\n    }\n    return 1;\n}\n//--------------------------------------------------\nint find(int q) {\n    int ans = 0;\n    int l = 1, r = n; // \u95ed\u533a\u95f4\n    while (l &lt;= r) {  // l=r+1\u65f6\u7ed3\u675f\n        int mid = (l + r) &gt;&gt; 1;\n        if (a[mid] &lt;= q)\n            ans = mid,\n            l = mid + 1;\n        else r = mid - 1;\n    }\n    return ans;\n}\n</code></pre>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#4","title":"4\u3001\u7ecf\u5178\u5e94\u7528","text":""},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#1_1","title":"\u2460\u6700\u5c0f\u503c\u6700\u5927\u5316","text":"Question <p>e.g.\u201c\u725b\u68da\u201d\u95ee\u9898</p> <p>\u4e00\u6761\u76f4\u7ebf\u4e0a\\(n\\)\u4e2a\u70b9\uff0c\u9009\u53d6\\(k\\)\u4e2a\u70b9\uff0c\u5176\u4e2d\u67d0\u4e24\u70b9\u8ddd\u79bb\u662f\u6240\u6709\u8ddd\u79bb\u4e2d\u6700\u5c0f\u7684\uff0c\u76ee\u7684\u662f\u8ba9\u8fd9\u4e2a\u6700\u5c0f\u503c\\(D\\)\u6700\u5927</p> <p>\u731c\u6d4b\\(D\\)\u662f\u603b\u957f\u5ea6\\(L\\)\uff0c\u63a5\u4e0b\u6765\u4e8c\u5206\u64cd\u4f5c</p>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#2_1","title":"\u2461\u6700\u5927\u503c\u6700\u5c0f\u5316","text":"Question <p>e.g.\u201c\u5e8f\u5217\u5212\u5206\u201d\u95ee\u9898:</p> <p>\u6709\u4e00\u4e2a\u5305\u542b\\(n\\)\u4e2a\u6b63\u6574\u6570\u7684\u5e8f\u5217\uff0c\u628a\u5b83\u5212\u5206\u6210\\(k\\)\u4e2a\u5b50\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5b50\u5e8f\u5217\u662f\u539f\u6570\u5217\u7684\u4e00\u4e2a\u8fde\u7eed\u90e8\u5206\uff0c\u7b2c\\(i\\)\u4e2a\u5b50\u5e8f\u5217\u7684\u548c\u4e3a\\(S_i\\)\u3002\u5728\u6240\u6709\\(S\\)\u4e2d\uff0c\u6709\u4e00\u4e2a\u6700\u5927\u503c\u3002\u95ee\u5982\u4f55\u5212\u5206\uff0c\u624d\u80fd\u4f7f\u6700\u5927\u7684\\(S\\)\u6700\u5c0f?</p> <p>\u8fd9\u5c31\u662f\u201c\u6700\u5927\u503c(\u6240\u6709\u5b50\u5e8f\u5217\u548c\u7684\u6700\u5927\u503c)\u6700\u5c0f\u5316\u201d\u3002</p> <p>\u4f8b\u5982\u5e8f\u5217\\({2,2,3,4,5,1}\\),\u5c06\u5176\u5212\u5206\u6210\\(k=3\\)\u4e2a\u8fde\u7eed\u7684\u5b50\u5e8f\u5217\u3002</p> <p>\u4e0b\u9762\u4e3e\u4f8b2\u79cd\u5206\u6cd5:\\({(2,2,3)\u3001(4,5)\u3001(1)}\\)\uff0c\u5b50\u5e8f\u5217\u548c\u5206\u522b\u662f\\(7\u30019\u30011\\),\u6700\u5927\u503c\u662f\\(9\\)\uff1b\\({(2,2,3)\u3001(4)\u3001(5,1)}\\),\u5b50\u5e8f\u5217\u548c\u662f\\(7\u30014\u30016\\),\u6700\u5927\u503c\u662f\\(7\\)\u3002\u7b2c2\u79cd\u5206\u6cd5\u6bd4\u7b2c1\u79cd\u597d\u3002</p> <p>\u7528\u4e8c\u5206\uff0c\u5728<code>[max,sum]</code>\u8303\u56f4\u5185\u627e\u6ee1\u8db3\u6761\u4ef6\u7684<code>x</code>\uff0c<code>max</code>\u662f\u5e8f\u5217\u4e2d\u6700\u5927\u5143\u7d20\u7684\u503c\uff0c<code>sum</code>\u662f\u6240\u6709\u5143\u7d20\u7684\u548c</p>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#_2","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#eg26-2017-ab","title":"e.g.26 [\u84dd\u6865\u676f 2017 \u7701 AB] \u5206\u5de7\u514b\u529b","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u513f\u7ae5\u8282\u90a3\u5929\u6709 \\(K\\) \u4f4d\u5c0f\u670b\u53cb\u5230\u5c0f\u660e\u5bb6\u505a\u5ba2\u3002\u5c0f\u660e\u62ff\u51fa\u4e86\u73cd\u85cf\u7684\u5de7\u514b\u529b\u62db\u5f85\u5c0f\u670b\u53cb\u4eec\u3002</p> <p>\u5c0f\u660e\u4e00\u5171\u6709 \\(N\\) \u5757\u5de7\u514b\u529b\uff0c\u5176\u4e2d\u7b2c \\(i\\) \u5757\u662f \\(H_i \\times W_i\\) \u7684\u65b9\u683c\u7ec4\u6210\u7684\u957f\u65b9\u5f62\u3002</p> <p>\u4e3a\u4e86\u516c\u5e73\u8d77\u89c1\uff0c\u5c0f\u660e\u9700\u8981\u4ece\u8fd9 \\(N\\) \u5757\u5de7\u514b\u529b\u4e2d\u5207\u51fa \\(K\\) \u5757\u5de7\u514b\u529b\u5206\u7ed9\u5c0f\u670b\u53cb\u4eec\u3002\u5207\u51fa\u7684\u5de7\u514b\u529b\u9700\u8981\u6ee1\u8db3\uff1a</p> <ol> <li> <p>\u5f62\u72b6\u662f\u6b63\u65b9\u5f62\uff0c\u8fb9\u957f\u662f\u6574\u6570\u3002</p> </li> <li> <p>\u5927\u5c0f\u76f8\u540c\u3002</p> </li> </ol> <p>\u4f8b\u5982\u4e00\u5757 \\(6 \\times 5\\) \u7684\u5de7\u514b\u529b\u53ef\u4ee5\u5207\u51fa \\(6\\) \u5757 \\(2 \\times 2\\) \u7684\u5de7\u514b\u529b\u6216\u8005 \\(2\\) \u5757 \\(3 \\times 3\\) \u7684\u5de7\u514b\u529b\u3002</p> <p>\u5f53\u7136\u5c0f\u670b\u53cb\u4eec\u90fd\u5e0c\u671b\u5f97\u5230\u7684\u5de7\u514b\u529b\u5c3d\u53ef\u80fd\u5927\uff0c\u4f60\u80fd\u5e2e\u5c0f \\(H_i\\) \u8ba1\u7b97\u51fa\u6700\u5927\u7684\u8fb9\u957f\u662f\u591a\u5c11\u4e48\uff1f</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(N\\) \u548c \\(K\\)\u3002\\((1 \\le N,K \\le 10^5)\\)\u3002</p> <p>\u4ee5\u4e0b \\(N\\) \u884c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(H_i\\) \u548c \\(W_i\\)\u3002\\((1 \\le H_i,W_i \\le 10^5)\\)\u3002</p> <p>\u8f93\u5165\u4fdd\u8bc1\u6bcf\u4f4d\u5c0f\u670b\u53cb\u81f3\u5c11\u80fd\u83b7\u5f97\u4e00\u5757 \\(1 \\times 1\\) \u7684\u5de7\u514b\u529b\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u5207\u51fa\u7684\u6b63\u65b9\u5f62\u5de7\u514b\u529b\u6700\u5927\u53ef\u80fd\u7684\u8fb9\u957f\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>2 10  \n6 5  \n5 6\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>2\n</code></pre> <p>\u63d0\u793a</p> <p>\u84dd\u6865\u676f 2022 \u7701\u8d5b A \u7ec4 I \u9898\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define int long long\nconst int N = 1e5 + 10;\nstruct node {\n    int width, height;\n} e[N];\nint n, k;\nbool check(int mid) {\n    int cnt = 0; // \u7edf\u8ba1\u5207\u51fa\u7684\u6b63\u65b9\u5f62\u5757\u6570\n    for (int i = 1; i &lt;= n; i++) {\n        // \u5f53\u524d\u77e9\u5f62\u53ef\u4ee5\u5207\u51fa\u7684\u6b63\u65b9\u5f62\u6570\u91cf\u4e3a(width / mid) * (height / mid)\n        cnt += (e[i].width / mid) * (e[i].height / mid);\n        // \u5982\u679c\u5207\u51fa\u7684\u5757\u6570\u5df2\u7ecf\u8fbe\u5230\u6216\u8d85\u8fc7k\uff0c\u8fd4\u56detrue\n        if (cnt &gt;= k) {\n            return true;\n        }\n    }\n    return false; // \u5982\u679c\u6240\u6709\u77e9\u5f62\u90fd\u904d\u5386\u5b8c\u8fd8\u4e0d\u8db3k\u5757\uff0c\u8fd4\u56defalse\n}\n\nint32_t main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; e[i].width &gt;&gt; e[i].height;\n    }\n    int l = 1, r = 1e9;\n    int mid, ans = 0;\n    // \u4e8c\u5206\u641c\u7d22\n    while (l &lt;= r) {\n        mid = (l + r) &gt;&gt; 1; // \u8ba1\u7b97\u4e2d\u95f4\u503c\n        if (check(mid)) {\n            ans = mid; // \u5982\u679c\u5f53\u524d\u8fb9\u957f\u53ef\u884c\uff0c\u8bb0\u5f55\u7b54\u6848\n            l = mid + 1; // \u5c1d\u8bd5\u66f4\u5927\u7684\u8fb9\u957f\n        } else {\n            r = mid - 1; // \u5982\u679c\u5f53\u524d\u8fb9\u957f\u4e0d\u53ef\u884c\uff0c\u5c1d\u8bd5\u66f4\u5c0f\u7684\u8fb9\u957f\n        }\n    }\n\n    cout &lt;&lt; ans &lt;&lt; endl; // \u8f93\u51fa\u6700\u5927\u7684\u8fb9\u957f\n}\n</code></pre>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#eg27","title":"\u2b50e.g.27 \u5976\u725b\u6652\u8863\u670d","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>\u718a\u5927\u5988\u51b3\u5b9a\u7ed9\u6bcf\u4e2a\u725b\u5b9d\u5b9d\u90fd\u7a7f\u4e0a\u53ef\u7231\u7684\u5a74\u513f\u88c5 \u3002\u4f46\u662f\u7531\u4e8e\u8863\u670d\u5f88\u6e7f\uff0c\u4e3a\u725b\u5b9d\u5b9d\u6652\u8863\u670d\u5c31\u6210\u4e86\u5f88\u4e0d\u723d\u7684\u4e8b\u60c5\u3002\u4e8e\u662f\uff0c\u718a\u5927\u5988\u8bf7\u4f60\uff08\u5976\u725b\uff09\u5e2e\u52a9\u5979\u5b8c\u6210\u8fd9\u4e2a\u91cd\u4efb\u3002</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4e00\u4ef6\u8863\u670d\u5728\u81ea\u7136\u6761\u4ef6\u4e0b\u7528\u4e00\u79d2\u7684\u65f6\u95f4\u53ef\u4ee5\u6652\u5e72 \\(a\\) \u70b9\u6e7f\u5ea6\u3002\u62a0\u95e8\u7684\u718a\u5927\u5988\u53ea\u4e70\u4e86\u4e00\u53f0\u70d8\u8863\u673a \u3002\u4f7f\u7528\u7528\u4e00\u79d2\u70d8\u8863\u673a\u53ef\u4ee5\u8ba9\u4e00\u4ef6\u8863\u670d\u989d\u5916\u70d8\u5e72 \\(b\\) \u70b9\u6e7f\u5ea6\uff08\u4e00\u79d2\u6652\u5e72 \\(a+b\\) \u6e7f\u5ea6\uff09\uff0c\u4f46\u5728\u540c\u4e00\u65f6\u95f4\u5185\u53ea\u80fd\u70d8\u4e00\u4ef6\u8863\u670d\u3002\u73b0\u5728\u6709 \\(n\\) \u4ef6\u8863\u670d\uff0c\u7b2c \\(i\\) \u8863\u670d\u7684\u6e7f\u5ea6\u4e3a \\(w_i\\)\uff08\u4fdd\u8bc1\u4e92\u4e0d\u76f8\u540c\uff09\uff0c\u8981\u4f60\u6c42\u51fa\u5f04\u5e72\u6240\u6709\u8863\u670d\u7684\u6700\u5c11\u65f6\u95f4\uff08\u6e7f\u5ea6\u4e3a \\(0\\) \u4e3a\u5e72 \uff09\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e09\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4e3a \\(n,a,b\\)\u3002 \u63a5\u4e0b\u6765 \\(2\\) \u5230 \\(n+1\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u8f93\u5165 \\(w_i\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u884c\uff0c\u5f04\u5e72\u6240\u6709\u8863\u670d\u7684\u6700\u5c11\u65f6\u95f4\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>3 2 1\n1\n2\n3\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>1\n</code></pre> <p>\u63d0\u793a</p> <p>\u6837\u4f8b\u89e3\u91ca</p> <p>\u8ba9\u673a\u5668\u70d8\u7b2c\u4e09\u4ef6\u8863\u670d\u5373\u53ef\u4e00\u79d2\u5b8c\u6210\u3002</p> <p>\u6570\u636e\u8303\u56f4</p> <p>\\(1 \\le w_i,a,b,n \\le 5 \\times 10^5\\)</p>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#eg28","title":"e.g.28 \u6c42\u9636\u4e58","text":"<p>\u95ee\u9898\u63cf\u8ff0</p> <p>\u6ee1\u8db3 \\(N!\\) \u7684\u672b\u5c3e\u6070\u597d\u6709 \\(K\\)\u4e2a 0 \u7684\u6700\u5c0f\u7684 \\(N\\) \u662f\u591a\u5c11?</p> <p>\u5982\u679c\u8fd9\u6837\u7684 \\(N\\)\u4e0d\u5b58\u5728\u8f93\u51fa \\(\u22121\\) \u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6574\u6570 \\(K\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u7b54\u6848\u3002</p> <p>\u6837\u4f8b\u8f93\u5165</p> <pre><code>2\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa</p> <pre><code>10\n</code></pre> <p>\u8bc4\u6d4b\u7528\u4f8b\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <p>\u5bf9\u4e8e 100% \u7684\u6570\u636e, \\(1\u2264K\u226410^{18}\\).</p> Tip <p>\u4e8c\u5206\u4f18\u5316\uff1a\\(n\\)\u9012\u589e\uff0c\u5c3e\u96f6\u6570\u4e5f\u5355\u8c03\u9012\u589e\uff0c\u7b26\u5408\u4e8c\u5206\u6761\u4ef6</p> <p>\u672b\u5c3e\u96f6\u7684\u4e2a\u6570\u7531\u56e0\u5b50 \\(5\\) \u7684\u4e2a\u6570\u51b3\u5b9a\u3002\u56e0\u4e3a\u6bcf\u4e2a \\(5\\) \u5fc5\u987b\u642d\u914d\u4e00\u4e2a \\(2\\) \u624d\u80fd\u751f\u6210\u4e00\u4e2a\u96f6\uff0c\u800c\u56e0\u5b50 \\(2\\) \u7684\u4e2a\u6570\u8fdc\u591a\u4e8e\u56e0\u5b50 \\(5\\)\uff0c\u56e0\u6b64\u95ee\u9898\u8f6c\u5316\u4e3a\u8ba1\u7b97 \\(N\\) \u7684\u56e0\u5b50 \\(5\\) \u7684\u4e2a\u6570\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nll k;\n//\u8ba1\u7b97N\uff01\u672b\u5c3e\u6709\u51e0\u4e2a0\nll check(ll mid) {      \n    ll cnt = 0;\n    while (mid) {\n        cnt += (mid / 5);\n        mid /= 5;\n    }\n    return cnt;\n}\nint main() {\n    cin &gt;&gt; k;\n    ll l = 1, r = 9e18, mid, ans = 0;\n    while (l &lt;= r) {\n        mid = l + r &gt;&gt; 1;\n        //mid\u5c3e\u65700\u8d85\u8fc7k\uff0c\u8bf4\u660emid\u5927\u4e86\n        if (check(mid) &gt;= k) {\n            ans = mid;\n            r = mid - 1;\n        } else//mid \u5c0f\u4e86\n            l = mid + 1;\n    }\n    if (check(ans) == k)\n        cout &lt;&lt; ans &lt;&lt; endl;\n    else\n        cout &lt;&lt; -1 &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#eg29-2022-b","title":"e.g.29 [\u84dd\u6865\u676f 2022 \u56fd B] \u5361\u724c","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u8fd9\u5929\uff0c\u5c0f\u660e\u5728\u6574\u7406\u4ed6\u7684\u5361\u724c\u3002</p> <p>\u4ed6\u4e00\u5171\u6709 \\(n\\) \u79cd\u5361\u724c\uff0c\u7b2c \\(i\\) \u79cd\u5361\u724c\u4e0a\u5370\u6709\u6b63\u6574\u6570\u6570 \\(i(i \\in[1, n])\\), \u4e14\u7b2c \\(i\\) \u79cd\u5361\u724c\u73b0\u6709 \\(a_{i}\\) \u5f20\u3002</p> <p>\u800c\u5982\u679c\u6709 \\(n\\) \u5f20\u5361\u724c\uff0c\u5176\u4e2d\u6bcf\u79cd\u5361\u724c\u5404\u4e00\u5f20\uff0c\u90a3\u4e48\u8fd9 \\(n\\) \u5f20\u5361\u724c\u53ef\u4ee5\u88ab\u79f0\u4e3a\u4e00\u5957\u724c\u3002\u5c0f\u660e\u4e3a\u4e86\u51d1\u51fa\u5c3d\u53ef\u80fd\u591a\u5957\u724c\uff0c\u62ff\u51fa\u4e86 \\(m\\) \u5f20\u7a7a\u767d\u724c, \u4ed6\u53ef\u4ee5\u5728\u4e0a\u9762\u5199\u4e0a\u6570 \\(i\\)\uff0c\u5c06\u5176\u5f53\u505a\u7b2c \\(i\\) \u79cd\u724c\u6765\u51d1\u51fa\u5957\u724c\u3002\u7136\u800c\u5c0f\u660e\u89c9\u5f97\u624b\u5199\u7684\u724c\u4e0d\u592a\u7f8e\u89c2\uff0c\u51b3\u5b9a\u7b2c \\(i\\) \u79cd\u724c\u6700\u591a\u624b\u5199 \\(b_{i}\\) \u5f20\u3002</p> <p>\u8bf7\u95ee\u5c0f\u660e\u6700\u591a\u80fd\u51d1\u51fa\u591a\u5c11\u5957\u724c?</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u5171 3 \u884c\uff0c\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570 \\(n\\)\uff0c\\(m\\) \u3002</p> <p>\u7b2c\u4e8c\u884c\u4e3a \\(n\\) \u4e2a\u6b63\u6574\u6570 \\(a_{1}, a_{2}, \\ldots, a_{n}\\) \u3002</p> <p>\u7b2c\u4e09\u884c\u4e3a \\(n\\) \u4e2a\u6b63\u6574\u6570 \\(b_{1}, b_{2}, \\ldots, b_{n}\\) \u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\u8868\u793a\u7b54\u6848\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>4 5\n1 2 3 4\n5 5 5 5\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>3\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6837\u4f8b\u8bf4\u660e\u3011</p> <p>\u8fd9 \\(5\\) \u5f20\u7a7a\u767d\u724c\u4e2d\uff0c\u62ff \\(2\\) \u5f20\u5199 \\(1\\)\uff0c\u62ff \\(1\\) \u5f20\u5199 \\(2\\)\uff0c\u8fd9\u6837\u6bcf\u79cd\u724c\u7684\u724c\u6570\u5c31\u53d8\u4e3a\u4e86 \\(3,3,3,4\\)\uff0c\u53ef\u4ee5\u51d1\u51fa \\(3\\) \u5957\u724c\uff0c\u5269\u4e0b \\(2\\) \u5f20\u7a7a\u767d\u724c\u4e0d\u80fd\u518d\u5e2e\u52a9\u5c0f\u660e\u51d1\u51fa\u4e00\u5957\u3002</p> <p>\u3010\u8bc4\u6d4b\u7528\u4f8b\u89c4\u6a21\u4e0e\u7ea6\u5b9a\u3011</p> <p>\u5bf9\u4e8e \\(30 \\%\\) \u7684\u6570\u636e\uff0c\u4fdd\u8bc1 \\(n \\leq 2000\\);</p> <p>\u5bf9\u4e8e \\(100 \\%\\) \u7684\u6570\u636e\uff0c\u4fdd\u8bc1 \\(n \\leq 2 \\times 10^{5} ; a_{i}, b_{i} \\leq n ; m \\leq n^{2}\\) \u3002 </p> <p>\u84dd\u6865\u676f 2022 \u56fd\u8d5b B \u7ec4 C \u9898\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N = 2e5 + 10;\nll n, m;\nll a[N], b[N];\nbool check(ll mid) {\n    ll cnt = m;\n    for (int i = 1; i &lt;= n; i++) {\n        if (a[i] &gt;= mid)\n            continue;\n        else {\n            ll k = mid - a[i];\n            if (k &gt; b[i])\n                return false;\n            cnt -= k;\n            if (cnt &lt; 0)\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; b[i];\n    ll l = 0, r = 4e5, mid, ans = 0;\n    while (l &lt;= r) {\n        mid = l + r &gt;&gt; 1;\n        if (check(mid)) {\n            ans = mid;\n            l = mid + 1;\n        } else\n            r = mid - 1;\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#eg30-2022-a","title":"e.g.30 [\u84dd\u6865\u676f 2022 \u7701 A] \u9752\u86d9\u8fc7\u6cb3","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5c0f\u9752\u86d9\u4f4f\u5728\u4e00\u6761\u6cb3\u8fb9\uff0c\u5b83\u60f3\u5230\u6cb3\u5bf9\u5cb8\u7684\u5b66\u6821\u53bb\u5b66\u4e60\u3002\u5c0f\u9752\u86d9\u6253\u7b97\u7ecf\u8fc7\u6cb3\u91cc\u7684\u77f3\u5934\u8df3\u5230\u5bf9\u5cb8\u3002</p> <p>\u6cb3\u91cc\u7684\u77f3\u5934\u6392\u6210\u4e86\u4e00\u6761\u76f4\u7ebf\uff0c\u5c0f\u9752\u86d9\u6bcf\u6b21\u8df3\u8dc3\u5fc5\u987b\u843d\u5728\u4e00\u5757\u77f3\u5934\u6216\u8005\u5cb8\u4e0a\u3002\u4e0d\u8fc7\uff0c\u6bcf\u5757\u77f3\u5934\u6709\u4e00\u4e2a\u9ad8\u5ea6\uff0c\u6bcf\u6b21\u5c0f\u9752\u86d9\u4ece\u4e00\u5757\u77f3\u5934\u8d77\u8df3\uff0c\u8fd9\u5757\u77f3\u5934\u7684\u9ad8\u5ea6\u5c31\u4f1a\u4e0b\u964d \\(1\\)\uff0c\u5f53\u77f3\u5934\u7684\u9ad8\u5ea6\u4e0b\u964d\u5230 \\(0\\) \u65f6\u5c0f\u9752\u86d9\u4e0d\u80fd\u518d\u8df3\u5230\u8fd9\u5757\u77f3\u5934\u4e0a\uff08\u67d0\u6b21\u8df3\u8dc3\u540e\u4f7f\u77f3\u5934\u9ad8\u5ea6\u4e0b\u964d\u5230 \\(0\\) \u662f\u5141\u8bb8\u7684)\u3002</p> <p>\u5c0f\u9752\u86d9\u4e00\u5171\u9700\u8981\u53bb\u5b66\u6821\u4e0a \\(x\\) \u5929\u8bfe\uff0c\u6240\u4ee5\u5b83\u9700\u8981\u5f80\u8fd4 \\(2x\\) \u6b21\u3002\u5f53\u5c0f\u9752\u86d9\u5177\u6709\u4e00\u4e2a\u8df3\u8dc3\u80fd\u529b \\(y\\) \u65f6\uff0c\u5b83\u80fd\u8df3\u4e0d\u8d85\u8fc7 \\(y\\) \u7684\u8ddd\u79bb\u3002</p> <p>\u8bf7\u95ee\u5c0f\u9752\u86d9\u7684\u8df3\u8dc3\u80fd\u529b\u81f3\u5c11\u662f\u591a\u5c11\u624d\u80fd\u7528\u8fd9\u4e9b\u77f3\u5934\u4e0a\u5b8c \\(x\\) \u6b21\u8bfe\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(n, x\\), \u5206\u522b\u8868\u793a\u6cb3\u7684\u5bbd\u5ea6\u548c\u5c0f\u9752\u86d9\u9700\u8981\u53bb\u5b66\u6821\u7684\u5929\u6570\u3002\u8bf7\u6ce8\u610f \\(2x\\) \u624d\u662f\u5b9e\u9645\u8fc7\u6cb3\u7684\u6b21\u6570\u3002</p> <p>\u7b2c\u4e8c\u884c\u5305\u542b \\(n-1\\) \u4e2a\u975e\u8d1f\u6574\u6570 \\(H_{1}, H_{2}, \\cdots, H_{n-1}\\), \u5176\u4e2d \\(H_{i}&gt;0\\) \u8868\u793a\u5728\u6cb3\u4e2d\u4e0e \u5c0f\u9752\u86d9\u7684\u5bb6\u76f8\u8ddd \\(i\\) \u7684\u5730\u65b9\u6709\u4e00\u5757\u9ad8\u5ea6\u4e3a \\(H_{i}\\) \u7684\u77f3\u5934\uff0c\\(H_{i}=0\\) \u8868\u793a\u8fd9\u4e2a\u4f4d\u7f6e\u6ca1\u6709\u77f3\u5934\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c, \u5305\u542b\u4e00\u4e2a\u6574\u6570, \u8868\u793a\u5c0f\u9752\u86d9\u9700\u8981\u7684\u6700\u4f4e\u8df3\u8dc3\u80fd\u529b\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>5 1\n1 0 1 0\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>4\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6837\u4f8b\u89e3\u91ca\u3011</p> <p>\u7531\u4e8e\u53ea\u6709\u4e24\u5757\u9ad8\u5ea6\u4e3a \\(1\\) \u7684\u77f3\u5934\uff0c\u6240\u4ee5\u5f80\u8fd4\u53ea\u80fd\u5404\u7528\u4e00\u5757\u3002\u7b2c \\(1\\) \u5757\u77f3\u5934\u548c\u5bf9\u5cb8\u7684\u8ddd\u79bb\u4e3a \\(4\\)\uff0c\u5982\u679c\u5c0f\u9752\u86d9\u7684\u8df3\u8dc3\u80fd\u529b\u4e3a \\(3\\) \u5219\u65e0\u6cd5\u6ee1\u8db3\u8981\u6c42\u3002\u6240\u4ee5\u5c0f\u9752\u86d9\u6700\u5c11\u9700\u8981 \\(4\\) \u7684\u8df3\u8dc3\u80fd\u529b\u3002</p> <p>\u3010\u8bc4\u6d4b\u7528\u4f8b\u89c4\u6a21\u4e0e\u7ea6\u5b9a\u3011</p> <p>\u5bf9\u4e8e \\(30 \\%\\) \u7684\u8bc4\u6d4b\u7528\u4f8b\uff0c\\(n \\leq 100\\);</p> <p>\u5bf9\u4e8e \\(60 \\%\\) \u7684\u8bc4\u6d4b\u7528\u4f8b\uff0c\\(n \\leq 1000\\);</p> <p>\u5bf9\u4e8e\u6240\u6709\u8bc4\u6d4b\u7528\u4f8b\uff0c\\(1 \\leq n \\leq 10^{5}, 1 \\leq x \\leq 10^{9}, 0 \\leq H_{i} \\leq 10^{4}\\) \u3002 </p> <p>\u84dd\u6865\u676f 2022 \u7701\u8d5b A \u7ec4 F \u9898\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N = 2e5 + 10;\nll n, x, a[N], s[N];\nbool check(ll mid) {\n    for (int i = 1; i &lt;= n - mid; i++) {\n        if (s[i + mid - 1] - s[i - 1] &lt; 2 * x)\n            return false;\n    }\n    return true;\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; x;\n    for (int i = 1; i &lt;= n - 1; i++)\n        cin &gt;&gt; a[i];\n    for (int i = 1; i &lt;= n - 1; i++)\n        s[i] = s[i - 1] + a[i];\n    ll l = 1, r = 1e5, mid, ans = 0;\n    while (l &lt;= r) {\n        mid = l + r &gt;&gt; 1;\n        if (check(mid)) {\n            ans = mid;\n            r = mid - 1;\n        } else\n            l = mid + 1;\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/12%20%E3%80%81%E4%BA%8C%E5%88%86/#eg31","title":"e.g.31 \u7ba1\u9053","text":"<p>\u95ee\u9898\u63cf\u8ff0</p> <p>\u6709\u4e00\u6839\u957f\u5ea6\u4e3a \\(len\\)\u7684\u6a2a\u5411\u7684\u7ba1\u9053\uff0c\u8be5\u7ba1\u9053\u6309\u7167\u5355\u4f4d\u957f\u5ea6\u5206\u4e3a \\(len\\) \u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684\u4e2d\u592e\u6709\u4e00\u4e2a\u53ef\u5f00\u5173\u7684\u9600\u95e8\u548c\u4e00\u4e2a\u68c0\u6d4b\u6c34\u6d41\u7684\u4f20\u611f\u5668\u3002</p> <p>\u4e00\u5f00\u59cb\u7ba1\u9053\u662f\u7a7a\u7684\uff0c\u4f4d\u4e8e \\(L_i\\) \u7684\u9600\u95e8\u4f1a\u5728 \\(S_i\\) \u65f6\u523b\u6253\u5f00\uff0c\u5e76\u4e0d\u65ad\u8ba9\u6c34\u6d41\u5165\u7ba1\u9053\u3002</p> <p>\u5bf9\u4e8e\u4f4d\u4e8e \\(L_i\\)\u7684\u9600\u95e8\uff0c\u5b83\u6d41\u5165\u7684\u6c34\u5728 \\(T_i\\) (\\(T_i\u2265S_i\\)) \u65f6\u523b\u4f1a\u4f7f\u5f97\u4ece\u7b2c \\(L_i\u2212(T_i\u2212S_i)\\)\u6bb5\u5230\u7b2c \\(L_i+(T_i\u2212S_i)\\)\u6bb5\u7684\u4f20\u611f\u5668\u68c0\u6d4b\u5230\u6c34\u6d41\u3002</p> <p>\u6c42\u7ba1\u9053\u4e2d\u6bcf\u4e00\u6bb5\u4e2d\u95f4\u7684\u4f20\u611f\u5668\u90fd\u68c0\u6d4b\u5230\u6709\u6c34\u6d41\u7684\u6700\u65e9\u65f6\u95f4\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(n,len\\)\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u5206\u522b\u8868\u793a\u4f1a\u6253\u5f00\u7684\u9600\u95e8\u6570\u548c\u7ba1\u9053\u957f\u5ea6\u3002</p> <p>\u63a5\u4e0b\u6765 \\(n\\)\u884c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(L_i,S_i\\)\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u8868\u793a\u4f4d\u4e8e\u7b2c \\(L_i\\)\u6bb5\u7ba1\u9053\u4e2d\u592e\u7684\u9600\u95e8\u4f1a\u5728 \\(S_i\\)\u65f6\u523b\u6253\u5f00\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\u8868\u793a\u7b54\u6848\u3002</p> <p>\u6837\u4f8b\u8f93\u5165</p> <pre><code>3 10\n1 1\n6 5\n10 2\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa</p> <pre><code>5\n</code></pre> <pre><code>/*\npair&lt;int,int&gt; p \u6570\u636e\u7c7b\u578b\n\u76f8\u5f53\u4e8e\u53ea\u6709\u4e24\u4e2a\u5143\u7d20\u7684struct\uff0c\u66f4\u7b80\u6613\n*/\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\ntypedef pair&lt;ll, ll&gt; pii;\nconst int N = 2e5 + 10;\nll n, len, a[N];\npii p[N];\nbool cmp(pii p1, pii p2) {\n    return p1.first &lt; p2.first;\n}\nbool check(ll mid) {\n    vector&lt;pii&gt; v;\n    for (int i = 1; i &lt;= n; i++) {\n        if (p[i].second &lt;= mid) {\n            ll l = max(1ll, p[i].first - (mid - p[i].second));\n            ll r = min(len, p[i].first + (mid - p[i].second));\n            v.push_back({l, r});\n        }\n    }\n    sort(v.begin(), v.end(), cmp);\n    ll l = v[0].first, r = v[0].second;\n    if (l != 1)\n        return false;\n    for (int i = 1; i &lt; v.size(); i++) {\n        ll x = v[i].first, y = v[i].second;\n        if (x &gt; r + 1)\n            return false;\n        else\n            r = max(r, y);\n    }\n    if (r != len)\n        return false;\n    return true;\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; len;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; p[i].first &gt;&gt; p[i].second;\n    ll l = 1, r = 2e9, mid, ans = 0;\n    while (l &lt;= r) {\n        mid = l + r &gt;&gt; 1;\n        if (check(mid)) {\n            ans = mid;\n            r = mid - 1;\n        } else\n            l = mid + 1;\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/13%20%E3%80%81DFS/","title":"13 \u3001DFS","text":"<ul> <li>1\u3001\u5e38\u89c1\u601d\u8def</li> <li>2\u3001\u526a\u679d</li> <li>\u4f8b\u9898<ul> <li>e.g.35 \u8ff7\u5bab</li> <li>e.g.36 \u5168\u6392\u5217\u95ee\u9898</li> <li>e.g.37 \u6700\u5927\u8fde\u901a</li> <li>e.g.38 [USACO1.5] \u516b\u7687\u540e Checker Challenge</li> <li>e.g.39 \u5c0f\u732b\u722c\u5c71</li> </ul> </li> </ul>"},{"location":"DataStruct/13%20%E3%80%81DFS/#1","title":"1\u3001\u5e38\u89c1\u601d\u8def","text":"<p>Note</p> <p>\u672c\u8d28\uff1a\u9012\u5f52</p>"},{"location":"DataStruct/13%20%E3%80%81DFS/#2","title":"2\u3001\u526a\u679d","text":"<ul> <li>\u53ef\u884c\u6027\u526a\u679d</li> </ul>"},{"location":"DataStruct/13%20%E3%80%81DFS/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/13%20%E3%80%81DFS/#eg35","title":"e.g.35 \u8ff7\u5bab","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u5b9a\u4e00\u4e2a \\(N \\times M\\) \u65b9\u683c\u7684\u8ff7\u5bab\uff0c\u8ff7\u5bab\u91cc\u6709 \\(T\\) \u5904\u969c\u788d\uff0c\u969c\u788d\u5904\u4e0d\u53ef\u901a\u8fc7\u3002</p> <p>\u5728\u8ff7\u5bab\u4e2d\u79fb\u52a8\u6709\u4e0a\u4e0b\u5de6\u53f3\u56db\u79cd\u65b9\u5f0f\uff0c\u6bcf\u6b21\u53ea\u80fd\u79fb\u52a8\u4e00\u4e2a\u65b9\u683c\u3002\u6570\u636e\u4fdd\u8bc1\u8d77\u70b9\u4e0a\u6ca1\u6709\u969c\u788d\u3002</p> <p>\u7ed9\u5b9a\u8d77\u70b9\u5750\u6807\u548c\u7ec8\u70b9\u5750\u6807\uff0c\u6bcf\u4e2a\u65b9\u683c\u6700\u591a\u7ecf\u8fc7\u4e00\u6b21\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u4ece\u8d77\u70b9\u5750\u6807\u5230\u7ec8\u70b9\u5750\u6807\u7684\u65b9\u6848\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e3a\u4e09\u4e2a\u6b63\u6574\u6570 \\(N,M,T\\)\uff0c\u5206\u522b\u8868\u793a\u8ff7\u5bab\u7684\u957f\u5bbd\u548c\u969c\u788d\u603b\u6570\u3002</p> <p>\u7b2c\u4e8c\u884c\u4e3a\u56db\u4e2a\u6b63\u6574\u6570 \\(SX,SY,FX,FY\\)\uff0c\\(SX,SY\\) \u4ee3\u8868\u8d77\u70b9\u5750\u6807\uff0c\\(FX,FY\\) \u4ee3\u8868\u7ec8\u70b9\u5750\u6807\u3002</p> <p>\u63a5\u4e0b\u6765 \\(T\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u969c\u788d\u70b9\u7684\u5750\u6807\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4ece\u8d77\u70b9\u5750\u6807\u5230\u7ec8\u70b9\u5750\u6807\u7684\u65b9\u6848\u603b\u6570\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>2 2 1\n1 1 2 2\n1 2\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>1\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\le N,M \\le 5\\)\uff0c\\(1 \\le T \\le 10\\)\uff0c\\(1 \\le SX,FX \\le n\\)\uff0c\\(1 \\le SY,FY \\le m\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint n, m, t, ans, g[10][10];\n\nint dir[4][2] = {{0, 1},\n                 {1, 0},\n                 {-1, 0},\n                 {0, -1}}; // \u65b9\u5411\u6570\u7ec4\uff0c\u8868\u793a\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\nint SX, SY, EX, EY;\nbool vis[10][10];\nvoid dfs(int x, int y) {\n    if (x == EX &amp;&amp; y == EY) {\n        ans++;\n        return;\n    }\n    for (int i = 0; i &lt; 4; i++) {\n        int nx = x + dir[i][0];\n        int ny = y + dir[i][1];\n        if (nx &lt; 1 || nx &gt; n ||\n            ny &lt; 1 || ny &gt; m ||\n            g[nx][ny] == 1 ||\n            vis[nx][ny] == 1)\n            continue;\n        vis[nx][ny] = 1; // \u6807\u8bb0\u8be5\u70b9\u5df2\u8bbf\u95ee\n        dfs(nx, ny);     // \u9012\u5f52\u8c03\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u51fd\u6570\n        vis[nx][ny] = 0; // \u56de\u6eaf\uff0c\u53d6\u6d88\u6807\u8bb0\n    }\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; t;\n    cin &gt;&gt; SX &gt;&gt; SY &gt;&gt; EX &gt;&gt; EY;\n\n    for (int i = 1; i &lt;= t; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        g[x][y] = 1;\n    }\n    vis[SX][SY] = 1;\n    dfs(SX, SY); // \u8c03\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u51fd\u6570\n    cout &lt;&lt; ans &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/13%20%E3%80%81DFS/#eg36","title":"e.g.36 \u5168\u6392\u5217\u95ee\u9898","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6309\u7167\u5b57\u5178\u5e8f\u8f93\u51fa\u81ea\u7136\u6570 \\(1\\) \u5230 \\(n\\) \u6240\u6709\u4e0d\u91cd\u590d\u7684\u6392\u5217\uff0c\u5373 \\(n\\) \u7684\u5168\u6392\u5217\uff0c\u8981\u6c42\u6240\u4ea7\u751f\u7684\u4efb\u4e00\u6570\u5b57\u5e8f\u5217\u4e2d\u4e0d\u5141\u8bb8\u51fa\u73b0\u91cd\u590d\u7684\u6570\u5b57\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6574\u6570 \\(n\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u7531 \\(1 \\sim n\\) \u7ec4\u6210\u7684\u6240\u6709\u4e0d\u91cd\u590d\u7684\u6570\u5b57\u5e8f\u5217\uff0c\u6bcf\u884c\u4e00\u4e2a\u5e8f\u5217\u3002</p> <p>\u6bcf\u4e2a\u6570\u5b57\u4fdd\u7559 \\(5\\) \u4e2a\u573a\u5bbd\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>3\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>    1    2    3\n    1    3    2\n    2    1    3\n    2    3    1\n    3    1    2\n    3    2    1\n</code></pre> <p>\u63d0\u793a</p> <p>\\(1 \\leq n \\leq 9\\)\u3002</p> DFSnext_permutation <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint n, cnt, num[10];\nbool vis[10];\nvoid dfs(int k) {\n    if (k == n) {\n        for (int i = 1; i &lt;= n; i++) {\n            cout &lt;&lt; \"    \" &lt;&lt; num[i];\n        }\n        cout &lt;&lt; endl;\n        return;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        if (vis[i] == 0) {\n            vis[i] = 1;\n            num[++cnt] = i;\n            dfs(k + 1);\n            vis[i] = 0;\n            cnt--;\n        }\n    }\n}\nint main() {\n    cin &gt;&gt; n;\n    dfs(0);\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    int arr[n + 1];\n    for (int i = 1; i &lt;= n; i++) {\n        arr[i] = i;\n    }\n\n    do {\n        for (int i = 1; i &lt;= n; i++) {\n            cout &lt;&lt; \"    \" &lt;&lt; arr[i];\n        }\n        cout &lt;&lt; endl;\n    } while (next_permutation(arr + 1, arr + 1 + n));\n}\n</code></pre>"},{"location":"DataStruct/13%20%E3%80%81DFS/#eg37","title":"e.g.37 \u6700\u5927\u8fde\u901a","text":"<p>\u95ee\u9898\u63cf\u8ff0</p> <p>\u5c0f\u84dd\u6709\u4e00\u4e2a 30 \u884c 60 \u5217\u7684\u6570\u5b57\u77e9\u9635\uff0c\u77e9\u9635\u4e2d\u7684\u6bcf\u4e2a\u6570\u90fd\u662f 0 \u6216 1 \u3002</p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>110010000011111110101001001001101010111011011011101001111110\n010000000001010001101100000010010110001111100010101100011110 \n001011101000100011111111111010000010010101010111001000010100 \n101100001101011101101011011001000110111111010000000110110000 \n010101100100010000111000100111100110001110111101010011001011 \n010011011010011110111101111001001001010111110001101000100011 \n101001011000110100001101011000000110110110100100110111101011 \n101111000000101000111001100010110000100110001001000101011001 \n001110111010001011110000001111100001010101001110011010101110 \n001010101000110001011111001010111111100110000011011111101010 \n011111100011001110100101001011110011000101011000100111001011 \n011010001101011110011011111010111110010100101000110111010110 \n001110000111100100101110001011101010001100010111110111011011 \n111100001000001100010110101100111001001111100100110000001101 \n001110010000000111011110000011000010101000111000000110101101 \n100100011101011111001101001010011111110010111101000010000111 \n110010100110101100001101111101010011000110101100000110001010 \n110101101100001110000100010001001010100010110100100001000011 \n100100000100001101010101001101000101101000000101111110001010 \n101101011010101000111110110000110100000010011111111100110010 \n101111000100000100011000010001011111001010010001010110001010 \n001010001110101010000100010011101001010101101101010111100101 \n001111110000101100010111111100000100101010000001011101100001 \n101011110010000010010110000100001010011111100011011000110010 \n011110010100011101100101111101000001011100001011010001110011 \n000101000101000010010010110111000010101111001101100110011100 \n100011100110011111000110011001111100001110110111001001000111 \n111011000110001000110111011001011110010010010110101000011111 \n011110011110110110011011001011010000100100101010110000010011 \n010011110011100101010101111010001001001111101111101110011101\n</code></pre> <p>\u5982\u679c\u4ece\u4e00\u4e2a\u6807\u4e3a 1 \u7684\u4f4d\u7f6e\u53ef\u4ee5\u901a\u8fc7\u4e0a\u4e0b\u5de6\u53f3\u8d70\u5230\u53e6\u4e00\u4e2a\u6807\u4e3a 1 \u7684\u4f4d\u7f6e\uff0c\u5219\u79f0\u4e24\u4e2a\u4f4d\u7f6e\u8fde\u901a\u3002\u4e0e\u67d0\u4e00\u4e2a\u6807\u4e3a 1 \u7684\u4f4d\u7f6e\u8fde\u901a\u7684\u6240\u6709\u4f4d\u7f6e\uff08\u5305\u62ec\u81ea\u5df1\uff09\u7ec4\u6210\u4e00\u4e2a\u8fde\u901a\u5206\u5757\u3002</p> <p>\u8bf7\u95ee\u77e9\u9635\u4e2d\u6700\u5927\u7684\u8fde\u901a\u5206\u5757\u6709\u591a\u5927\uff1f</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint n = 30, m = 60, ans, t;\nchar g[100][100];\nbool vis[100][100];\nint dir[4][2] = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};\nvoid dfs(int x, int y) {\n    t++;\n    for (int i = 0; i &lt; 4; i++) {\n        int nx = x + dir[i][0];\n        int ny = y + dir[i][1];\n        if (nx &lt; 1 || nx &gt; n ||\n            ny &lt; 1 || ny &gt; m ||\n            g[nx][ny] == '0' ||\n            vis[nx][ny] == 1) {\n            continue;\n        }\n        vis[nx][ny] = 1;\n        dfs(nx, ny);\n    }\n}\n\nint main() {\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%s\", g[i] + 1);\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            if (g[i][j] == '1' &amp;&amp; vis[i][j] == 0) {\n                t = 0;\n                vis[i][j] = 1;\n                dfs(i, j);\n                ans = max(ans, t);\n            }\n        }\n    }\n    cout &lt;&lt; ans;\n}\n</code></pre>"},{"location":"DataStruct/13%20%E3%80%81DFS/#eg38-usaco15-checker-challenge","title":"e.g.38 [USACO1.5] \u516b\u7687\u540e Checker Challenge","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4e00\u4e2a\u5982\u4e0b\u7684 \\(6 \\times 6\\) \u7684\u8df3\u68cb\u68cb\u76d8\uff0c\u6709\u516d\u4e2a\u68cb\u5b50\u88ab\u653e\u7f6e\u5728\u68cb\u76d8\u4e0a\uff0c\u4f7f\u5f97\u6bcf\u884c\u3001\u6bcf\u5217\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\uff0c\u6bcf\u6761\u5bf9\u89d2\u7ebf\uff08\u5305\u62ec\u4e24\u6761\u4e3b\u5bf9\u89d2\u7ebf\u7684\u6240\u6709\u5e73\u884c\u7ebf\uff09\u4e0a\u81f3\u591a\u6709\u4e00\u4e2a\u68cb\u5b50\u3002</p> <p></p> <p>\u4e0a\u9762\u7684\u5e03\u5c40\u53ef\u4ee5\u7528\u5e8f\u5217 \\(2\\ 4\\ 6\\ 1\\ 3\\ 5\\) \u6765\u63cf\u8ff0\uff0c\u7b2c \\(i\\) \u4e2a\u6570\u5b57\u8868\u793a\u5728\u7b2c \\(i\\) \u884c\u7684\u76f8\u5e94\u4f4d\u7f6e\u6709\u4e00\u4e2a\u68cb\u5b50\uff0c\u5982\u4e0b\uff1a</p> <p>\u884c\u53f7 \\(1\\ 2\\ 3\\ 4\\ 5\\ 6\\)</p> <p>\u5217\u53f7 \\(2\\ 4\\ 6\\ 1\\ 3\\ 5\\)</p> <p>\u8fd9\u53ea\u662f\u68cb\u5b50\u653e\u7f6e\u7684\u4e00\u4e2a\u89e3\u3002\u8bf7\u7f16\u4e00\u4e2a\u7a0b\u5e8f\u627e\u51fa\u6240\u6709\u68cb\u5b50\u653e\u7f6e\u7684\u89e3\u3002 \u5e76\u628a\u5b83\u4eec\u4ee5\u4e0a\u9762\u7684\u5e8f\u5217\u65b9\u6cd5\u8f93\u51fa\uff0c\u89e3\u6309\u5b57\u5178\u987a\u5e8f\u6392\u5217\u3002 \u8bf7\u8f93\u51fa\u524d \\(3\\) \u4e2a\u89e3\u3002\u6700\u540e\u4e00\u884c\u662f\u89e3\u7684\u603b\u4e2a\u6570\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u68cb\u76d8\u662f \\(n \\times n\\) \u5927\u5c0f\u7684\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u524d\u4e09\u884c\u4e3a\u524d\u4e09\u4e2a\u89e3\uff0c\u6bcf\u4e2a\u89e3\u7684\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u7b2c\u56db\u884c\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u89e3\u7684\u603b\u6570\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>6\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>2 4 6 1 3 5\n3 6 2 5 1 4\n4 1 5 2 6 3\n4\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6570\u636e\u8303\u56f4\u3011 \u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(6 \\le n \\le 13\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint n, ans, flag = 3, g[20][20];\nbool check(int x, int y) {\n    for (int i = 1; i &lt; x; i++)\n        if (g[i][y])\n            return false;\n    int num = 1;\n    for (int i = x - 1; i &gt;= 1; i--) {\n        if (y - num &gt;= 1 &amp;&amp; g[i][y - num])\n            return false;\n        if (y + num &lt;= n &amp;&amp; g[i][y + num])\n            return false;\n        num++;\n    }\n    return true;\n}\nvoid dfs(int k) {\n    if (k == n + 1) {\n        ans++;\n        if (flag &gt;= 1) {\n            flag--;\n            for (int i = 1; i &lt;= n; i++)\n                for (int j = 1; j &lt;= n; j++) {\n                    if (g[i][j])\n                        cout &lt;&lt; j &lt;&lt; \" \";\n                }\n            cout &lt;&lt; endl;\n        }\n        return;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        g[k][i] = 1;\n        if (check(k, i))\n            dfs(k + 1);\n        g[k][i] = 0;\n    }\n}\nint main() {\n    cin &gt;&gt; n;\n    dfs(1);\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/13%20%E3%80%81DFS/#eg39","title":"e.g.39 \u5c0f\u732b\u722c\u5c71","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>Freda \u548c rainbow \u9972\u517b\u4e86 \\(N(N\\le 18)\\) \u53ea\u5c0f\u732b\uff0c\u8fd9\u5929\uff0c\u5c0f\u732b\u4eec\u8981\u53bb\u722c\u5c71\u3002\u7ecf\u5386\u4e86\u5343\u8f9b\u4e07\u82e6\uff0c\u5c0f\u732b\u4eec\u7ec8\u4e8e\u722c\u4e0a\u4e86\u5c71\u9876\uff0c\u4f46\u662f\u75b2\u5026\u7684\u5b83\u4eec\u518d\u4e5f\u4e0d\u60f3\u5f92\u6b65\u8d70\u4e0b\u5c71\u4e86</p> <p>Freda \u548c rainbow \u53ea\u597d\u82b1\u94b1\u8ba9\u5b83\u4eec\u5750\u7d22\u9053\u4e0b\u5c71\u3002\u7d22\u9053\u4e0a\u7684\u7f06\u8f66\u6700\u5927\u627f\u91cd\u91cf\u4e3a \\(W\\)\uff0c\u800c \\(N\\) \u53ea\u5c0f\u732b\u7684\u91cd\u91cf\u5206\u522b\u662f \\(C_1,C2,\\dots C_N\\)\u3002\u5f53\u7136\uff0c\u6bcf\u8f86\u7f06\u8f66\u4e0a\u7684\u5c0f\u732b\u7684\u91cd\u91cf\u4e4b\u548c\u4e0d\u80fd\u8d85\u8fc7 \\(W(1\\le C_i,W \\le 10^8)\\)\u3002\u6bcf\u79df\u7528\u4e00\u8f86\u7f06\u8f66\uff0cFreda \u548c rainbow \u5c31\u8981\u4ed8 \\(1\\) \u7f8e\u5143\uff0c\u6240\u4ee5\u4ed6\u4eec\u60f3\u77e5\u9053\uff0c\u6700\u5c11\u9700\u8981\u4ed8\u591a\u5c11\u7f8e\u5143\u624d\u80fd\u628a\u8fd9 \\(N\\) \u53ea\u5c0f\u732b\u90fd\u8fd0\u9001\u4e0b\u5c71\uff1f</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff0c\\(N\\) \u548c \\(W\\)\u3002 \u63a5\u4e0b\u6765 \\(N\\) \u884c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u5176\u4e2d\u7b2c \\(i+1\\) \u884c\u7684\u6574\u6570\u8868\u793a\u7b2c \\(i\\) \u53ea\u5c0f\u732b\u7684\u91cd\u91cf \\(C_i\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u6700\u5c11\u9700\u8981\u591a\u5c11\u7f8e\u5143\uff0c\u4e5f\u5c31\u662f\u6700\u5c11\u9700\u8981\u591a\u5c11\u8f86\u7f06\u8f66\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>5 1996\n1\n2\n1994\n12\n29\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p>"},{"location":"DataStruct/14%20%E3%80%81BFS/","title":"14 \u3001BFS","text":"<ul> <li>1\u3001\u6a21\u677f</li> <li>\u4f8b\u9898<ul> <li>e.g.40 \u9a6c\u7684\u904d\u5386</li> <li>e.g.41 \u5947\u602a\u7684\u7535\u68af</li> <li>e.g.42 [\u84dd\u6865\u676f 2018 \u7701 AB] \u5168\u7403\u53d8\u6696</li> <li>e.g.43 \u4e5d\u5bab\u91cd\u6392</li> <li>e.g.44 \u8d28\u6570\u62fc\u56fe\u6e38\u620f</li> </ul> </li> </ul>"},{"location":"DataStruct/14%20%E3%80%81BFS/#1","title":"1\u3001\u6a21\u677f","text":"<pre><code>queue &lt;\u7c7b\u578b&gt; Q;\nQ.push(\u6700\u521d\u72b6\u6001);\nwhile(!Q.empty()){\n    \u7c7b\u578b u=Q.front(); Q.pop();\n    for(\u679a\u4e3e\u6240\u6709\u53ef\u6269\u5c55\u5230\u7684\u72b6\u6001){\n        if(\u6ee1\u8db3\u5165\u961f\u6761\u4ef6){\n            Q.push(\u72b6\u6001); //\u7ef4\u62a4\u67d0\u4e9b\u5fc5\u8981\u4fe1\u606f \n        }\n    } \n}\n</code></pre>"},{"location":"DataStruct/14%20%E3%80%81BFS/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/14%20%E3%80%81BFS/#eg40","title":"e.g.40 \u9a6c\u7684\u904d\u5386","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6709\u4e00\u4e2a \\(n \\times m\\) \u7684\u68cb\u76d8\uff0c\u5728\u67d0\u4e2a\u70b9 \\((x, y)\\) \u4e0a\u6709\u4e00\u4e2a\u9a6c\uff0c\u8981\u6c42\u4f60\u8ba1\u7b97\u51fa\u9a6c\u5230\u8fbe\u68cb\u76d8\u4e0a\u4efb\u610f\u4e00\u4e2a\u70b9\u6700\u5c11\u8981\u8d70\u51e0\u6b65\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u53ea\u6709\u4e00\u884c\u56db\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4e3a \\(n, m, x, y\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c\u4ee3\u8868\u9a6c\u5230\u8fbe\u67d0\u4e2a\u70b9\u6700\u5c11\u8981\u8d70\u51e0\u6b65\uff08\u4e0d\u80fd\u5230\u8fbe\u5219\u8f93\u51fa \\(-1\\)\uff09\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>3 3 1 1\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>0    3    2    \n3    -1   1    \n2    1    4\n</code></pre> <p>\u63d0\u793a</p> <p>\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <p>\u5bf9\u4e8e\u5168\u90e8\u7684\u6d4b\u8bd5\u70b9\uff0c\u4fdd\u8bc1 \\(1 \\leq x \\leq n \\leq 400\\)\uff0c\\(1 \\leq y \\leq m \\leq 400\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 405;\nstruct node {\n    int x, y;\n    int s; // \u8d70\u4e86\u591a\u5c11\u6b65\n};\nint g[N][N];\nint dir[8][2] = {{-1, -2},\n                 {-2, -1},\n                 {-2, 1},\n                 {-1, 2},\n                 {1, 2},\n                 {2, 1},\n                 {2, -1},\n                 {1, -2}}; // 8\u4e2a\u65b9\u5411\nint x, y, n, m;\nqueue&lt;node&gt; q;\nint main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;\n    memset(g, -1, sizeof(g)); // \u8ba9\u6570\u7ec4\u90fd\u53d8\u6210-1\uff0c\u4e5f\u53ef\u4ee5\u4e24\u5c42\u5faa\u73af\uff0c\u4f46\u4e0d\u80fd\u8bbe\u6210\u5176\u4ed6\u503c\uff08\u4f1a\u51fa\u9519\uff09\n    g[x][y] = 0;\n    q.push({x, y, 0});\n    while (!q.empty()) {\n        node now = q.front();\n        q.pop();\n        int x = now.x, y = now.y, s = now.s; // \u53d6\u51fa\u961f\u5934\u5143\u7d20\n        for (int i = 0; i &lt;= 7; i++) {\n            int nx = x + dir[i][0];\n            int ny = y + dir[i][1];\n            if (nx &lt; 1 || nx &gt; n || ny &lt; 1 || ny &gt; m || g[nx][ny] != -1)\n                continue;            // \u8d8a\u754c\u6216\u8005\u5df2\u7ecf\u8d70\u8fc7\n            g[nx][ny] = s + 1;       // \u8bb0\u5f55\u6b65\u6570\n            q.push({nx, ny, s + 1}); // \u5165\u961f\n        }\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            cout &lt;&lt; g[i][j] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"DataStruct/14%20%E3%80%81BFS/#eg41","title":"e.g.41 \u5947\u602a\u7684\u7535\u68af","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5475\u5475\uff0c\u6709\u4e00\u5929\u6211\u505a\u4e86\u4e00\u4e2a\u68a6\uff0c\u68a6\u89c1\u4e86\u4e00\u79cd\u5f88\u5947\u602a\u7684\u7535\u68af\u3002\u5927\u697c\u7684\u6bcf\u4e00\u5c42\u697c\u90fd\u53ef\u4ee5\u505c\u7535\u68af\uff0c\u800c\u4e14\u7b2c \\(i\\) \u5c42\u697c\uff08\\(1 \\le i \\le N\\)\uff09\u4e0a\u6709\u4e00\u4e2a\u6570\u5b57 \\(K_i\\)\uff08\\(0 \\le K_i \\le N\\)\uff09\u3002\u7535\u68af\u53ea\u6709\u56db\u4e2a\u6309\u94ae\uff1a\u5f00\uff0c\u5173\uff0c\u4e0a\uff0c\u4e0b\u3002\u4e0a\u4e0b\u7684\u5c42\u6570\u7b49\u4e8e\u5f53\u524d\u697c\u5c42\u4e0a\u7684\u90a3\u4e2a\u6570\u5b57\u3002\u5f53\u7136\uff0c\u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u76f8\u5e94\u7684\u6309\u94ae\u5c31\u4f1a\u5931\u7075\u3002\u4f8b\u5982\uff1a \\(3, 3, 1, 2, 5\\) \u4ee3\u8868\u4e86 \\(K_i\\)\uff08\\(K_1=3\\)\uff0c\\(K_2=3\\)\uff0c\u2026\u2026\uff09\uff0c\u4ece \\(1\\) \u697c\u5f00\u59cb\u3002\u5728 \\(1\\) \u697c\uff0c\u6309\u201c\u4e0a\u201d\u53ef\u4ee5\u5230 \\(4\\) \u697c\uff0c\u6309\u201c\u4e0b\u201d\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709 \\(-2\\) \u697c\u3002\u90a3\u4e48\uff0c\u4ece \\(A\\) \u697c\u5230 \\(B\\) \u697c\u81f3\u5c11\u8981\u6309\u51e0\u6b21\u6309\u94ae\u5462\uff1f</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u5171\u4e8c\u884c\u3002  </p> <p>\u7b2c\u4e00\u884c\u4e3a\u4e09\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570\uff0c\u8868\u793a \\(N, A, B\\)\uff08\\(1 \\le N \\le 200\\)\uff0c\\(1 \\le A, B \\le N\\)\uff09\u3002</p> <p>\u7b2c\u4e8c\u884c\u4e3a \\(N\\) \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u975e\u8d1f\u6574\u6570\uff0c\u8868\u793a \\(K_i\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u884c\uff0c\u5373\u6700\u5c11\u6309\u952e\u6b21\u6570\uff0c\u82e5\u65e0\u6cd5\u5230\u8fbe\uff0c\u5219\u8f93\u51fa <code>-1</code>\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>5 1 5\n3 3 1 2 5\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>3\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e \\(100 \\%\\) \u7684\u6570\u636e\uff0c\\(1 \\le N \\le 200\\)\uff0c\\(1 \\le A, B \\le N\\)\uff0c\\(0 \\le K_i \\le N\\)\u3002</p> <p>\u672c\u9898\u5171 \\(16\\) \u4e2a\u6d4b\u8bd5\u70b9\uff0c\u524d \\(15\\) \u4e2a\u6bcf\u4e2a\u6d4b\u8bd5\u70b9 \\(6\\) \u5206\uff0c\u6700\u540e\u4e00\u4e2a\u6d4b\u8bd5\u70b9 \\(10\\) \u5206\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint N, A, B, w[205];\n\nstruct node {  // \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u7528\u4e8e\u5b58\u50a8\u961f\u5217\u4e2d\u7684\u5143\u7d20\n    int floor; // \u5f53\u524d\u697c\u5c42\n    int time;  // \u5230\u8fbe\u5f53\u524d\u697c\u5c42\u6240\u9700\u7684\u65f6\u95f4\n};\n\nqueue&lt;node&gt; q; // \u5b9a\u4e49\u4e00\u4e2a\u961f\u5217\uff0c\u7528\u4e8e\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\nbool vis[205]; // \u5b9a\u4e49\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u7528\u4e8e\u6807\u8bb0\u662f\u5426\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u67d0\u4e00\u5c42\n\nint main() {\n    cin &gt;&gt; N &gt;&gt; A &gt;&gt; B;\n    for (int i = 1; i &lt;= N; i++) {\n        cin &gt;&gt; w[i];\n    }\n\n    q.push({A, 0}); // \u5c06\u8d77\u59cb\u697c\u5c42\u52a0\u5165\u961f\u5217\uff0c\u5e76\u521d\u59cb\u5316\u65f6\u95f4\u4e3a0\n    vis[A] = 1;     // \u6807\u8bb0\u8d77\u59cb\u697c\u5c42\u4e3a\u5df2\u8bbf\u95ee\n\n    while (!q.empty()) {      // \u5f53\u961f\u5217\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u8fdb\u884c\u5faa\u73af\n        node now = q.front(); // \u83b7\u53d6\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n        q.pop();              // \u5c06\u8be5\u5143\u7d20\u4ece\u961f\u5217\u4e2d\u79fb\u9664\n        int f = now.floor;    \n        int t = now.time;     \n\n        if (f == B) {  // \u5982\u679c\u5f53\u524d\u697c\u5c42\u662f\u76ee\u6807\u697c\u5c42\n            cout &lt;&lt; t; // \u8f93\u51fa\u5230\u8fbe\u76ee\u6807\u697c\u5c42\u6240\u9700\u7684\u65f6\u95f4\n            return 0;  // \u7ed3\u675f\u7a0b\u5e8f\n        }\n        // \u5c1d\u8bd5\u5411\u4e0a\u8df3\n        if (f + w[f] &lt;= N &amp;&amp; vis[f + w[f]] == 0) { // \u5982\u679c\u53ef\u4ee5\u5411\u4e0a\u8df3\uff0c\u5e76\u4e14\u76ee\u6807\u697c\u5c42\u672a\u88ab\u8bbf\u95ee\n            vis[f + w[f]] = 1;                     // \u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\n            q.push({f + w[f], t + 1});             // \u5c06\u65b0\u697c\u5c42\u52a0\u5165\u961f\u5217\uff0c\u5e76\u589e\u52a0\u65f6\u95f4\n        }\n        // \u5c1d\u8bd5\u5411\u4e0b\u8df3\n        if (f - w[f] &gt;= 1 &amp;&amp; vis[f - w[f]] == 0) { // \u5982\u679c\u53ef\u4ee5\u5411\u4e0b\u8df3\uff0c\u5e76\u4e14\u76ee\u6807\u697c\u5c42\u672a\u88ab\u8bbf\u95ee\n            vis[f - w[f]] = 1;                     // \u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\n            q.push({f - w[f], t + 1});             // \u5c06\u65b0\u697c\u5c42\u52a0\u5165\u961f\u5217\uff0c\u5e76\u589e\u52a0\u65f6\u95f4\n        }\n    }\n    cout &lt;&lt; -1 &lt;&lt; endl; // \u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u8bf4\u660e\u65e0\u6cd5\u5230\u8fbe\u76ee\u6807\u697c\u5c42\uff0c\u8f93\u51fa-1\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/14%20%E3%80%81BFS/#eg42-2018-ab","title":"e.g.42 [\u84dd\u6865\u676f 2018 \u7701 AB] \u5168\u7403\u53d8\u6696","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4f60\u6709\u4e00\u5f20\u67d0\u6d77\u57df \\(N \\times N\\) \u50cf\u7d20\u7684\u7167\u7247\uff0c<code>.</code> \u8868\u793a\u6d77\u6d0b\u3001 <code>#</code> \u8868\u793a\u9646\u5730\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>.......\n.##....\n.##....\n....##.\n..####.\n...###.\n.......\n</code></pre> <p>\u5176\u4e2d \"\u4e0a\u4e0b\u5de6\u53f3\" \u56db\u4e2a\u65b9\u5411\u4e0a\u8fde\u5728\u4e00\u8d77\u7684\u4e00\u7247\u9646\u5730\u7ec4\u6210\u4e00\u5ea7\u5c9b\u5c7f\u3002\u4f8b\u5982\u4e0a\u56fe\u5c31\u6709 \\(2\\) \u5ea7\u5c9b\u5c7f\u3002</p> <p>\u7531\u4e8e\u5168\u7403\u53d8\u6696\u5bfc\u81f4\u4e86\u6d77\u9762\u4e0a\u5347\uff0c\u79d1\u5b66\u5bb6\u9884\u6d4b\u672a\u6765\u51e0\u5341\u5e74\uff0c\u5c9b\u5c7f\u8fb9\u7f18\u4e00\u4e2a\u50cf\u7d20\u7684\u8303\u56f4\u4f1a\u88ab\u6d77\u6c34\u6df9\u6ca1\u3002\u5177\u4f53\u6765\u8bf4\u5982\u679c\u4e00\u5757\u9646\u5730\u50cf\u7d20\u4e0e\u6d77\u6d0b\u76f8\u90bb\uff08\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u76f8\u90bb\u50cf\u7d20\u4e2d\u6709\u6d77\u6d0b\uff09\uff0c\u5b83\u5c31\u4f1a\u88ab\u6df9\u6ca1\u3002</p> <p>\u4f8b\u5982\u4e0a\u56fe\u4e2d\u7684\u6d77\u57df\u672a\u6765\u4f1a\u53d8\u6210\u5982\u4e0b\u6837\u5b50\uff1a</p> <pre><code>.......\n.......\n.......\n.......\n....#..\n.......\n.......\n</code></pre> <p>\u8bf7\u4f60\u8ba1\u7b97\uff1a\u4f9d\u7167\u79d1\u5b66\u5bb6\u7684\u9884\u6d4b\uff0c\u7167\u7247\u4e2d\u6709\u591a\u5c11\u5c9b\u5c7f\u4f1a\u88ab\u5b8c\u5168\u6df9\u6ca1\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 \\(N\\)\u3002\\((1 \\le N \\le 1000)\\)\u3002</p> <p>\u4ee5\u4e0b \\(N\\) \u884c \\(N\\) \u5217\u4ee3\u8868\u4e00\u5f20\u6d77\u57df\u7167\u7247\u3002</p> <p>\u7167\u7247\u4fdd\u8bc1\u7b2c \\(1\\) \u884c\u3001\u7b2c \\(1\\) \u5217\u3001\u7b2c \\(N\\) \u884c\u3001\u7b2c \\(N\\) \u5217\u7684\u50cf\u7d20\u90fd\u662f\u6d77\u6d0b\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6574\u6570\u8868\u793a\u7b54\u6848\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>7 \n.......\n.##....\n.##....\n....##.\n..####.\n...###.\n.......\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>1\n</code></pre> <p>\u63d0\u793a</p> <p>\u65f6\u9650 1 \u79d2, 256M</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e3 + 10;\nstruct node {\n    int x, y;\n};\nint dir[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\nchar g[N][N];\nbool vis[N][N];\nint n, ans;\nint bfs(int sx, int sy) {\n    queue&lt;node&gt; q;\n    q.push({sx, sy});\n    vis[sx][sy] = 1;\n    bool flag = 0;\n    while (!q.empty()) {\n        node now = q.front();\n        q.pop();\n        int x = now.x, y = now.y;\n        if (g[x + 1][y] == '#' &amp;&amp; g[x - 1][y] == '#' &amp;&amp; g[x][y + 1] == '#' &amp;&amp; g[x][y - 1] == '#')\n            flag = 1;\n        for (int i = 0; i &lt;= 3; i++) {\n            int nx = x + dir[i][0];\n            int ny = y + dir[i][1];\n            if (nx &lt; 1 || nx &gt; n || ny &lt; 1 || ny &gt; n || vis[nx][ny] || g[nx][ny] == '.')\n                continue;\n            vis[nx][ny] = 1;\n            q.push({nx, ny});\n        }\n    }\n    if (flag == 1)\n        return false;\n    else\n        return true;\n}\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++)\n        scanf(\"%s\", g[i] + 1);\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= n; j++) {\n            if (g[i][j] == '#' &amp;&amp; vis[i][j] == 0) {\n                if (bfs(i, j))\n                    ans++;\n            }\n        }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/14%20%E3%80%81BFS/#eg43","title":"e.g.43 \u4e5d\u5bab\u91cd\u6392","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5982\u4e0b\u56fe\u7684\u4e5d\u5bab\u683c\u4e2d\uff0c\u653e\u7740 1 ~ 8 \u7684\u6570\u5b57\u5361\u7247\uff0c\u8fd8\u6709\u4e00\u4e2a\u683c\u5b50\u7a7a\u7740\u3002\u4e0e\u7a7a\u683c\u5b50\u76f8\u90bb\u7684\u683c\u5b50\u4e2d\u7684\u5361\u7247\u53ef\u4ee5\u79fb\u52a8\u5230\u7a7a\u683c\u4e2d\u3002 \u7ecf\u8fc7\u82e5\u5e72\u6b21\u79fb\u52a8\uff0c\u53ef\u4ee5\u5f62\u6210\u56fe 2 \u6240\u793a\u7684\u5c40\u9762\u3002</p> <p></p> <p>\u6211\u4eec\u628a\u4e0a\u56fe\u7684\u5c40\u9762\u8bb0\u4e3a\uff1a12345678.</p> <p>\u628a\u4e0b\u56fe\u7684\u5c40\u9762\u8bb0\u4e3a\uff1a123.46758</p> <p></p> <p>\u663e\u7136\u662f\u6309\u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u8bb0\u5f55\u6570\u5b57\uff0c\u7a7a\u683c\u8bb0\u4e3a\u53e5\u70b9\u3002</p> <p>\u9898\u76ee\u7684\u4efb\u52a1\u662f\u5df2\u77e5\u4e5d\u5bab\u7684\u521d\u6001\u548c\u7ec8\u6001\uff0c\u6c42\u6700\u5c11\u7ecf\u8fc7\u591a\u5c11\u6b65\u7684\u79fb\u52a8\u53ef\u4ee5\u5230\u8fbe\u3002\u5982\u679c\u65e0\u8bba\u591a\u5c11\u6b65\u90fd\u65e0\u6cd5\u5230\u8fbe\uff0c\u5219\u8f93\u51fa -1\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0</p> <p>\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e5d\u5bab\u7684\u521d\u6001\uff0c\u7b2c\u4e8c\u884c\u5305\u542b\u4e5d\u5bab\u7684\u7ec8\u6001\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0</p> <p>\u8f93\u51fa\u6700\u5c11\u7684\u6b65\u6570\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u65b9\u6848\uff0c\u5219\u8f93\u51fa -1\u3002</p> <p>\u8f93\u5165\u8f93\u51fa\u6837\u4f8b</p> <p>\u793a\u4f8b</p> <p>\u8f93\u5165</p> <pre><code>12345678.\n123.46758\n</code></pre> <p>\u8f93\u51fa</p> <pre><code>3\n</code></pre> <p>Tip</p> <p>\u5b57\u7b26\u4e32\u2192\u4e8c\u7ef4\u6570\u7ec4\u2192\u5b57\u7b26\u4e32</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct node {\n    string s;\n    int k;\n};\nint dir[4][2] = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};\nstring start, goal;\nqueue&lt;node&gt; q;\nmap&lt;string, int&gt; m;\nint main() {\n    cin &gt;&gt; start &gt;&gt; goal;\n    q.push({start, 0});\n    m[start] = 1;\n    while (!q.empty()) {\n        node now = q.front();\n        q.pop();\n        string s = now.s;\n        int k = now.k;\n        int p = 0, x, y;\n        if (s == goal) {\n            cout &lt;&lt; k &lt;&lt; endl;\n            return 0;\n        }\n        for (int i = 0; i &lt; s.size(); i++)\n            if (s[i] == '.')\n                p = i;\n        x = p / 3 + 1, y = p % 3 + 1;\n        for (int i = 0; i &lt;= 3; i++) {\n            int nx = x + dir[i][0];\n            int ny = y + dir[i][1];\n            if (nx &lt; 1 || nx &gt; 3 || ny &lt; 1 || ny &gt; 3)\n                continue;\n            int np = (nx - 1) * 3 + ny - 1;\n            string ns = s;\n            swap(ns[p], ns[np]);\n            if (m[ns])\n                continue;\n            m[ns] = 1;\n            q.push({ns, k + 1});\n        }\n    }\n    cout &lt;&lt; -1 &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/14%20%E3%80%81BFS/#eg44","title":"e.g.44 \u8d28\u6570\u62fc\u56fe\u6e38\u620f","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u62fc\u56fe\u6e38\u620f\u7531\u4e00\u4e2a3\u00d73\u7684\u68cb\u76d8\u548c\u6570\u5b571-9\u7ec4\u6210\u3002\u76ee\u6807\u662f\u8fbe\u5230\u4ee5\u4e0b\u6700\u7ec8\u72b6\u6001\uff1a 1 2 3 4 5 6 7 8 9 \u6bcf\u6b21\u5982\u679c\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u4e4b\u548c\u4e3a\u8d28\u6570\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c\u4ea4\u6362\u3002 \u76f8\u90bb\uff1a\u4e0a\u4e0b\u5de6\u53f3\u56db\u8054\u901a \u7ed9\u5b9a\u4e00\u4e2a\u68cb\u76d8\u521d\u59cb\u72b6\u6001\uff0c\u6c42\u5230\u8fbe\u6700\u7ec8\u72b6\u6001\u7684\u6700\u77ed\u6b65\u6570\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e3a\u6b63\u6574\u6570T\uff0c\u8868\u793a\u5b58\u5728T\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c1\u2264T\u226450\u3002 \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51653\u884c\uff0c\u6bcf\u884c3\u4e2a\u6570\u5b57\u8868\u793a\u68cb\u76d8\u3002 \u8f93\u5165\u4fdd\u8bc1\u5408\u6cd5\uff0c\u68cb\u76d8\u4e2d\u76849\u4e2a\u6570\u5b57\u4ec5\u4e3a1-9\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u8868\u793a\u7b54\u6848\u3002\u5982\u679c\u65e0\u6cd5\u5230\u8fbe\u6700\u7ec8\u72b6\u6001\uff0c\u8f93\u51fa-1\u3002</p> <p>\u8f93\u5165\u6837\u4f8b </p> <pre><code>2\n7 3 2\n4 1 5\n6 8 9\n9 8 5\n2 4 1\n3 7 6\n</code></pre> <p>\u8f93\u51fa\u6837\u4f8b </p> <pre><code>6\n-1\n</code></pre> <p>\u6570\u636e\u8303\u56f4\u4e0e\u63d0\u793a</p> <p>\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u76846\u6b65\u5982\u4e0b\uff1a </p>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/","title":"15 \u3001\u6570\u8bba","text":"<ul> <li>1\u3001\u6a21\u8fd0\u7b97</li> <li>2\u3001\u5feb\u901f\u5e42</li> <li>3\u3001\u57c3\u6c0f\u7b5b</li> <li>4\u3001GCD/LCM<ul> <li>GCD</li> <li>LCM</li> </ul> </li> <li>\u4f8b\u9898<ul> <li>e.g.45 [\u84dd\u6865\u676f 2022 \u7701 B] \u5237\u9898\u7edf\u8ba1</li> <li>e.g.46 [\u84dd\u6865\u676f 2018 \u7701 A] \u500d\u6570\u95ee\u9898</li> <li>e.g.47\u3010\u6a21\u677f\u3011\u5feb\u901f\u5e42</li> <li>e.g.48 [HNOI2008] \u8d8a\u72f1</li> <li>e.g.49 [NOIP2002 \u666e\u53ca\u7ec4] \u9009\u6570</li> <li>e.g. 50 [GESP202309 \u4e94\u7ea7] \u56e0\u6570\u5206\u89e3</li> <li>e.g.51 \u7d20\u6570\u5bc6\u5ea6</li> <li>e.g.52 \u6838\u6843\u7684\u6570\u91cf</li> <li>e.g.52[\u84dd\u6865\u676f 2019 \u7701 B] \u7b49\u5dee\u6570\u5217</li> </ul> </li> </ul>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#1","title":"1\u3001\u6a21\u8fd0\u7b97","text":"\\[ (a+b) \\mod m=((a \\mod m)+(b\\mod m))\\mod m\\\\ \\] \\[ (a-b) \\mod m=((a \\mod m)-(b\\mod m)+m)\\mod m\\\\ \\] \\[ (a*b) \\mod m=((a \\mod m)*(b\\mod m))\\mod m\\\\ \\]"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#2","title":"2\u3001\u5feb\u901f\u5e42","text":"<p>\u6bcf\u6b21\u6298\u534a\uff0c\u81ea\u5df1\u8ddf\u81ea\u5df1\u4e58</p> \\[ 2^{10}=4^{5}=4\\times16^{2}=4\\times256^{1} \\] <pre><code>long long fast_pow(int a, int b) {\n    int ans = 1;\n    while (b) {\n        if (b % 2 == 1) {\n            ans = ans * a;\n        }\n        a = a * a;\n        b /= 2;\n    }\n    return ans;\n}\n</code></pre>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#3","title":"3\u3001\u57c3\u6c0f\u7b5b","text":"<p>\u7ed9\u5b9an\uff0c\u6c42\\(2\\sim n\\) \u5185\u6240\u6709\u7d20\u6570</p> <pre><code>const int MAX_N = 1e6 + 10; // \u53ef\u4ee5\u6839\u636e\u9700\u8981\u4fee\u6539\u8fd9\u4e2a\u503c\nbool is_prime[MAX_N]; // \u7528\u6765\u6807\u8bb0\u7d20\u6570\n\nvoid sieve() {\n    fill(is_prime, is_prime + MAX_N, true); // \u521d\u59cb\u5316\u6240\u6709\u6570\u4e3a\u7d20\u6570\n    is_prime[0] = is_prime[1] = false; // 0\u548c1\u4e0d\u662f\u7d20\u6570\n\n    for (int i = 2; i * i &lt; MAX_N; i++) {\n        if (is_prime[i]) {\n            for (int j = i * i; j &lt; MAX_N; j += i) {\n                is_prime[j] = false; // \u5c06i\u7684\u500d\u6570\u6807\u8bb0\u4e3a\u975e\u7d20\u6570\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#4gcdlcm","title":"4\u3001GCD/LCM","text":""},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#gcd","title":"GCD","text":"<ul> <li>\u624b\u5199</li> </ul> \\[ gcd(a,b)=gcd(b,a \\mod b) \\] <pre><code>int gcd(int x, int y) {\n    return y == 0 ? x : gcd(y, x % y);\n} \n</code></pre> <ul> <li>\u5e93\u51fd\u6570<code>__gcd(a,b)</code></li> </ul>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#lcm","title":"LCM","text":"\\[ LCM=\\frac{a\\times b}{GCD} \\] <pre><code>int lcm(int x, int y) {\n    return x / gcd(x, y) * y; // \u5148\u9664\u540e\u4e58\uff0c\u9632\u6b62\u6ea2\u51fa\n}\n</code></pre>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#eg45-2022-b","title":"e.g.45 [\u84dd\u6865\u676f 2022 \u7701 B] \u5237\u9898\u7edf\u8ba1","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5c0f\u660e\u51b3\u5b9a\u4ece\u4e0b\u5468\u4e00\u5f00\u59cb\u52aa\u529b\u5237\u9898\u51c6\u5907\u84dd\u6865\u676f\u7ade\u8d5b\u3002\u4ed6\u8ba1\u5212\u5468\u4e00\u81f3\u5468\u4e94\u6bcf\u5929\u505a \\(a\\) \u9053\u9898\u76ee\uff0c\u5468\u516d\u548c\u5468\u65e5\u6bcf\u5929\u505a \\(b\\) \u9053\u9898\u76ee\u3002\u8bf7\u4f60\u5e2e\u5c0f\u660e\u8ba1\u7b97\uff0c\u6309\u7167\u8ba1\u5212\u4ed6\u5c06\u5728\u7b2c\u51e0\u5929\u5b9e\u73b0\u505a\u9898\u6570\u5927\u4e8e\u7b49\u4e8e \\(n\\) \u9898?</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 \\(a, b\\) \u548c \\(n\\).</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u5929\u6570\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>10 20 99\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>8\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e \\(50 \\%\\) \u7684\u8bc4\u6d4b\u7528\u4f8b\uff0c\\(1 \\leq a, b, n \\leq 10^{6}\\).</p> <p>\u5bf9\u4e8e \\(100 \\%\\) \u7684\u8bc4\u6d4b\u7528\u4f8b\uff0c\\(1 \\leq a, b, n \\leq 10^{18}\\). </p> <p>\u84dd\u6865\u676f 2022 \u7701\u8d5b B \u7ec4 C \u9898\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define int long long\nint32_t main() {\n    int a, b, n;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; n;\n    int sum = (5 * a) + (2 * b);\n    // cout &lt;&lt; sum &lt;&lt; endl;\n    int day=n/sum*7;\n    n-=n/sum*sum;   \n    for(int i=1;i&lt;=5;i++){\n        if(n&gt;0){\n            day++;\n            n-=a;\n        }\n    }\n    for(int i=1;i&lt;=2;i++){\n        if(n&gt;0){\n            day++;\n            n-=b;\n        }\n    }\n\n    cout &lt;&lt; day &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#eg46-2018-a","title":"e.g.46 [\u84dd\u6865\u676f 2018 \u7701 A] \u500d\u6570\u95ee\u9898","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4f17\u6240\u5468\u77e5\uff0c\u5c0f\u8471\u540c\u5b66\u64c5\u957f\u8ba1\u7b97\uff0c\u5c24\u5176\u64c5\u957f\u8ba1\u7b97\u4e00\u4e2a\u6570\u662f\u5426\u662f\u53e6\u5916\u4e00\u4e2a\u6570\u7684\u500d\u6570\u3002\u4f46\u5c0f\u8471\u53ea\u64c5\u957f\u4e24\u4e2a\u6570\u7684\u60c5\u51b5\uff0c\u5f53\u6709\u5f88\u591a\u4e2a\u6570\u4e4b\u540e\u5c31\u4f1a\u6bd4\u8f83\u82e6\u607c\u3002\u73b0\u5728\u5c0f\u8471\u7ed9\u4e86\u4f60 \\(n\\) \u4e2a\u6570\uff0c\u5e0c\u671b\u4f60\u4ece\u8fd9 \\(n\\) \u4e2a\u6570\u4e2d\u627e\u5230\u4e09\u4e2a\u6570\uff0c\u4f7f\u5f97\u8fd9\u4e09\u4e2a\u6570\u7684\u548c\u662f \\(K\\) \u7684\u500d\u6570\uff0c\u4e14\u8fd9\u4e2a\u548c\u6700\u5927\u3002\u6570\u636e\u4fdd\u8bc1\u4e00\u5b9a\u6709\u89e3\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u5165\u6570\u636e\u3002</p> <p>\u7b2c\u4e00\u884c\u5305\u62ec \\(2\\) \u4e2a\u6b63\u6574\u6570\u8868\u793a \\(n\\) \u548c \\(K\\)\u3002</p> <p>\u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6b63\u6574\u6570\uff0c\u4ee3\u8868\u7ed9\u5b9a\u7684 \\(n\\) \u4e2a\u6570\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u6240\u6c42\u7684\u548c\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>4 3\n1 2 3 4\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>9\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6837\u4f8b\u89e3\u91ca\u3011</p> <p>\u9009\u62e9 \\(2\\)\u3001\\(3\\)\u3001\\(4\\)\u3002</p> <p>\u3010\u6570\u636e\u7ea6\u5b9a\u3011</p> <p>\u5bf9\u4e8e \\(30\\%\\) \u7684\u6570\u636e\uff0c\\(n \\le 100\\)\u3002</p> <p>\u5bf9\u4e8e \\(60\\%\\) \u7684\u6570\u636e\uff0c\\(n \\le 1000\\)\u3002</p> <p>\u5bf9\u4e8e\u53e6\u5916 \\(20\\%\\) \u7684\u6570\u636e\uff0c\\(K \\le 10\\)\u3002</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\le n \\le 10^5\\)\uff0c\\(1 \\le K \\le 10^3\\)\uff0c\u7ed9\u5b9a\u7684 \\(n\\) \u4e2a\u6570\u5747\u4e0d\u8d85\u8fc7 \\(10^8\\)\u3002</p> <p>\u65f6\u9650 1 \u79d2\uff0c256M\u3002\u84dd\u6865\u676f 2018 \u5e74\u7b2c\u4e5d\u5c4a\u7701\u8d5b\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e3 + 10;\nint n, k, ans;\nvector&lt;int&gt; v[N];\nbool cmp(int x, int y) {\n    return x &gt; y;\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++) {\n        int x;\n        cin &gt;&gt; x;\n        v[x % k].push_back(x);\n    }\n    for (int i = 0; i &lt; k; i++)\n        sort(v[i].begin(), v[i].end(), cmp);\n    for (int i = 0; i &lt; k; i++)\n        for (int j = 0; j &lt; k; j++) {\n            int u = k - i - j;\n            if (u &lt; 0)\n                u += k;\n            if (i == 0 &amp;&amp; j == 0)\n                u = 0;\n\n            int x, y, z;\n            if (v[i].size() == 0)\n                continue;\n            else\n                x = v[i][0];\n\n            if (i == j) {\n                if (v[j].size() &lt;= 1)\n                    continue;\n                else\n                    y = v[j][1];\n            } else if (v[j].size() == 0)\n                continue;\n            else\n                y = v[j][0];\n\n            if (u == i &amp;&amp; u != j) {\n                if (v[i].size() &lt;= 1)\n                    continue;\n                else\n                    z = v[i][1];\n            } else if (u == j &amp;&amp; u != i) {\n                if (v[j].size() &lt;= 1)\n                    continue;\n                else\n                    z = v[j][1];\n            } else if (i == u &amp;&amp; j == u) {\n                if (v[u].size() &lt;= 2)\n                    continue;\n                else\n                    z = v[u][2];\n            } else if (v[u].size() == 0)\n                continue;\n            else\n                z = v[u][0];\n\n            ans = max(ans, x + y + z);\n        }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#eg47","title":"e.g.47\u3010\u6a21\u677f\u3011\u5feb\u901f\u5e42","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u4f60\u4e09\u4e2a\u6574\u6570 \\(a,b,p\\)\uff0c\u6c42 \\(a^b \\bmod p\\)\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u53ea\u6709\u4e00\u884c\u4e09\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4ee3\u8868 \\(a,b,p\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>a^b mod p=s</code>\uff0c\u5176\u4e2d \\(a,b,p\\) \u5206\u522b\u4e3a\u9898\u76ee\u7ed9\u5b9a\u7684\u503c\uff0c \\(s\\) \u4e3a\u8fd0\u7b97\u7ed3\u679c\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>2 10 9\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>2^10 mod 9=7\n</code></pre> <p>\u63d0\u793a</p> <p>\u6837\u4f8b\u89e3\u91ca</p> <p>\\(2^{10} = 1024\\)\uff0c\\(1024 \\bmod 9 = 7\\)\u3002</p> <p>\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\u4fdd\u8bc1 \\(0\\le a,b &lt; 2^{31}\\)\uff0c\\(a+b&gt;0\\)\uff0c\\(2 \\leq p \\lt 2^{31}\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define int long long\nint a, b, p;\nint32_t fast_pow(int a, int b) {\n    int ans = 1;\n    while (b) {\n        if (b % 2 == 1) {\n            ans = ans * a % p;\n        }\n        a = a * a % p;\n        b /= 2;\n    }\n    return ans % p;\n}\nint32_t main() {\n\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;\n    cout &lt;&lt; a &lt;&lt; '^' &lt;&lt; b &lt;&lt; \" mod \" &lt;&lt; p &lt;&lt; '=' &lt;&lt; fast_pow(a, b) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#eg48-hnoi2008","title":"e.g.48 [HNOI2008] \u8d8a\u72f1","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u76d1\u72f1\u6709 \\(n\\) \u4e2a\u623f\u95f4\uff0c\u6bcf\u4e2a\u623f\u95f4\u5173\u62bc\u4e00\u4e2a\u72af\u4eba\uff0c\u6709 \\(m\\) \u79cd\u5b97\u6559\uff0c\u6bcf\u4e2a\u72af\u4eba\u4f1a\u4fe1\u4ef0\u5176\u4e2d\u4e00\u79cd\u3002\u5982\u679c\u76f8\u90bb\u623f\u95f4\u7684\u72af\u4eba\u7684\u5b97\u6559\u76f8\u540c\uff0c\u5c31\u53ef\u80fd\u53d1\u751f\u8d8a\u72f1\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u72b6\u6001\u53ef\u80fd\u53d1\u751f\u8d8a\u72f1\u3002</p> <p>\u7b54\u6848\u5bf9 \\(100,003\\) \u53d6\u6a21\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u53ea\u6709\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4ee3\u8868\u5b97\u6559\u6570 \\(m\\) \u548c\u623f\u95f4\u6570 \\(n\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u7b54\u6848\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>2 3\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>6\n</code></pre> <p>\u63d0\u793a</p> <p>\u6837\u4f8b\u8f93\u5165\u8f93\u51fa 1 \u89e3\u91ca</p> \u72b6\u6001\u7f16\u53f7 1 \u53f7\u623f\u95f4 2 \u53f7\u623f\u95f4 3 \u53f7\u623f\u95f4 1 \u4fe1\u4ef0 1 \u4fe1\u4ef0 1 \u4fe1\u4ef0 1 2 \u4fe1\u4ef0 1 \u4fe1\u4ef0 1 \u4fe1\u4ef0 2 3 \u4fe1\u4ef0 1 \u4fe1\u4ef0 2 \u4fe1\u4ef0 2 4 \u4fe1\u4ef0 2 \u4fe1\u4ef0 1 \u4fe1\u4ef0 1 5 \u4fe1\u4ef0 2 \u4fe1\u4ef0 2 \u4fe1\u4ef0 2 6 \u4fe1\u4ef0 2 \u4fe1\u4ef0 2 \u4fe1\u4ef0 1 <p>\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\u4fdd\u8bc1 \\(1 \\le m \\le 10^8\\)\uff0c\\(1 \\le n \\le 10^{12}\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define int long long\nint m, n, mod = 100003;\n// \u5feb\u901f\u5e42\nlong long fast_pow(int a, int b) {\n    int ans = 1;\n    while (b) {\n        if (b &amp; 1) { // \u7528\u201c&amp;\u201d\u5224\u65ad\u5947\u5076\u6027\n            ans = ans * a % mod;\n        }\n        a = a * a % mod;\n        b &gt;&gt;= 1; // \u53f3\u79fb\u4e00\u4f4d,\u76f8\u5f53\u4e8e\u9664\u4ee52\n    }\n    return ans % mod;\n}\nint32_t main() {\n    cin &gt;&gt; m &gt;&gt; n;\n    int x = fast_pow(m, n);\n    int y = fast_pow(m - 1, n - 1);\n    cout &lt;&lt; (x - m * y % mod + mod) % mod &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#eg49-noip2002","title":"e.g.49 [NOIP2002 \u666e\u53ca\u7ec4] \u9009\u6570","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5df2\u77e5 \\(n\\) \u4e2a\u6574\u6570 \\(x_1,x_2,\\cdots,x_n\\)\uff0c\u4ee5\u53ca \\(1\\) \u4e2a\u6574\u6570 \\(k\\)\uff08\\(k&lt;n\\)\uff09\u3002\u4ece \\(n\\) \u4e2a\u6574\u6570\u4e2d\u4efb\u9009 \\(k\\) \u4e2a\u6574\u6570\u76f8\u52a0\uff0c\u53ef\u5206\u522b\u5f97\u5230\u4e00\u7cfb\u5217\u7684\u548c\u3002\u4f8b\u5982\u5f53 \\(n=4\\)\uff0c\\(k=3\\)\uff0c\\(4\\) \u4e2a\u6574\u6570\u5206\u522b\u4e3a \\(3,7,12,19\\) \u65f6\uff0c\u53ef\u5f97\u5168\u90e8\u7684\u7ec4\u5408\u4e0e\u5b83\u4eec\u7684\u548c\u4e3a\uff1a</p> <p>\\(3+7+12=22\\)</p> <p>\\(3+7+19=29\\)</p> <p>\\(7+12+19=38\\)</p> <p>\\(3+12+19=34\\)</p> <p>\u73b0\u5728\uff0c\u8981\u6c42\u4f60\u8ba1\u7b97\u51fa\u548c\u4e3a\u7d20\u6570\u5171\u6709\u591a\u5c11\u79cd\u3002</p> <p>\u4f8b\u5982\u4e0a\u4f8b\uff0c\u53ea\u6709\u4e00\u79cd\u7684\u548c\u4e3a\u7d20\u6570\uff1a\\(3+7+19=29\\)\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e24\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570 \\(n,k\\)\uff08\\(1 \\le n \\le 20\\)\uff0c\\(k&lt;n\\)\uff09\u3002</p> <p>\u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u5206\u522b\u4e3a \\(x_1,x_2,\\cdots,x_n\\)\uff08\\(1 \\le x_i \\le 5\\times 10^6\\)\uff09\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u79cd\u7c7b\u6570\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>4 3\n3 7 12 19\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>1\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u9898\u76ee\u6765\u6e90\u3011</p> <p>NOIP 2002 \u666e\u53ca\u7ec4\u7b2c\u4e8c\u9898</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nint n, k, ans, a[30];\nbool check(int x) {\n    if (x &lt;= 1)\n        return false;\n    for (int i = 2; i &lt;= sqrt(x); i++) {\n        if (x % i == 0)\n            return false;\n    }\n    return true;\n}\nvoid dfs(int u, int s, int sum) {\n    if (s == k) {\n        if (check(sum))\n            ans++;\n        return;\n    }\n    for (int i = u; i &lt;= n; i++)\n        dfs(i + 1, s + 1, sum + a[i]);\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    dfs(1, 0, 0);\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#eg-50-gesp202309","title":"e.g. 50 [GESP202309 \u4e94\u7ea7] \u56e0\u6570\u5206\u89e3","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6bcf\u4e2a\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u5206\u89e3\u6210\u7d20\u6570\u7684\u4e58\u79ef\uff0c\u4f8b\u5982\uff1a \\(6=2\\times 3\\)\uff0c\\(20=2^2\\times5\\)\u3002</p> <p>\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8bf7\u6309\u8981\u6c42\u8f93\u51fa\u5b83\u7684\u56e0\u6570\u5206\u89e3\u5f0f\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7b2c\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 \\(N\\)\u3002\u7ea6\u5b9a \\(2 \\le N \\le 10^{12}\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\uff0c\u4e3a\u7684\u56e0\u6570\u5206\u89e3\u5f0f\u3002\u8981\u6c42\u6309\u8d28\u56e0\u6570\u7531\u5c0f\u5230\u5927\u6392\u5217\uff0c\u4e58\u53f7\u7528\u661f\u53f7 <code>*</code> \u8868\u793a\uff0c\u4e14\u5de6\u53f3\u5404\u7a7a\u4e00\u683c\u3002\u5f53\u4e14\u4ec5\u5f53\u4e00\u4e2a\u7d20\u6570\u51fa\u73b0\u591a\u6b21\u65f6\uff0c\u5c06\u5b83\u4eec\u5408\u5e76\u4e3a\u6307\u6570\u5f62\u5f0f\uff0c\u7528\u4e0a\u7bad\u5934 <code>^</code> \u8868\u793a\uff0c\u4e14\u5de6\u53f3\u4e0d\u7a7a\u683c\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>6\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>2 * 3\n</code></pre> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>20\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>2^2 * 5\n</code></pre> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>23\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>23\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nll n, cnt;\nint main() {\n    cin &gt;&gt; n;\n    for (ll i = 2; i * i &lt;= n; i++) // \u8bb0\u5f97\u5f00long long\uff0c\u4ece2\u5f00\u59cb\n    {\n        cnt = 0;        // \u8bb0\u5f55\u8d28\u56e0\u6570\u4e2a\u6570\n        if (n % i == 0) // \u5982\u679ci\u662f\u8d28\u56e0\u6570\n        {\n            while (n % i == 0) // \u4e00\u76f4\u5206\u89e3\u76f4\u5230\u65e0\u6cd5\u5206\u89e3\u4e3a\u6b62\n            {\n                n /= i;\n                cnt++;\n            }\n            if (cnt == 1)\n                cout &lt;&lt; i; // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\uff0c\u4e0d\u7528\u8f93\u51fa\u6307\u6570\n            else\n                cout &lt;&lt; i &lt;&lt; '^' &lt;&lt; cnt; // \u5426\u5219\u8f93\u51fa\u6307\u6570\n            if (n &gt; 1)\n                cout &lt;&lt; \" * \"; // \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u8d28\u56e0\u6570\u5c31\u8f93\u51fa\u4e58\u53f7\n        }\n    }\n    if (n &gt; 1)\n        cout &lt;&lt; n; // \u5982\u679c\u6ca1\u5206\u89e3\u5e72\u51c0\u5c31\u8f93\u51fa\u5269\u4e0b\u7684\u8d28\u56e0\u6570\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#eg51","title":"e.g.51 \u7d20\u6570\u5bc6\u5ea6","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u5b9a \\(L,R\\)\uff0c\u8bf7\u8ba1\u7b97\u533a\u95f4 \\([L,R]\\) \u4e2d\u7d20\u6570\u7684\u4e2a\u6570\u3002</p> <p>\\(1\\leq L\\leq R &lt; 2^{31}\\)\uff0c\\(R-L\\leq 10^6\\)\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6b63\u6574\u6570 \\(L\\) \u548c \\(R\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u533a\u95f4\u4e2d\u7d20\u6570\u7684\u4e2a\u6570\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>2 11\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>5\n</code></pre>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#eg52","title":"e.g.52 \u6838\u6843\u7684\u6570\u91cf","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5c0f\u5f20\u662f\u8f6f\u4ef6\u9879\u76ee\u7ecf\u7406\uff0c\u4ed6\u5e26\u9886 \\(3\\)\u4e2a\u5f00\u53d1\u7ec4\u3002\u5de5\u671f\u7d27\uff0c\u4eca\u5929\u90fd\u5728\u52a0\u73ed\u5462\u3002\u4e3a\u9f13\u821e\u58eb\u6c14\uff0c\u5c0f\u5f20\u6253\u7b97\u7ed9\u6bcf\u4e2a\u7ec4\u53d1\u4e00\u888b\u6838\u6843\uff08\u636e\u4f20\u8a00\u80fd\u8865\u8111\uff09\u3002\u4ed6\u7684\u8981\u6c42\u662f\uff1a</p> <ol> <li>\u5404\u7ec4\u7684\u6838\u6843\u6570\u91cf\u5fc5\u987b\u76f8\u540c</li> <li>\u5404\u7ec4\u5185\u5fc5\u987b\u80fd\u5e73\u5206\u6838\u6843\uff08\u5f53\u7136\u662f\u4e0d\u80fd\u6253\u788e\u7684\uff09</li> <li>\u5c3d\u91cf\u63d0\u4f9b\u6ee1\u8db3 1,2 \u6761\u4ef6\u7684\u6700\u5c0f\u6570\u91cf\uff08\u8282\u7ea6\u95f9\u9769\u547d\u561b\uff09</li> </ol> <p>\u8f93\u5165\u63cf\u8ff0</p> <p>\u8f93\u5165\u4e00\u884c \\(a,b,c\\)\uff0c\u90fd\u662f\u6b63\u6574\u6570\uff0c\u8868\u793a\u6bcf\u4e2a\u7ec4\u6b63\u5728\u52a0\u73ed\u7684\u4eba\u6570\uff0c\u7528\u7a7a\u683c\u5206\u5f00\\((a,b,c&lt;30)\\)</p> <p>\u8f93\u51fa\u63cf\u8ff0</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u6bcf\u888b\u6838\u6843\u7684\u6570\u91cf\u3002</p> <p>\u793a\u4f8b</p> <p>\u8f93\u5165</p> <pre><code>2 4 5\n</code></pre> <p>\u8f93\u51fa</p> <pre><code>20\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n// \u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u6700\u5927\u516c\u7ea6\u6570\nint gcd(int x, int y) {\n    return y == 0 ? x : gcd(y, x % y);\n} \n\nint lcm(int x, int y) {\n    return x / gcd(x, y) * y; // \u5148\u9664\u540e\u4e58\uff0c\u9632\u6b62\u6ea2\u51fa\n}\n\nint main() {\n    int a, b, c;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n    int result = lcm(a, b);\n    cout &lt;&lt; lcm(result, c) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/15%20%E3%80%81%E6%95%B0%E8%AE%BA/#eg52-2019-b","title":"e.g.52[\u84dd\u6865\u676f 2019 \u7701 B] \u7b49\u5dee\u6570\u5217","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6570\u5b66\u8001\u5e08\u7ed9\u5c0f\u660e\u51fa\u4e86\u4e00\u9053\u7b49\u5dee\u6570\u5217\u6c42\u548c\u7684\u9898\u76ee\u3002\u4f46\u662f\u7c97\u5fc3\u7684\u5c0f\u660e\u5fd8\u8bb0\u4e86\u4e00\u90e8\u5206\u7684\u6570\u5217\uff0c\u53ea\u8bb0\u5f97\u5176\u4e2d \\(N\\) \u4e2a\u6574\u6570\u3002</p> <p>\u73b0\u5728\u7ed9\u51fa\u8fd9 \\(N\\) \u4e2a\u6574\u6570\uff0c\u5c0f\u660e\u60f3\u77e5\u9053\u5305\u542b\u8fd9 \\(N\\) \u4e2a\u6574\u6570\u7684\u6700\u77ed\u7684\u7b49\u5dee\u6570\u5217\u6709\u51e0\u9879\uff1f</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 \\(N\\)\u3002</p> <p>\u7b2c\u4e8c\u884c\u5305\u542b \\(N\\) \u4e2a\u6574\u6570 \\(A_1,A_2,\\cdots,A_N\\)\u3002\uff08\u6ce8\u610f \\(A_1 \u223c A_N\\) \u5e76\u4e0d\u4e00\u5b9a\u662f\u6309\u7b49\u5dee\u6570\u5217\u4e2d\u7684\u987a\u5e8f\u7ed9\u51fa )\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u8868\u793a\u7b54\u6848\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>5\n2 6 4 10 20\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>10\n</code></pre> <p>\u63d0\u793a</p> <p>\u5305\u542b <code>2,6,4,10,20</code> \u7684\u6700\u77ed\u7684\u7b49\u5dee\u6570\u5217\u662f <code>2,4,6,8,10,12,14,16,18,20</code>\u3002</p> <p>\u5bf9\u4e8e\u6240\u6709\u8bc4\u6d4b\u7528\u4f8b\uff0c\\(2 \\le N \\le 10^5\\)\uff0c\\(0 \\le A_i \\le 10^9\\)\u3002</p> <p>\u84dd\u6865\u676f 2019 \u5e74\u7701\u8d5b B \u7ec4 H \u9898\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    int a[1000005];\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    sort(a + 1, a + n + 1);\n    int d = 0;\n    for (int i = 1; i &lt;= n-1; i++) {\n        d = __gcd(d, a[i + 1] - a[i]);\n    }\n    if (d == 0)\n        cout &lt;&lt; n &lt;&lt; endl;\n    else\n        cout &lt;&lt; (a[n] - a[1]) / d + 1 &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/16%20%E3%80%81%E8%B4%AA%E5%BF%83/","title":"16 \u3001\u8d2a\u5fc3","text":"<ul> <li>1\u3001\u601d\u60f3</li> <li>\u4f8b\u9898<ul> <li>e.g.32\u3010\u6df1\u57fa12.\u4f8b1\u3011\u90e8\u5206\u80cc\u5305\u95ee\u9898</li> <li>e.g.33 \u51cc\u4e71\u7684yyy / \u7ebf\u6bb5\u8986\u76d6</li> <li>e.g.34 [USACO05NOV] \u5976\u725b\u73a9\u6742\u6280</li> </ul> </li> </ul>"},{"location":"DataStruct/16%20%E3%80%81%E8%B4%AA%E5%BF%83/#1","title":"1\u3001\u601d\u60f3","text":"<p>Tip</p> <p>\u628a\u4e00\u4e2a\u95ee\u9898\u5206\u6210\u82e5\u5e72\u4e2a\u5c0f\u95ee\u9898\uff0c\u627e\u5c40\u90e8\u6700\u4f18\u89e3</p>"},{"location":"DataStruct/16%20%E3%80%81%E8%B4%AA%E5%BF%83/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/16%20%E3%80%81%E8%B4%AA%E5%BF%83/#eg32121","title":"e.g.32\u3010\u6df1\u57fa12.\u4f8b1\u3011\u90e8\u5206\u80cc\u5305\u95ee\u9898","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u963f\u91cc\u5df4\u5df4\u8d70\u8fdb\u4e86\u88c5\u6ee1\u5b9d\u85cf\u7684\u85cf\u5b9d\u6d1e\u3002\u85cf\u5b9d\u6d1e\u91cc\u9762\u6709 \\(N(N \\le 100)\\) \u5806\u91d1\u5e01\uff0c\u7b2c \\(i\\) \u5806\u91d1\u5e01\u7684\u603b\u91cd\u91cf\u548c\u603b\u4ef7\u503c\u5206\u522b\u662f \\(m_i,v_i(1\\le m_i,v_i \\le 100)\\)\u3002\u963f\u91cc\u5df4\u5df4\u6709\u4e00\u4e2a\u627f\u91cd\u91cf\u4e3a \\(T(T \\le 1000)\\) \u7684\u80cc\u5305\uff0c\u4f46\u5e76\u4e0d\u4e00\u5b9a\u6709\u529e\u6cd5\u5c06\u5168\u90e8\u7684\u91d1\u5e01\u90fd\u88c5\u8fdb\u53bb\u3002\u4ed6\u60f3\u88c5\u8d70\u5c3d\u53ef\u80fd\u591a\u4ef7\u503c\u7684\u91d1\u5e01\u3002\u6240\u6709\u91d1\u5e01\u90fd\u53ef\u4ee5\u968f\u610f\u5206\u5272\uff0c\u5206\u5272\u5b8c\u7684\u91d1\u5e01\u91cd\u91cf\u4ef7\u503c\u6bd4\uff08\u4e5f\u5c31\u662f\u5355\u4f4d\u4ef7\u683c\uff09\u4e0d\u53d8\u3002\u8bf7\u95ee\u963f\u91cc\u5df4\u5df4\u6700\u591a\u53ef\u4ee5\u62ff\u8d70\u591a\u5c11\u4ef7\u503c\u7684\u91d1\u5e01\uff1f</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(N,T\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(N\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(m_i,v_i\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u5b9e\u6570\u8868\u793a\u7b54\u6848\uff0c\u8f93\u51fa\u4e24\u4f4d\u5c0f\u6570</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165</p> <pre><code>4 50\n10 60\n20 100\n30 120\n15 45\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>240.00\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct node {\n    int weight;\n    int value;\n    double avg;\n} e[100005];\n\nbool cmp(node a, node b) {\n    return a.avg &gt; b.avg;\n}\n\nint main() {\n    int n, t;\n    cin &gt;&gt; n &gt;&gt; t;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; e[i].weight &gt;&gt; e[i].value;\n        e[i].avg = (double)e[i].value / e[i].weight;\n    }\n    sort(e + 1, e + n + 1, cmp);\n    double ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (t &gt;= e[i].weight) {\n            ans += e[i].value;\n            t -= e[i].weight;\n        } else {\n            ans += e[i].avg * t;\n            t = 0;\n            break;\n        }\n    }\n    printf(\"%.2lf\\n\", ans);\n}\n</code></pre>"},{"location":"DataStruct/16%20%E3%80%81%E8%B4%AA%E5%BF%83/#eg33-yyy","title":"e.g.33 \u51cc\u4e71\u7684yyy / \u7ebf\u6bb5\u8986\u76d6","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>\u5feb noip \u4e86\uff0cyyy \u5f88\u7d27\u5f20\uff01</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u73b0\u5728\u5404\u5927 oj \u4e0a\u6709 \\(n\\) \u4e2a\u6bd4\u8d5b\uff0c\u6bcf\u4e2a\u6bd4\u8d5b\u7684\u5f00\u59cb\u3001\u7ed3\u675f\u7684\u65f6\u95f4\u70b9\u662f\u77e5\u9053\u7684\u3002</p> <p>yyy \u8ba4\u4e3a\uff0c\u53c2\u52a0\u8d8a\u591a\u7684\u6bd4\u8d5b\uff0cnoip \u5c31\u80fd\u8003\u7684\u8d8a\u597d\uff08\u5047\u7684\uff09\u3002</p> <p>\u6240\u4ee5\uff0c\u4ed6\u60f3\u77e5\u9053\u4ed6\u6700\u591a\u80fd\u53c2\u52a0\u51e0\u4e2a\u6bd4\u8d5b\u3002</p> <p>\u7531\u4e8e yyy \u662f\u849f\u84bb\uff0c\u5982\u679c\u8981\u53c2\u52a0\u4e00\u4e2a\u6bd4\u8d5b\u5fc5\u987b\u5584\u59cb\u5584\u7ec8\uff0c\u800c\u4e14\u4e0d\u80fd\u540c\u65f6\u53c2\u52a0 \\(2\\) \u4e2a\u53ca\u4ee5\u4e0a\u7684\u6bd4\u8d5b\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 \\(n\\)\uff0c\u63a5\u4e0b\u6765 \\(n\\) \u884c\u6bcf\u884c\u662f \\(2\\) \u4e2a\u6574\u6570 \\(a_{i},b_{i}\\ (a_{i}&lt;b_{i})\\)\uff0c\u8868\u793a\u6bd4\u8d5b\u5f00\u59cb\u3001\u7ed3\u675f\u7684\u65f6\u95f4\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6574\u6570\u6700\u591a\u53c2\u52a0\u7684\u6bd4\u8d5b\u6570\u76ee\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>3\n0 2\n2 4\n1 3\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>2\n</code></pre> <p>\u63d0\u793a</p> <ul> <li>\u5bf9\u4e8e \\(20\\%\\) \u7684\u6570\u636e\uff0c\\(n \\le 10\\)\uff1b</li> <li>\u5bf9\u4e8e \\(50\\%\\) \u7684\u6570\u636e\uff0c\\(n \\le 10^3\\)\uff1b</li> <li>\u5bf9\u4e8e \\(70\\%\\) \u7684\u6570\u636e\uff0c\\(n \\le 10^{5}\\)\uff1b</li> <li>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1\\le n \\le 10^{6}\\)\uff0c\\(0 \\le a_{i} &lt; b_{i} \\le 10^6\\)\u3002</li> </ul> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N=1e6;\nstruct node\n{\n    ll l,r;\n}e[N];\nll n;\nbool cmp(node n1,node n2)\n{\n    return n1.r&lt;n2.r;\n}\nint main()\n{\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n;i++) cin&gt;&gt;e[i].l&gt;&gt;e[i].r;\n    sort(e+1,e+1+n,cmp);\n    int ans=0,t=0;\n    for(int i=1;i&lt;=n;i++)\n    {\n        if(t&lt;=e[i].l)\n        ans++,t=e[i].r;\n    }\n    cout&lt;&lt;ans&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/16%20%E3%80%81%E8%B4%AA%E5%BF%83/#eg34-usaco05nov","title":"e.g.34 [USACO05NOV] \u5976\u725b\u73a9\u6742\u6280","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>Farmer John \u517b\u4e86 \\(N\\) \u5934\u725b\uff0c\u5979\u4eec\u5df2\u7ecf\u6309 \\(1\\sim N\\) \u4f9d\u6b21\u7f16\u4e0a\u4e86\u53f7\u3002FJ \u6240\u4e0d\u77e5\u9053\u7684\u662f\uff0c\u4ed6\u7684\u6240\u6709\u725b\u90fd\u68a6\u60f3\u7740\u4ece\u519c\u573a\u9003\u8d70\uff0c\u53bb\u53c2\u52a0\u9a6c\u620f\u56e2\u7684\u6f14\u51fa\u3002\u53ef\u5976\u725b\u4eec\u5f88\u5feb\u53d1\u73b0\u5979\u4eec\u90a3\u7b28\u62d9\u7684\u8e44\u5b50\u6839\u672c\u65e0\u6cd5\u5728\u94a2\u4e1d\u6216\u6643\u52a8\u7684\u7684\u79cb\u5343\u4e0a\u7ad9\u7a33\uff08\u5979\u4eec\u8fd8\u5c1d\u8bd5\u8fc7\u628a\u81ea\u5df1\u88c5\u5728\u5927\u70ae\u91cc\u53d1\u5c04\u51fa\u53bb\uff0c\u4f46\u53ef\u60f3\u800c\u77e5\uff0c\u7ed3\u679c\u662f\u60b2\u60e8\u7684\uff09 \u3002\u6700\u7ec8\uff0c\u5979\u4eec\u51b3\u5b9a\u7ec3\u4e60\u4e00\u79cd\u6700\u7b80\u5355\u7684\u6742\u6280\uff1a\u628a\u6240\u6709\u725b\u90fd\u645e\u5728\u4e00\u8d77\uff0c \u6bd4\u5982\u8bf4\uff0c \u7b2c\u4e00\u5934\u725b\u7ad9\u5728\u7b2c\u4e8c\u5934\u7684\u8eab\u4e0a\uff0c \u540c\u65f6\u7b2c\u4e8c\u5934\u725b\u53c8\u7ad9\u5728\u7b2c\u4e09\u5934\u725b\u7684\u8eab\u4e0a...\u6700\u5e95\u4e0b\u7684\u662f\u7b2c \\(N\\) \u5934\u725b\u3002</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6bcf\u5934\u725b\u90fd\u6709\u81ea\u5df1\u7684\u4f53\u91cd\u4ee5\u53ca\u529b\u91cf\uff0c\u7f16\u53f7\u4e3a \\(i\\) \u7684\u5976\u725b\u7684\u4f53\u91cd\u4e3a \\(W_i\\)\uff0c\u529b\u91cf\u4e3a \\(S_i\\)\u3002</p> <p>\u5f53\u67d0\u5934\u725b\u8eab\u4e0a\u7ad9\u7740\u53e6\u4e00\u4e9b\u725b\u65f6\u5b83\u5c31\u4f1a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u88ab\u538b\u6241\uff0c\u6211\u4eec\u4e0d\u59a8\u628a\u5b83\u88ab\u538b\u6241\u7684\u7a0b\u5ea6\u53eb\u505a\u5b83\u7684\u538b\u6241\u6307\u6570\u3002\u5bf9\u4e8e\u4efb\u610f\u7684\u725b\uff0c\u5979\u7684\u538b\u6241\u6307\u6570\u7b49\u4e8e\u645e\u5728\u5979\u4e0a\u9762\u7684\u6240\u6709\u5976\u725b\u7684\u603b\u91cd\uff08\u5f53\u7136\u4e0d\u5305\u62ec\u5979\u81ea\u5df1\uff09\u51cf\u53bb\u5b83\u7684\u529b\u91cf\u3002\u5976\u725b\u4eec\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u645e\u5728\u4e00\u8d77\u540e\uff0c \u5979\u4eec\u7684\u603b\u538b\u6241\u6307\u6570\u5c31\u662f\u88ab\u538b\u5f97\u6700\u6241\u7684\u90a3\u5934\u5976\u725b\u7684\u538b\u6241\u6307\u6570\u3002</p> <p>\u4f60\u7684\u4efb\u52a1\u5c31\u662f\u5e2e\u52a9\u5976\u725b\u4eec\u627e\u51fa\u4e00\u4e2a\u645e\u5728\u4e00\u8d77\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u603b\u538b\u6241\u6307\u6570\u6700\u5c0f\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(N\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(N\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(W_i\\) \u548c \\(S_i\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u884c\u4e00\u4e2a\u6574\u6570\u8868\u793a\u6700\u5c0f\u603b\u538b\u6241\u6307\u6570\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>3\n10 3\n2 5\n3 3\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>2\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\le N \\le 5\\times 10^4\\)\uff0c\\(1 \\le W_i \\le 10^4\\)\uff0c$</p>"},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","title":"17 \u3001\u52a8\u6001\u89c4\u5212","text":"<ul> <li>1\u3001\u601d\u60f3</li> <li>2\u30010/1\u80cc\u5305\u95ee\u9898</li> <li>\u4f8b\u9898<ul> <li>e.g.53 [USACO1.5] [IOI1994]\u6570\u5b57\u4e09\u89d2\u5f62 Number Triangles</li> <li>e.g.54 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217</li> <li>e.g.55 [\u84dd\u6865\u676f 2023 \u7701 A] \u66f4\u5c0f\u7684\u6570</li> <li>e.g.56 [NOIP2005 \u666e\u53ca\u7ec4] \u91c7\u836f</li> <li>e.g.57 2022</li> <li>e.g.58 \u5c0fA\u70b9\u83dc</li> <li>e.g.58 [\u84dd\u6865\u676f 2017 \u7701 AB] \u5305\u5b50\u51d1\u6570</li> <li>e.g.59 \u75af\u72c2\u7684\u91c7\u836f\uff08\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff09</li> <li>\u2b50e.g.60 \u901a\u5929\u4e4b\u5206\u7ec4\u80cc\u5305\uff08\u5206\u7ec4\u80cc\u5305\u95ee\u9898\uff09</li> </ul> </li> </ul>"},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1","title":"1\u3001\u601d\u60f3","text":"<p>Warning</p> <p>\u9012\u63a8\u72b6\u6001\u65b9\u7a0b\u8868\u793a</p>"},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#201","title":"2\u30010/1\u80cc\u5305\u95ee\u9898","text":"<p>\\(n\\)\u4e2a\u80cc\u5305\uff0c\u6bcf\u4e2a\u4ef7\u503c\\(v_i\\)\uff0c\u6bcf\u4e2a\u4f53\u79ef\\(w_i\\)\uff0c\u6c42\u6700\u5927\u4ef7\u503c</p> <p><code>dp[i][j]</code>\u8868\u793a\u524d\\(i\\)\u4e2a\u7269\u54c1\uff0c\u5bb9\u91cf\u4e3a\\(j\\)\u65f6\u7684\u6700\u5927\u4ef7\u503c</p> <p>\u2460\u4e0d\u62ff <code>dp[i][j] = dp[i-1][j]</code></p> <p>\u2461\u62ff    <code>dp[i][j] = dp[i-1][j-w[i]] + v[i]</code></p>"},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#eg53-usaco15-ioi1994-number-triangles","title":"e.g.53 [USACO1.5] [IOI1994]\u6570\u5b57\u4e09\u89d2\u5f62 Number Triangles","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u89c2\u5bdf\u4e0b\u9762\u7684\u6570\u5b57\u91d1\u5b57\u5854\u3002</p> <p>\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u67e5\u627e\u4ece\u6700\u9ad8\u70b9\u5230\u5e95\u90e8\u4efb\u610f\u5904\u7ed3\u675f\u7684\u8def\u5f84\uff0c\u4f7f\u8def\u5f84\u7ecf\u8fc7\u6570\u5b57\u7684\u548c\u6700\u5927\u3002\u6bcf\u4e00\u6b65\u53ef\u4ee5\u8d70\u5230\u5de6\u4e0b\u65b9\u7684\u70b9\u4e5f\u53ef\u4ee5\u5230\u8fbe\u53f3\u4e0b\u65b9\u7684\u70b9\u3002</p> <p></p> <p>\u5728\u4e0a\u9762\u7684\u6837\u4f8b\u4e2d\uff0c\u4ece \\(7 \\to 3 \\to 8 \\to 7 \\to 5\\) \u7684\u8def\u5f84\u4ea7\u751f\u4e86\u6700\u5927\u6743\u503c\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u4e2a\u884c\u4e00\u4e2a\u6b63\u6574\u6570 \\(r\\) ,\u8868\u793a\u884c\u7684\u6570\u76ee\u3002</p> <p>\u540e\u9762\u6bcf\u884c\u4e3a\u8fd9\u4e2a\u6570\u5b57\u91d1\u5b57\u5854\u7279\u5b9a\u884c\u5305\u542b\u7684\u6574\u6570\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u5355\u72ec\u7684\u4e00\u884c,\u5305\u542b\u90a3\u4e2a\u53ef\u80fd\u5f97\u5230\u7684\u6700\u5927\u7684\u548c\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>5\n7\n3 8\n8 1 0\n2 7 4 4\n4 5 2 6 5\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>30\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6570\u636e\u8303\u56f4\u3011 \u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1\\le r \\le 1000\\)\uff0c\u6240\u6709\u8f93\u5165\u5728 \\([0,100]\\) \u8303\u56f4\u5185\u3002</p> <p>\u9898\u76ee\u7ffb\u8bd1\u6765\u81eaNOCOW\u3002</p> <p>USACO Training Section 1.5</p> <p>IOI1994 Day1T1</p> Tip <p><code>dp[i][j]</code>\u8868\u793a\u73b0\u5728\u5728<code>i-1</code>\u5c42\uff0c<code>i</code>\u5c42\u5728<code>j</code>\u70b9\u6700\u5927</p> <p>\u9012\u63a8\u65b9\u7a0b\uff1a\\(dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + a[i][j];\\)</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1005;\nint dp[N][N];\nint main() {\n    int r;\n    cin &gt;&gt; r;\n    int a[N][N];\n    for (int i = 1; i &lt;= r; i++) {\n        for (int j = 1; j &lt;= i; j++) {\n            cin &gt;&gt; a[i][j];\n        }\n    }\n    for (int i = 1; i &lt;= r; i++) {\n        for (int j = 1; j &lt;= i; j++) {\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + a[i][j];\n        }\n    }\n    cout &lt;&lt; *max_element(dp[r] + 1, dp[r] + r + 1) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#eg54","title":"e.g.54 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u52a8\u89c4\u677f\u5b50\u9898\u3002</p> <p>\u7ed9\u51fa\u4e00\u4e2a\u7531 \\(n(n\\le 5000)\\) \u4e2a\u4e0d\u8d85\u8fc7 \\(10^6\\) \u7684\u6b63\u6574\u6570\u7ec4\u6210\u7684\u5e8f\u5217\u3002\u8bf7\u8f93\u51fa\u8fd9\u4e2a\u5e8f\u5217\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u662f\u6307\uff0c\u4ece\u539f\u5e8f\u5217\u4e2d\u6309\u987a\u5e8f\u53d6\u51fa\u4e00\u4e9b\u6570\u5b57\u6392\u5728\u4e00\u8d77\uff0c\u8fd9\u4e9b\u6570\u5b57\u662f\u9010\u6e10\u589e\u5927\u7684\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u5e8f\u5217\u957f\u5ea6\u3002</p> <p>\u7b2c\u4e8c\u884c\u6709 \\(n\\) \u4e2a\u6574\u6570\uff0c\u8868\u793a\u8fd9\u4e2a\u5e8f\u5217\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6574\u6570\u8868\u793a\u7b54\u6848\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>6\n1 2 4 1 3 4\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>4\n</code></pre> <p>\u63d0\u793a</p> <p>\u5206\u522b\u53d6\u51fa \\(1\\)\u3001\\(2\\)\u3001\\(3\\)\u3001\\(4\\) \u5373\u53ef\u3002</p> Tip <p><code>dp[i]</code> \u8868\u793a\u4ee5\u7b2c<code>i</code>\u9879\u7ed3\u5c3e\u7684\uff0c\u6700\u957f\u7684\u5b50\u5e8f\u5217\u7684\u957f\u5ea6</p> <p>\u9012\u63a8\u65b9\u7a0b\uff1a\\(dp[i] = max ( dp[i] , dp[j] + 1 ) ;\\)</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e5 + 10;\nint n, a[N], dp[N];\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        dp[i] = 1;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt; i; j++) {\n            if (a[i] &gt; a[j]) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    cout &lt;&lt; *max_element(dp + 1, dp + n + 1) &lt;&lt; \" \";\n}\n</code></pre>"},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#eg55-2023-a","title":"e.g.55 [\u84dd\u6865\u676f 2023 \u7701 A] \u66f4\u5c0f\u7684\u6570","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p></p> <p>\u5c0f\u84dd\u6709\u4e00\u4e2a\u957f\u5ea6\u5747\u4e3a \\(n\\) \u4e14\u4ec5\u7531\u6570\u5b57\u5b57\u7b26 \\(0 \\sim 9\\) \u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u4e0b\u6807\u4ece \\(0\\) \u5230 \\(n-1\\)\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u89c6\u4f5c\u662f\u4e00\u4e2a\u5177\u6709 \\(n\\) \u4f4d\u7684\u5341\u8fdb\u5236\u6570\u5b57 \\(num\\)\uff0c\u5c0f\u84dd\u53ef\u4ee5\u4ece \\(num\\) \u4e2d\u9009\u51fa\u4e00\u6bb5\u8fde\u7eed\u7684\u5b50\u4e32\u5e76\u5c06\u5b50\u4e32\u8fdb\u884c\u53cd\u8f6c\uff0c\u6700\u591a\u53cd\u8f6c\u4e00\u6b21\u3002\u5c0f\u84dd\u60f3\u8981\u5c06\u9009\u51fa\u7684\u5b50\u4e32\u8fdb\u884c\u53cd\u8f6c\u540e\u518d\u653e\u5165\u539f\u4f4d\u7f6e\u5904\u5f97\u5230\u7684\u65b0\u7684\u6570\u5b57 \\(num_{new}\\) \u6ee1\u8db3\u6761\u4ef6 \\(num_{new}&lt;num\\)\uff0c\u8bf7\u4f60\u5e2e\u4ed6\u8ba1\u7b97\u4e0b\u4e00\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5b50\u4e32\u9009\u62e9\u65b9\u6848\uff0c\u53ea\u8981\u4e24\u4e2a\u5b50\u4e32\u5728 \\(num\\) \u4e2d\u7684\u4f4d\u7f6e\u4e0d\u5b8c\u5168\u76f8\u540c\u6211\u4eec\u5c31\u89c6\u4f5c\u662f\u4e0d\u540c\u7684\u65b9\u6848\u3002</p> <p>\u6ce8\u610f\uff0c\u6211\u4eec\u5141\u8bb8\u524d\u5bfc\u96f6\u7684\u5b58\u5728\uff0c\u5373\u6570\u5b57\u7684\u6700\u9ad8\u4f4d\u53ef\u4ee5\u662f \\(0\\)\uff0c\u8fd9\u662f\u5408\u6cd5\u7684\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32\u8868\u793a \\(num\\)\uff08\u4ec5\u5305\u542b\u6570\u5b57\u5b57\u7b26 \\(0 \\sim 9\\)\uff09\uff0c\u4ece\u5de6\u81f3\u53f3\u4e0b\u6807\u4f9d\u6b21\u4e3a \\(0 \\sim n-1\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\u8868\u793a\u7b54\u6848\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>210102\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>8\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6837\u4f8b\u8bf4\u660e\u3011</p> <p>\u4e00\u5171\u6709 \\(8\\) \u79cd\u4e0d\u540c\u7684\u65b9\u6848\uff1a</p> <ol> <li>\u6240\u9009\u62e9\u7684\u5b50\u4e32\u4e0b\u6807\u4e3a \\(0\\sim1\\)\uff0c\u53cd\u8f6c\u540e\u7684 \\(num_{new} = 120102 &lt; 210102\\)\uff1b</li> <li>\u6240\u9009\u62e9\u7684\u5b50\u4e32\u4e0b\u6807\u4e3a \\(0\\sim2\\)\uff0c\u53cd\u8f6c\u540e\u7684 \\(num_{new} =  012102 &lt; 210102\\)\uff1b</li> <li>\u6240\u9009\u62e9\u7684\u5b50\u4e32\u4e0b\u6807\u4e3a \\(0\\sim3\\)\uff0c\u53cd\u8f6c\u540e\u7684 \\(num_{new} =  101202 &lt; 210102\\)\uff1b</li> <li>\u6240\u9009\u62e9\u7684\u5b50\u4e32\u4e0b\u6807\u4e3a \\(0\\sim4\\)\uff0c\u53cd\u8f6c\u540e\u7684 \\(num_{new} =  010122 &lt; 210102\\)\uff1b</li> <li>\u6240\u9009\u62e9\u7684\u5b50\u4e32\u4e0b\u6807\u4e3a \\(0\\sim5\\)\uff0c\u53cd\u8f6c\u540e\u7684 \\(num_{new} =  201012 &lt; 210102\\)\uff1b</li> <li>\u6240\u9009\u62e9\u7684\u5b50\u4e32\u4e0b\u6807\u4e3a \\(1\\sim2\\)\uff0c\u53cd\u8f6c\u540e\u7684 \\(num_{new} =  201102 &lt; 210102\\)\uff1b</li> <li>\u6240\u9009\u62e9\u7684\u5b50\u4e32\u4e0b\u6807\u4e3a \\(1\\sim4\\)\uff0c\u53cd\u8f6c\u540e\u7684 \\(num_{new} =  201012 &lt; 210102\\)\uff1b</li> <li>\u6240\u9009\u62e9\u7684\u5b50\u4e32\u4e0b\u6807\u4e3a \\(3\\sim4\\)\uff0c\u53cd\u8f6c\u540e\u7684 \\(num_{new} =  210012 &lt; 210102\\)\u3002</li> </ol> <p>\u3010\u8bc4\u6d4b\u7528\u4f8b\u89c4\u6a21\u4e0e\u7ea6\u5b9a\u3011</p> <p>\u5bf9\u4e8e \\(20\\%\\) \u7684\u8bc4\u6d4b\u7528\u4f8b\uff0c\\(1 \\le n \\le 100\\)\uff1b</p> <p>\u5bf9\u4e8e \\(40\\%\\) \u7684\u8bc4\u6d4b\u7528\u4f8b\uff0c\\(1 \\le n \\le 1000\\)\uff1b</p> <p>\u5bf9\u4e8e\u6240\u6709\u8bc4\u6d4b\u7528\u4f8b\uff0c\\(1 \\le n \\le 5000\\)\u3002</p> Tip <p>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a $$ s_i&gt;s_j,dp_{i,j}=true\\ $$ $$ s_i=s_j,dp_{i,j}=dp_{i+1,j-1}\\ $$ $$ s_i&lt;s_j,dp_{i,j}=false $$</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nbool dp[5005][5005]; // \u5b9a\u4e49dp\u6570\u7ec4\nint main() {\n    int ans = 0; // \u8ba1\u6570\u5668\n    string s;\n    cin &gt;&gt; s;\n    for (int i = s.size() - 1; i &gt;= 0; i--) {\n        for (int j = i; j &lt; s.size(); j++) {\n            // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n            if (s[i] &gt; s[j])\n                dp[i][j] = true; \n            else if (s[i] == s[j])\n                dp[i][j] = dp[i + 1][j - 1]; \n            if (dp[i][j] == true)\n                ans++; // \u5982\u679c\u7b49\u4e8e1\u65b9\u6848\u6570\u52a01\n        }\n    }\n    cout &lt;&lt; ans;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#eg56-noip2005","title":"e.g.56 [NOIP2005 \u666e\u53ca\u7ec4] \u91c7\u836f","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u8fb0\u8fb0\u662f\u4e2a\u5929\u8d44\u806a\u9896\u7684\u5b69\u5b50\uff0c\u4ed6\u7684\u68a6\u60f3\u662f\u6210\u4e3a\u4e16\u754c\u4e0a\u6700\u4f1f\u5927\u7684\u533b\u5e08\u3002\u4e3a\u6b64\uff0c\u4ed6\u60f3\u62dc\u9644\u8fd1\u6700\u6709\u5a01\u671b\u7684\u533b\u5e08\u4e3a\u5e08\u3002\u533b\u5e08\u4e3a\u4e86\u5224\u65ad\u4ed6\u7684\u8d44\u8d28\uff0c\u7ed9\u4ed6\u51fa\u4e86\u4e00\u4e2a\u96be\u9898\u3002\u533b\u5e08\u628a\u4ed6\u5e26\u5230\u4e00\u4e2a\u5230\u5904\u90fd\u662f\u8349\u836f\u7684\u5c71\u6d1e\u91cc\u5bf9\u4ed6\u8bf4\uff1a\u201c\u5b69\u5b50\uff0c\u8fd9\u4e2a\u5c71\u6d1e\u91cc\u6709\u4e00\u4e9b\u4e0d\u540c\u7684\u8349\u836f\uff0c\u91c7\u6bcf\u4e00\u682a\u90fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff0c\u6bcf\u4e00\u682a\u4e5f\u6709\u5b83\u81ea\u8eab\u7684\u4ef7\u503c\u3002\u6211\u4f1a\u7ed9\u4f60\u4e00\u6bb5\u65f6\u95f4\uff0c\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u4f60\u53ef\u4ee5\u91c7\u5230\u4e00\u4e9b\u8349\u836f\u3002\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u806a\u660e\u7684\u5b69\u5b50\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u8ba9\u91c7\u5230\u7684\u8349\u836f\u7684\u603b\u4ef7\u503c\u6700\u5927\u3002\u201d</p> <p>\u5982\u679c\u4f60\u662f\u8fb0\u8fb0\uff0c\u4f60\u80fd\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417\uff1f</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u6709 \\(2\\) \u4e2a\u6574\u6570 \\(T\\)\uff08\\(1 \\le T \\le 1000\\)\uff09\u548c \\(M\\)\uff08\\(1 \\le  M \\le 100\\)\uff09\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\\(T\\) \u4ee3\u8868\u603b\u5171\u80fd\u591f\u7528\u6765\u91c7\u836f\u7684\u65f6\u95f4\uff0c\\(M\\) \u4ee3\u8868\u5c71\u6d1e\u91cc\u7684\u8349\u836f\u7684\u6570\u76ee\u3002</p> <p>\u63a5\u4e0b\u6765\u7684 \\(M\\) \u884c\u6bcf\u884c\u5305\u62ec\u4e24\u4e2a\u5728 \\(1\\) \u5230 \\(100\\) \u4e4b\u95f4\uff08\u5305\u62ec \\(1\\) \u548c \\(100\\)\uff09\u7684\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u91c7\u6458\u67d0\u682a\u8349\u836f\u7684\u65f6\u95f4\u548c\u8fd9\u682a\u8349\u836f\u7684\u4ef7\u503c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u53ef\u4ee5\u91c7\u5230\u7684\u8349\u836f\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>70 3\n71 100\n69 1\n1 2\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>3\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6570\u636e\u8303\u56f4\u3011</p> <ul> <li>\u5bf9\u4e8e \\(30\\%\\) \u7684\u6570\u636e\uff0c\\(M \\le 10\\)\uff1b</li> <li>\u5bf9\u4e8e\u5168\u90e8\u7684\u6570\u636e\uff0c\\(M \\le 100\\)\u3002</li> </ul> <p>\u3010\u9898\u76ee\u6765\u6e90\u3011</p> <p>NOIP 2005 \u666e\u53ca\u7ec4\u7b2c\u4e09\u9898</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1005;\nstruct node {\n    int t, v;\n} e[N]; // t: time, v: value\nint T, M, dp[N][N];\nint main() {\n    cin &gt;&gt; T &gt;&gt; M;\n    for (int i = 1; i &lt;= M; i++) {\n        cin &gt;&gt; e[i].t &gt;&gt; e[i].v;\n    }\n    for (int i = 1; i &lt;= M; i++) {\n        for (int j = 1; j &lt;= T; j++) {\n            dp[i][j] = dp[i - 1][j];\n            if (j &gt;= e[i].t) {\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - e[i].t] + e[i].v);\n            }\n        }\n    }\n    cout &lt;&lt; dp[M][T] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#eg57-2022","title":"e.g.57 2022","text":"<p>\u95ee\u9898\u63cf\u8ff0</p> <p>\u5c06 2022 \u62c6\u5206\u6210 10 \u4e2a\u4e92\u4e0d\u76f8\u540c\u7684\u6b63\u6574\u6570\u4e4b\u548c, \u603b\u5171\u6709\u591a\u5c11\u79cd\u62c6\u5206\u65b9\u6cd5?</p> <p>\u6ce8\u610f\u4ea4\u6362\u987a\u5e8f\u89c6\u4e3a\u540c\u4e00\u79cd\u65b9\u6cd5, \u4f8b\u5982 \\(2022=1000+1022\\) \u548c \\(2022= 1022+1000\\)\u5c31\u89c6\u4e3a\u540c\u4e00\u79cd\u65b9\u6cd5\u3002</p> Tip <p><code>dp[i][j][k]</code> \u8868\u793a <code>i</code> \u4e2a\u6570\uff0c\u9009\u4e86 <code>j</code> \u4e2a\uff0c\u548c\u4e3a <code>k</code></p> <p>\u2460\u4e0d\u9009 <code>dp[i][j][k] = dp[i - 1][j][k]</code></p> <p>\u2461\u9009   <code>dp[i][j][k] = dp[i - 1][j - 1][k - a[i]]</code></p> 3-D2-D <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nint n = 2022, m = 2022, k = 10;\nll dp[2050][11][2050];\n\nint main() {\n    for (int i = 0; i &lt;= n; i++)\n        dp[i][0][0] = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= k; j++) {\n            for (int l = 1; l &lt;= m; l++) {\n                dp[i][j][l] = dp[i - 1][j][l];\n                if (l &gt;= i)\n                    dp[i][j][l] += dp[i - 1][j - 1][l - i];\n            }\n        }\n    }\n    cout &lt;&lt; dp[n][k][m] &lt;&lt; endl;\n}\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nll dp[11][2023];\nint main() {\n    dp[0][0] = 1;\n    for (int i = 1; i &lt;= 2022; i++) {\n        for (int j = 10; j &gt;= 1; j--) {\n            for (int k = 2022; k &gt;= i; k--) {\n                dp[j][k] += dp[j - 1][k - i];\n            }\n        }\n    }\n    cout &lt;&lt; dp[10][2022] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#eg58-a","title":"e.g.58 \u5c0fA\u70b9\u83dc","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>uim \u795e\u7287\u62ff\u5230\u4e86 uoi \u7684 ra\uff08\u956d\u724c\uff09\u540e\uff0c\u7acb\u523b\u62c9\u7740\u57fa\u53cb\u5c0f A \u5230\u4e86\u4e00\u5bb6\u2026\u2026\u9910\u9986\uff0c\u5f88\u4f4e\u7aef\u7684\u90a3\u79cd\u3002</p> <p>uim \u6307\u7740\u5899\u4e0a\u7684\u4ef7\u76ee\u8868\uff08\u592a\u4f4e\u7ea7\u4e86\u6ca1\u6709\u83dc\u5355\uff09\uff0c\u8bf4\uff1a\u201c\u968f\u4fbf\u70b9\u201d\u3002</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4e0d\u8fc7 uim \u7531\u4e8e\u4e70\u4e86\u4e00\u4e9b\u4e66\uff0c\u53e3\u888b\u91cc\u53ea\u5269 \\(M\\) \u5143 \\((M \\le 10000)\\)\u3002</p> <p>\u9910\u9986\u867d\u4f4e\u7aef\uff0c\u4f46\u662f\u83dc\u54c1\u79cd\u7c7b\u4e0d\u5c11\uff0c\u6709 \\(N\\) \u79cd \\((N \\le 100)\\)\uff0c\u7b2c \\(i\\) \u79cd\u5356 \\(a_i\\) \u5143 \\((a_i \\le 1000)\\)\u3002\u7531\u4e8e\u662f\u5f88\u4f4e\u7aef\u7684\u9910\u9986\uff0c\u6240\u4ee5\u6bcf\u79cd\u83dc\u53ea\u6709\u4e00\u4efd\u3002</p> <p>\u5c0f A \u5949\u884c\u201c\u4e0d\u628a\u94b1\u5403\u5149\u4e0d\u7f62\u4f11\u201d\u7684\u539f\u5219\uff0c\u6240\u4ee5\u4ed6\u70b9\u5355\u4e00\u5b9a\u521a\u597d\u628a uim \u8eab\u4e0a\u6240\u6709\u94b1\u82b1\u5b8c\u3002\u4ed6\u60f3\u77e5\u9053\u6709\u591a\u5c11\u79cd\u70b9\u83dc\u65b9\u6cd5\u3002</p> <p>\u7531\u4e8e\u5c0f A \u809a\u5b50\u592a\u997f\uff0c\u6240\u4ee5\u6700\u591a\u53ea\u80fd\u7b49\u5f85 \\(1\\) \u79d2\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6570\u5b57\uff0c\u8868\u793a \\(N\\) \u548c \\(M\\)\u3002</p> <p>\u7b2c\u4e8c\u884c\u8d77 \\(N\\) \u4e2a\u6b63\u6570 \\(a_i\\)\uff08\u53ef\u4ee5\u6709\u76f8\u540c\u7684\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u5747\u5728 \\(1000\\) \u4ee5\u5185\uff09\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u70b9\u83dc\u65b9\u6848\u6570\uff0c\u4fdd\u8bc1\u7b54\u6848\u7684\u8303\u56f4\u5728 int \u4e4b\u5185\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>4 4\n1 1 2 2\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>3\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1005;\nint n, m, a[N], dp[N][N];\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    /*\n    dp[i][j]\u8868\u793a\u524di\u9053\u83dc\uff0c\u82b1j\u5143\u7684\u65b9\u6cd5\u6570\n    \u2460\u4e0d\u70b9 \u7b2ci\u9053\u83dc dp[i][j] = dp[i-1][j]\n    \u2461\u70b9\u7b2ci\u9053\u83dc dp[i][j] += dp[i-1][j-a[i]]\n    */\n    for (int i = 0; i &lt;= n; i++)\n        dp[i][0] = 1; // \u521d\u59cb\u5316,\u524dn\u9053\u83dc\uff0c\u82b10\u5143\u7684\u65b9\u6cd5\u6570\u4e3a1\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            dp[i][j] = dp[i - 1][j];\n            if (j &gt;= a[i])\n                dp[i][j] += dp[i - 1][j - a[i]];\n        }\n    }\n    cout &lt;&lt; dp[n][m] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#eg58-2017-ab","title":"e.g.58 [\u84dd\u6865\u676f 2017 \u7701 AB] \u5305\u5b50\u51d1\u6570","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5c0f\u660e\u51e0\u4e4e\u6bcf\u5929\u65e9\u6668\u90fd\u4f1a\u5728\u4e00\u5bb6\u5305\u5b50\u94fa\u5403\u65e9\u9910\u3002\u4ed6\u53d1\u73b0\u8fd9\u5bb6\u5305\u5b50\u94fa\u6709 \\(N\\) \u79cd\u84b8\u7b3c\uff0c\u5176\u4e2d\u7b2c \\(i\\) \u79cd\u84b8\u7b3c\u6070\u597d\u80fd\u653e \\(A_i\\) \u4e2a\u5305\u5b50\u3002\u6bcf\u79cd\u84b8\u7b3c\u90fd\u6709\u975e\u5e38\u591a\u7b3c\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u65e0\u9650\u7b3c\u3002</p> <p>\u6bcf\u5f53\u6709\u987e\u5ba2\u60f3\u4e70 \\(X\\) \u4e2a\u5305\u5b50\uff0c\u5356\u5305\u5b50\u7684\u5927\u53d4\u5c31\u4f1a\u8fc5\u901f\u9009\u51fa\u82e5\u5e72\u7b3c\u5305\u5b50\u6765\uff0c\u4f7f\u5f97\u8fd9\u82e5\u5e72\u7b3c\u4e2d\u6070\u597d\u4e00\u5171\u6709 \\(X\\) \u4e2a\u5305\u5b50\u3002\u6bd4\u5982\u4e00\u5171\u6709 \\(3\\) \u79cd\u84b8\u7b3c\uff0c\u5206\u522b\u80fd\u653e \\(3\\) \u3001 \\(4\\) \u548c \\(5\\) \u4e2a\u5305\u5b50\u3002\u5f53\u987e\u5ba2\u60f3\u4e70 \\(11\\) \u4e2a\u5305\u5b50\u65f6\uff0c\u5927\u53d4\u5c31\u4f1a\u9009 \\(2\\) \u7b3c \\(3\\) \u4e2a\u7684\u518d\u52a0 \\(1\\) \u7b3c \\(5\\) \u4e2a\u7684\uff08\u4e5f\u53ef\u80fd\u9009\u51fa \\(1\\) \u7b3c \\(3\\) \u4e2a\u7684\u518d\u52a0 \\(2\\) \u7b3c \\(4\\) \u4e2a\u7684\uff09\u3002</p> <p>\u5f53\u7136\u6709\u65f6\u5305\u5b50\u5927\u53d4\u65e0\u8bba\u5982\u4f55\u4e5f\u51d1\u4e0d\u51fa\u987e\u5ba2\u60f3\u4e70\u7684\u6570\u91cf\u3002\u6bd4\u5982\u4e00\u5171\u6709 \\(3\\) \u79cd\u84b8\u7b3c\uff0c\u5206\u522b\u80fd\u653e \\(4\\) \u3001 \\(5\\) \u548c \\(6\\) \u4e2a\u5305\u5b50\u3002\u800c\u987e\u5ba2\u60f3\u4e70 \\(7\\) \u4e2a\u5305\u5b50\u65f6\uff0c\u5927\u53d4\u5c31\u51d1\u4e0d\u51fa\u6765\u4e86\u3002</p> <p>\u5c0f\u660e\u60f3\u77e5\u9053\u4e00\u5171\u6709\u591a\u5c11\u79cd\u6570\u76ee\u662f\u5305\u5b50\u5927\u53d4\u51d1\u4e0d\u51fa\u6765\u7684\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 \\(N\\)\u3002\\((1 \\le N \\le 100)\\)\u3002</p> <p>\u4ee5\u4e0b \\(N\\) \u884c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 \\(A_i\\)\u3002\\((1 \\le A_i \\le 100)\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u7b54\u6848\u3002\u5982\u679c\u51d1\u4e0d\u51fa\u7684\u6570\u76ee\u6709\u65e0\u9650\u591a\u4e2a\uff0c\u8f93\u51fa <code>INF</code>\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>2  \n4  \n5\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>6\n</code></pre> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>2  \n4  \n6\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>INF\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e\u6837\u4f8b \\(1\\)\uff0c\u51d1\u4e0d\u51fa\u7684\u6570\u76ee\u5305\u62ec\uff1a\\(1,2,3,6,7,11\\)\u3002</p> <p>\u5bf9\u4e8e\u6837\u4f8b \\(2\\)\uff0c\u6240\u6709\u5947\u6570\u90fd\u51d1\u4e0d\u51fa\u6765\uff0c\u6240\u4ee5\u6709\u65e0\u9650\u591a\u4e2a\u3002</p> <p>\u84dd\u6865\u676f 2017 \u7701\u8d5b A \u7ec4 H \u9898\u3002</p> Tip <p><code>dp[i]</code>\u8868\u793a<code>i</code>\u4e2a\u80fd\u5426\u51d1\u51fa\u6765</p> <p><code>dp[i]=1</code>,<code>dp[i+w]=1</code></p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e5 + 10;\nint n, a[105], dp[N];\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    int d = 0;\n    for (int i = 1; i &lt;= n; i++)\n        d = __gcd(d, a[i]);\n    if (d != 1)\n        cout &lt;&lt; \"INF\" &lt;&lt; endl;\n    else {\n        for (int i = 1; i &lt;= n; i++) {\n            dp[a[i]] = 1;\n            for (int j = a[i]; j &lt; N; j++)\n                if (dp[j - a[i]] == 1)\n                    dp[j] = 1;\n        }\n        int ans = 0;\n        for (int i = 1; i &lt; N; i++)\n            if (dp[i] == 0)\n                ans++;\n        cout &lt;&lt; ans &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#eg59","title":"e.g.59 \u75af\u72c2\u7684\u91c7\u836f\uff08\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff09","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>\u6b64\u9898\u4e3a\u7eaa\u5ff5 LiYuxiang \u800c\u751f\u3002</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>LiYuxiang \u662f\u4e2a\u5929\u8d44\u806a\u9896\u7684\u5b69\u5b50\uff0c\u4ed6\u7684\u68a6\u60f3\u662f\u6210\u4e3a\u4e16\u754c\u4e0a\u6700\u4f1f\u5927\u7684\u533b\u5e08\u3002\u4e3a\u6b64\uff0c\u4ed6\u60f3\u62dc\u9644\u8fd1\u6700\u6709\u5a01\u671b\u7684\u533b\u5e08\u4e3a\u5e08\u3002\u533b\u5e08\u4e3a\u4e86\u5224\u65ad\u4ed6\u7684\u8d44\u8d28\uff0c\u7ed9\u4ed6\u51fa\u4e86\u4e00\u4e2a\u96be\u9898\u3002\u533b\u5e08\u628a\u4ed6\u5e26\u5230\u4e00\u4e2a\u5230\u5904\u90fd\u662f\u8349\u836f\u7684\u5c71\u6d1e\u91cc\u5bf9\u4ed6\u8bf4\uff1a\u201c\u5b69\u5b50\uff0c\u8fd9\u4e2a\u5c71\u6d1e\u91cc\u6709\u4e00\u4e9b\u4e0d\u540c\u79cd\u7c7b\u7684\u8349\u836f\uff0c\u91c7\u6bcf\u4e00\u79cd\u90fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff0c\u6bcf\u4e00\u79cd\u4e5f\u6709\u5b83\u81ea\u8eab\u7684\u4ef7\u503c\u3002\u6211\u4f1a\u7ed9\u4f60\u4e00\u6bb5\u65f6\u95f4\uff0c\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u4f60\u53ef\u4ee5\u91c7\u5230\u4e00\u4e9b\u8349\u836f\u3002\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u806a\u660e\u7684\u5b69\u5b50\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u8ba9\u91c7\u5230\u7684\u8349\u836f\u7684\u603b\u4ef7\u503c\u6700\u5927\u3002\u201d</p> <p>\u5982\u679c\u4f60\u662f LiYuxiang\uff0c\u4f60\u80fd\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417\uff1f</p> <p>\u6b64\u9898\u548c\u539f\u9898\u7684\u4e0d\u540c\u70b9\uff1a</p> <p>\\(1\\). \u6bcf\u79cd\u8349\u836f\u53ef\u4ee5\u65e0\u9650\u5236\u5730\u75af\u72c2\u91c7\u6458\u3002</p> <p>\\(2\\). \u836f\u7684\u79cd\u7c7b\u773c\u82b1\u7f2d\u4e71\uff0c\u91c7\u836f\u65f6\u95f4\u597d\u957f\u597d\u957f\u554a\uff01\u5e08\u5085\u7b49\u5f97\u83ca\u82b1\u90fd\u8c22\u4e86\uff01</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4ee3\u8868\u603b\u5171\u80fd\u591f\u7528\u6765\u91c7\u836f\u7684\u65f6\u95f4 \\(t\\) \u548c\u4ee3\u8868\u5c71\u6d1e\u91cc\u7684\u8349\u836f\u7684\u6570\u76ee \\(m\\)\u3002</p> <p>\u7b2c \\(2\\) \u5230\u7b2c \\((m + 1)\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\uff0c\u7b2c \\((i + 1)\\) \u884c\u7684\u6574\u6570 \\(a_i, b_i\\) \u5206\u522b\u8868\u793a\u91c7\u6458\u7b2c \\(i\\) \u79cd\u8349\u836f\u7684\u65f6\u95f4\u548c\u8be5\u8349\u836f\u7684\u4ef7\u503c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\uff0c\u8fd9\u4e00\u884c\u53ea\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\uff0c\u53ef\u4ee5\u91c7\u5230\u7684\u8349\u836f\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>70 3\n71 100\n69 1\n1 2\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>140\n</code></pre> <p>\u63d0\u793a</p> <p>\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <ul> <li>\u5bf9\u4e8e \\(30\\%\\) \u7684\u6570\u636e\uff0c\u4fdd\u8bc1 \\(m \\le 10^3\\) \u3002</li> <li>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\u4fdd\u8bc1 \\(1 \\leq m \\le 10^4\\)\uff0c\\(1 \\leq t \\leq 10^7\\)\uff0c\u4e14 \\(1 \\leq m \\times t \\leq 10^7\\)\uff0c\\(1 \\leq a_i, b_i \\leq 10^4\\)\u3002</li> </ul> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e4 + 10, M = 1e7 + 10;\nstruct node {\n    ll t, v;\n} e[N];\nll n, t, dp[2][M];\nint main() {\n    cin &gt;&gt; t &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; e[i].t &gt;&gt; e[i].v;\n    int now = 1, old = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        swap(old, now);\n        for (int j = 0; j &lt;= t; j++) {\n            dp[now][j] = dp[old][j];\n            if (j &gt;= e[i].t)\n                dp[now][j] = max(dp[now][j], dp[now][j - e[i].t] + e[i].v);\n        }\n    }\n    cout &lt;&lt; dp[now][t] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/17%20%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#eg60","title":"\u2b50e.g.60 \u901a\u5929\u4e4b\u5206\u7ec4\u80cc\u5305\uff08\u5206\u7ec4\u80cc\u5305\u95ee\u9898\uff09","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>\u76f4\u8fbe\u901a\u5929\u8def\u00b7\u5c0f A \u5386\u9669\u8bb0\u7b2c\u4e8c\u7bc7</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u81ea \\(01\\) \u80cc\u5305\u95ee\u4e16\u4e4b\u540e\uff0c\u5c0f A \u5bf9\u6b64\u6df1\u611f\u5174\u8da3\u3002\u4e00\u5929\uff0c\u5c0f A \u53bb\u8fdc\u6e38\uff0c\u5374\u53d1\u73b0\u4ed6\u7684\u80cc\u5305\u4e0d\u540c\u4e8e \\(01\\) \u80cc\u5305\uff0c\u4ed6\u7684\u7269\u54c1\u5927\u81f4\u53ef\u5206\u4e3a \\(k\\) \u7ec4\uff0c\u6bcf\u7ec4\u4e2d\u7684\u7269\u54c1\u76f8\u4e92\u51b2\u7a81\uff0c\u73b0\u5728\uff0c\u4ed6\u60f3\u77e5\u9053\u6700\u5927\u7684\u5229\u7528\u4ef7\u503c\u662f\u591a\u5c11\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u4e24\u4e2a\u6570 \\(m,n\\)\uff0c\u8868\u793a\u4e00\u5171\u6709 \\(n\\) \u4ef6\u7269\u54c1\uff0c\u603b\u91cd\u91cf\u4e3a \\(m\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(n\\) \u884c\uff0c\u6bcf\u884c \\(3\\) \u4e2a\u6570 \\(a_i,b_i,c_i\\)\uff0c\u8868\u793a\u7269\u54c1\u7684\u91cd\u91cf\uff0c\u5229\u7528\u4ef7\u503c\uff0c\u6240\u5c5e\u7ec4\u6570\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6570\uff0c\u6700\u5927\u7684\u5229\u7528\u4ef7\u503c\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>45 3\n10 10 1\n10 5 1\n50 400 2\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>10\n</code></pre> <p>\u63d0\u793a</p> <p>\\(0 \\leq m \\leq 1000\\)\uff0c\\(1 \\leq n \\leq 1000\\)\uff0c\\(1\\leq k\\leq 100\\)\uff0c\\(a_i, b_i, c_i\\) \u5728 <code>int</code> \u8303\u56f4\u5185\u3002</p>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/","title":"18 \u3001\u56fe","text":"<ul> <li>1\u3001\u57fa\u672c\u6982\u5ff5</li> <li>2\u3001\u90bb\u63a5\u77e9\u9635</li> <li>3\u3001\u90bb\u63a5\u8868</li> <li>4\u3001\u6700\u77ed\u8def\u95ee\u9898<ul> <li>\uff081\uff09\\(Floyd\\)\u7b97\u6cd5</li> <li>\uff082\uff09\\(Dijkstra\\)\u7b97\u6cd5</li> <li>\uff083\uff09\\(Bellman-ford\\)\u7b97\u6cd5</li> </ul> </li> <li>\u4f8b\u9898<ul> <li>e.g.61 \u3010\u6a21\u677f\u3011Floyd</li> <li>e.g.62 \u533b\u9662\u8bbe\u7f6e</li> <li>e.g.63\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09</li> <li>e.g.64 \u90ae\u9012\u5458\u9001\u4fe1</li> <li>e.g.65 \u6700\u77ed\u8def\u8ba1\u6570</li> <li>e.g.66 [\u84dd\u6865\u676f 2022 \u56fd B] \u51fa\u5dee</li> <li>e.g.67 \u3010\u6a21\u677f\u3011\u8d1f\u73af</li> </ul> </li> </ul>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#1","title":"1\u3001\u57fa\u672c\u6982\u5ff5","text":"<p>\u7531\u70b9\uff08node\uff0cvertex\uff09\u548c\u8fde\u63a5\u70b9\u7684\u8fb9\uff08edge\uff09\u7ec4\u6210</p> <p>\u56fe\u662f\u70b9\u548c\u8fb9\u6784\u6210\u7684\u7f51</p>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#2","title":"2\u3001\u90bb\u63a5\u77e9\u9635","text":"<p>\u4e8c\u7ef4\u6570\u7ec4\uff1a<code>graph[NUM][NUM]</code></p> <p>\u65e0\u5411\u56fe\uff1a<code>graph[i][j]=graph[j][i]</code></p> <p>\u6709\u5411\u56fe\uff1a<code>graph[i][j]!=graph[j][i]</code></p> <p>\u6743\u503c\uff1a<code>graph[i][j]</code>\u5b58\u7ed3\u70b9<code>i</code>\u5230<code>j</code>\u7684\u8fb9\u7684\u6743\u503c\u3002</p> <p>\u4f8b\uff1a<code>graph[i][j]=INF</code>\u8868\u793a<code>i</code>,<code>j</code>\u65e0\u8fb9\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int g[10][10] = {0};\n    g[1][3] = 1, g[2][5] = 6;\n    g[4][2] = 8, g[2][1] = 2;\n    g[3][1] = 2;\n    for (int i = 1; i &lt;= 5; i++) {\n        for (int j = 1; j &lt;= 5; j++) {\n            cout &lt;&lt; g[i][j] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n/*\n0 0 1 0 0\n2 0 0 0 6\n2 0 0 0 0\n0 8 0 0 0\n0 0 0 0 0\n*/\n</code></pre> <p>Bug</p> <p>\u50a8\u5b58\u6548\u7387\u4f4e\u4e0b\uff0c\u53ea\u9002\u7528\u4e8e\u7a20\u5bc6\u56fe</p>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#3","title":"3\u3001\u90bb\u63a5\u8868","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvector&lt;int&gt; v[100]; // \u90bb\u63a5\u8868\nint main() {\n    v[0].push_back(3);\n    v[1].push_back(0);\n    v[1].push_back(2);\n    v[2].push_back(0);\n    v[2].push_back(1);\n    for (int i = 0; i &lt;= 3; i++) {\n        cout &lt;&lt; i &lt;&lt; \":\";\n        for (int j = 0; j &lt; v[i].size(); j++) {\n            cout &lt;&lt; v[i][j] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n/*\n0:3\n1:0 2\n2:0 1\n3:\n*/\n</code></pre>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#4","title":"4\u3001\u6700\u77ed\u8def\u95ee\u9898","text":""},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#1floyd","title":"\uff081\uff09\\(Floyd\\)\u7b97\u6cd5","text":"<pre><code>// \u5bf9\u4e8e\u6bcf\u4e2a\u4e2d\u95f4\u8282\u70b9 k\uff0c\u5c1d\u8bd5\u901a\u8fc7 k \u6765\u66f4\u65b0\u4ece\u8282\u70b9 x \u5230\u8282\u70b9 y \u7684\u6700\u77ed\u8def\u5f84\nfor (k = 1; k &lt;= n; k++) {\n    // \u904d\u5386\u6240\u6709\u8d77\u70b9 x\n    for (x = 1; x &lt;= n; x++) {\n        // \u904d\u5386\u6240\u6709\u7ec8\u70b9 y\n        for (y = 1; y &lt;= n; y++) {\n            // \u5c1d\u8bd5\u901a\u8fc7\u4e2d\u95f4\u8282\u70b9 k \u6765\u66f4\u65b0\u6700\u77ed\u8def\u5f84\n            // f[x][y] \u662f\u4ece x \u5230 y \u7684\u5f53\u524d\u6700\u77ed\u8def\u5f84\n            // f[x][k] \u662f\u4ece x \u5230 k \u7684\u6700\u77ed\u8def\u5f84\n            // f[k][y] \u662f\u4ece k \u5230 y \u7684\u6700\u77ed\u8def\u5f84\n            // \u5982\u679c\u901a\u8fc7 k \u7684\u8def\u5f84\u66f4\u77ed\uff0c\u5219\u66f4\u65b0 f[x][y]\n            f[x][y] = min(f[x][y], f[x][k] + f[k][y]);\n        }\n    }\n}\n</code></pre> <p>\u6bcf\u6b21\u68c0\u67e5 <code>dist[i][k] + dist[k][j]</code> \u662f\u5426\u5c0f\u4e8e <code>dist[i][j]</code>\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n^3)\\)\uff0c\u9002\u7528\u4e8e\u8282\u70b9\u6570\u4e0d\u592a\u591a\u7684\u60c5\u51b5\u3002</p> <p>Tip</p> <p>\u4f18\u70b9\uff1a\u53ef\u4ee5\u77e5\u9053\u4efb\u610f\u4e24\u4e2a\u70b9\u7684\u6700\u77ed\u8def</p>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#2dijkstra","title":"\uff082\uff09\\(Dijkstra\\)\u7b97\u6cd5","text":"<p>\u89e3\u51b3\u5355\u6e90\u6700\u77ed\u8def\u5f84\u95ee\u9898</p> <ul> <li> <p>\u4f18\u5148\u961f\u5217</p> <p>\u6bcf\u6b21\u5f80B\u4e2d\u653e\u65b0\u6570\u636e\u65f6\uff0c\u6309\u7167\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\uff08\u4e8c\u5206\uff09</p> </li> </ul> <p>Bug</p> <p>\u8fb9\u6743\u4e0d\u80fd\u4e3a\u8d1f</p>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#3bellman-ford","title":"\uff083\uff09\\(Bellman-ford\\)\u7b97\u6cd5","text":"<p>\u961f\u5217\u4f18\u5316\uff1aSPFA,\u5373 Shortest Path Faster Algorithm\u3002</p> <p>Bug</p> <p>\u8fb9\u6743\u4e3a\u8d1f\u65f6\uff0c\u590d\u6742\u5ea6\u4e0d\u7a33\u5b9a</p> <pre><code>struct edge {\n    int v, w;\n};\n\nvector&lt;edge&gt; e[MAXN];\nint dis[MAXN], cnt[MAXN], vis[MAXN];\nqueue&lt;int&gt; q;\n\nbool spfa(int n, int s) {\n    memset(dis, 0x3f, (n + 1) * sizeof(int));\n    dis[s] = 0, vis[s] = 1;\n    q.push(s);\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop(), vis[u] = 0;\n        for (auto ed : e[u]) {\n            int v = ed.v, w = ed.w;\n            if (dis[v] &gt; dis[u] + w) {\n                dis[v] = dis[u] + w;\n                cnt[v] = cnt[u] + 1;  // \u8bb0\u5f55\u6700\u77ed\u8def\u7ecf\u8fc7\u7684\u8fb9\u6570\n                if (cnt[v] &gt;= n) return false;\n                // \u5728\u4e0d\u7ecf\u8fc7\u8d1f\u73af\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u77ed\u8def\u81f3\u591a\u7ecf\u8fc7 n - 1 \u6761\u8fb9\n                // \u56e0\u6b64\u5982\u679c\u7ecf\u8fc7\u4e86\u591a\u4e8e n \u6761\u8fb9\uff0c\u4e00\u5b9a\u8bf4\u660e\u7ecf\u8fc7\u4e86\u8d1f\u73af\n                if (!vis[v]) q.push(v), vis[v] = 1;\n            }\n        }\n    }\n    return true;\n}\n</code></pre>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#eg61-floyd","title":"e.g.61 \u3010\u6a21\u677f\u3011Floyd","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u51fa\u4e00\u5f20\u7531 \\(n\\) \u4e2a\u70b9 \\(m\\) \u6761\u8fb9\u7ec4\u6210\u7684\u65e0\u5411\u56fe\u3002</p> <p>\u6c42\u51fa\u6240\u6709\u70b9\u5bf9 \\((i,j)\\) \u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570 \\(n,m\\)\uff0c\u5206\u522b\u4ee3\u8868\u70b9\u7684\u4e2a\u6570\u548c\u8fb9\u7684\u6761\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 \\(m\\) \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 \\(u,v,w\\)\uff0c\u4ee3\u8868 \\(u,v\\) \u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u8fb9\u6743\u4e3a \\(w\\) \u7684\u8fb9\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa \\(n\\) \u884c\u6bcf\u884c \\(n\\) \u4e2a\u6574\u6570\u3002</p> <p>\u7b2c \\(i\\) \u884c\u7684\u7b2c \\(j\\) \u4e2a\u6574\u6570\u4ee3\u8868\u4ece \\(i\\) \u5230 \\(j\\) \u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>4 4\n1 2 1\n2 3 1\n3 4 1\n4 1 1\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>0 1 2 1\n1 0 1 2\n2 1 0 1\n1 2 1 0\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(n \\le 100\\)\uff0c\\(m \\le 4500\\)\uff0c\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u6743\u503c \\(w\\) \u662f\u6b63\u6574\u6570\u4e14 \\(1 \\leqslant w \\leqslant 1000\\)\u3002</p> <p>\u6570\u636e\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 105;\nint n, m, g[N][N];\nint main() {\n    memset(g, 0x3f, sizeof(g)); // \u521d\u59cb\u5316\u4e3a\u65e0\u7a77\u5927\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y, z;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n        g[x][y] = min(g[x][y], z);\n        g[y][x] = min(g[y][x], z);\n    }\n    // Floyd-Warshall\u7b97\u6cd5\n    for (int k = 1; k &lt;= n; k++) {\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= n; j++) {\n                if (i == j)\n                    g[i][j] = 0;\n                else\n                    g[i][j] = min(g[i][j], g[i][k] + g[k][j]);\n            }\n        }\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            cout &lt;&lt; g[i][j] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#eg62","title":"e.g.62 \u533b\u9662\u8bbe\u7f6e","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u8bbe\u6709\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5982\u56fe\uff1a</p> <p></p> <p>\u5176\u4e2d\uff0c\u5708\u4e2d\u7684\u6570\u5b57\u8868\u793a\u7ed3\u70b9\u4e2d\u5c45\u6c11\u7684\u4eba\u53e3\u3002\u5708\u8fb9\u4e0a\u6570\u5b57\u8868\u793a\u7ed3\u70b9\u7f16\u53f7\uff0c\u73b0\u5728\u8981\u6c42\u5728\u67d0\u4e2a\u7ed3\u70b9\u4e0a\u5efa\u7acb\u4e00\u4e2a\u533b\u9662\uff0c\u4f7f\u6240\u6709\u5c45\u6c11\u6240\u8d70\u7684\u8def\u7a0b\u4e4b\u548c\u4e3a\u6700\u5c0f\uff0c\u540c\u65f6\u7ea6\u5b9a\uff0c\u76f8\u90bb\u63a5\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a \\(1\\)\u3002\u5982\u4e0a\u56fe\u4e2d\uff0c\u82e5\u533b\u9662\u5efa\u5728 \\(1\\) \u5904\uff0c\u5219\u8ddd\u79bb\u548c \\(=4+12+2\\times20+2\\times40=136\\)\uff1b\u82e5\u533b\u9662\u5efa\u5728 \\(3\\) \u5904\uff0c\u5219\u8ddd\u79bb\u548c \\(=4\\times2+13+20+40=81\\)\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u6811\u7684\u7ed3\u70b9\u6570\u3002</p> <p>\u63a5\u4e0b\u6765\u7684 \\(n\\) \u884c\u6bcf\u884c\u63cf\u8ff0\u4e86\u4e00\u4e2a\u7ed3\u70b9\u7684\u72b6\u51b5\uff0c\u5305\u542b\u4e09\u4e2a\u6574\u6570 \\(w, u, v\\)\uff0c\u5176\u4e2d \\(w\\) \u4e3a\u5c45\u6c11\u4eba\u53e3\u6570\uff0c\\(u\\) \u4e3a\u5de6\u94fe\u63a5\uff08\u4e3a \\(0\\) \u8868\u793a\u65e0\u94fe\u63a5\uff09\uff0c\\(v\\) \u4e3a\u53f3\u94fe\u63a5\uff08\u4e3a \\(0\\) \u8868\u793a\u65e0\u94fe\u63a5\uff09\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c0f\u8ddd\u79bb\u548c\u3002</p> <p>\u6837\u4f8b</p> <p>\u6837\u4f8b\u8f93\u5165</p> <pre><code>5                       \n13 2 3\n4 0 0\n12 4 5\n20 0 0\n40 0 0\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa</p> <pre><code>81\n</code></pre> <p>\u63d0\u793a</p> <p>\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\u4fdd\u8bc1 \\(1 \\leq n \\leq 100\\)\uff0c\\(0 \\leq u, v \\leq n\\)\uff0c\\(1 \\leq w \\leq 10^5\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 105;\nstruct node {\n    int w, l, r;\n} e[N];\nint n, g[N][N];\nint main() {\n    memset(g, 0x3f, sizeof(g));\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; e[i].w &gt;&gt; e[i].l &gt;&gt; e[i].r;\n    for (int i = 1; i &lt;= n; i++) {\n        int l = e[i].l, r = e[i].r;\n        if (l != 0) {\n            g[i][l] = 1;\n            g[l][i] = 1;\n        }\n        if (r != 0) {\n            g[i][r] = 1;\n            g[r][i] = 1;\n        }\n    }\n    // Floyd\n    for (int k = 1; k &lt;= n; k++)\n        for (int i = 1; i &lt;= n; i++)\n            for (int j = 1; j &lt;= n; j++) {\n                if (i == j)\n                    g[i][j] = 0;\n                else\n                    g[i][j] = min(g[i][j], g[i][k] + g[k][j]);\n            }\n    int ans = 1e9;\n    for (int i = 1; i &lt;= n; i++) {\n        int t = 0;\n        for (int j = 1; j &lt;= n; j++)\n            t += g[j][i] * e[j].w;\n        ans = min(ans, t);\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#eg63","title":"e.g.63\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>2018 \u5e74 7 \u6708 19 \u65e5\uff0c\u67d0\u4f4d\u540c\u5b66\u5728 [NOI Day 1 T1 \u5f52\u7a0b] \u4e00\u9898\u91cc\u975e\u5e38\u719f\u7ec3\u5730\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e7f\u4e3a\u4eba\u77e5\u7684\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u3002</p> <p>\u7136\u540e\u5462\uff1f</p> <p>\\(100 \\rightarrow 60\\)\uff1b</p> <p>\\(\\text{Ag} \\rightarrow \\text{Cu}\\)\uff1b</p> <p>\u6700\u7ec8\uff0c\u4ed6\u56e0\u6b64\u6ca1\u80fd\u4e0e\u7406\u60f3\u7684\u5927\u5b66\u8fbe\u6210\u5951\u7ea6\u3002</p> <p>\u5c0f F \u8877\u5fc3\u795d\u613f\u5927\u5bb6\u4e0d\u518d\u91cd\u8e48\u8986\u8f99\u3002</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u5b9a\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\uff0c\\(m\\) \u6761\u6709\u5411\u8fb9\u7684\u5e26\u975e\u8d1f\u6743\u56fe\uff0c\u8bf7\u4f60\u8ba1\u7b97\u4ece \\(s\\) \u51fa\u53d1\uff0c\u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\u3002</p> <p>\u6570\u636e\u4fdd\u8bc1\u4f60\u80fd\u4ece \\(s\\) \u51fa\u53d1\u5230\u4efb\u610f\u70b9\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e3a\u4e09\u4e2a\u6b63\u6574\u6570 \\(n, m, s\\)\u3002 \u7b2c\u4e8c\u884c\u8d77 \\(m\\) \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u975e\u8d1f\u6574\u6570 \\(u_i, v_i, w_i\\)\uff0c\u8868\u793a\u4ece \\(u_i\\) \u5230 \\(v_i\\) \u6709\u4e00\u6761\u6743\u503c\u4e3a \\(w_i\\) \u7684\u6709\u5411\u8fb9\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c \\(n\\) \u4e2a\u7a7a\u683c\u5206\u9694\u7684\u975e\u8d1f\u6574\u6570\uff0c\u8868\u793a \\(s\\) \u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\u3002</p> <p>\u6837\u4f8b</p> <p>\u6837\u4f8b\u8f93\u5165</p> <pre><code>4 6 1\n1 2 2\n2 3 2\n2 4 1\n1 3 5\n3 4 3\n1 4 4\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa</p> <pre><code>0 2 4 3\n</code></pre> <p>\u63d0\u793a</p> <p>\\(1 \\leq n \\leq 10^5\\)\uff1b</p> <p>\\(1 \\leq m \\leq 2\\times 10^5\\)\uff1b</p> <p>\\(s = 1\\)\uff1b</p> <p>\\(1 \\leq u_i, v_i\\leq n\\)\uff1b</p> <p>\\(0 \\leq w_i \\leq 10 ^ 9\\),</p> <p>\\(0 \\leq \\sum w_i \\leq 10 ^ 9\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// \u5b9a\u4e49\u4e00\u4e2a pair&lt;int, int&gt; \u7c7b\u578b\uff0c\u8868\u793a\u4e00\u4e2a\u8fb9\u7684\u6743\u91cd\u548c\u76ee\u6807\u8282\u70b9\ntypedef pair&lt;int, int&gt; pii;\n\n// \u5e38\u91cf N \u4e3a\u56fe\u7684\u6700\u5927\u8282\u70b9\u6570\uff08\u6700\u5927\u652f\u6301 100000 \u4e2a\u8282\u70b9\uff09\nconst int N = 1e5 + 10;\n\n// n \u662f\u8282\u70b9\u6570\uff0cm \u662f\u8fb9\u6570\uff0cs \u662f\u8d77\u59cb\u8282\u70b9\uff0cdis \u6570\u7ec4\u5b58\u50a8\u4ece\u8d77\u59cb\u8282\u70b9\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\nint n, m, s, dis[N];\n\n// vis \u6570\u7ec4\u7528\u6765\u6807\u8bb0\u6bcf\u4e2a\u8282\u70b9\u662f\u5426\u5df2\u88ab\u8bbf\u95ee\u8fc7\uff0c\u907f\u514d\u91cd\u590d\u5904\u7406\nbool vis[N];\n\n// v \u6570\u7ec4\u662f\u90bb\u63a5\u8868\uff0c\u7528\u6765\u5b58\u50a8\u56fe\u7684\u8fb9\uff0cv[x] \u5b58\u50a8\u6240\u6709\u4e0e\u8282\u70b9 x \u76f8\u90bb\u7684\u8282\u70b9\u53ca\u5176\u8fb9\u7684\u6743\u91cd\nvector&lt;pii&gt; v[N];\n\n// \u5b9a\u4e49\u4e00\u4e2a\u4f18\u5148\u961f\u5217 q\uff0c\u7528\u6765\u5b9e\u73b0\u6700\u5c0f\u5806\uff0c\u5b58\u50a8\u5f53\u524d\u5904\u7406\u7684\u8282\u70b9\u548c\u5230\u8be5\u8282\u70b9\u7684\u8ddd\u79bb\npriority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; q;\n\nint main() {\n    // \u8f93\u5165\u8282\u70b9\u6570\u3001\u8fb9\u6570\u548c\u8d77\u59cb\u8282\u70b9\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;\n\n    // \u8f93\u5165\u8fb9\u7684\u4fe1\u606f\uff0c\u66f4\u65b0\u90bb\u63a5\u8868\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y, w;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;\n        v[x].push_back({w, y}); // \u5c06\u8fb9 (x, y) \u548c\u6743\u91cd w \u52a0\u5165\u5230\u90bb\u63a5\u8868\u4e2d\n    }\n\n    // \u521d\u59cb\u5316 dis \u6570\u7ec4\uff0c\u6240\u6709\u8282\u70b9\u7684\u521d\u59cb\u8ddd\u79bb\u8bbe\u4e3a\u65e0\u7a77\u5927\uff080x3f3f3f3f\uff09\n    memset(dis, 0x3f, sizeof(dis));\n\n    // \u8d77\u59cb\u8282\u70b9 s \u7684\u6700\u77ed\u8ddd\u79bb\u4e3a 0\n    dis[s] = 0;\n\n    // \u5c06\u8d77\u59cb\u8282\u70b9 s \u548c\u5176\u8ddd\u79bb 0 \u5165\u961f\n    q.push({0, s});\n\n    // Dijkstra \u7b97\u6cd5\u4e3b\u4f53\uff0c\u5904\u7406\u6bcf\u4e2a\u8282\u70b9\n    while (!q.empty()) {\n        // \u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\u5f53\u524d\u6700\u5c0f\u8ddd\u79bb\u7684\u8282\u70b9\n        pii now = q.top();\n        q.pop();\n\n        int x = now.second; // \u5f53\u524d\u8282\u70b9\n\n        // \u5982\u679c\u5f53\u524d\u8282\u70b9\u5df2\u88ab\u8bbf\u95ee\u8fc7\uff0c\u8df3\u8fc7\n        if (vis[x])\n            continue;\n\n        // \u6807\u8bb0\u5f53\u524d\u8282\u70b9\u5df2\u8bbf\u95ee\n        vis[x] = 1;\n\n        // \u904d\u5386\u6240\u6709\u4e0e\u5f53\u524d\u8282\u70b9 x \u76f8\u90bb\u7684\u8282\u70b9\n        for (int i = 0; i &lt; v[x].size(); i++) {\n            int nx = v[x][i].second; // \u90bb\u63a5\u8282\u70b9\n            int w = v[x][i].first;   // \u8fb9\u7684\u6743\u91cd\n\n            // \u5982\u679c\u901a\u8fc7\u5f53\u524d\u8282\u70b9 x \u5230\u8fbe nx \u7684\u8ddd\u79bb\u66f4\u5c0f\uff0c\u5219\u66f4\u65b0\n            if (dis[nx] &gt; dis[x] + w) {\n                dis[nx] = dis[x] + w;\n                // \u66f4\u65b0\u8ddd\u79bb\u540e\uff0c\u5c06\u65b0\u7684 (\u8ddd\u79bb, \u8282\u70b9) \u5165\u961f\n                q.push({dis[nx], nx});\n            }\n        }\n    }\n\n    // \u8f93\u51fa\u6bcf\u4e2a\u8282\u70b9\u4ece\u8d77\u59cb\u8282\u70b9 s \u7684\u6700\u77ed\u8ddd\u79bb\n    for (int i = 1; i &lt;= n; i++) {\n        // \u5982\u679c\u67d0\u4e2a\u8282\u70b9\u7684\u8ddd\u79bb\u4ecd\u4e3a\u65e0\u7a77\u5927\uff0c\u8bf4\u660e\u65e0\u6cd5\u5230\u8fbe\u8be5\u8282\u70b9\uff0c\u8f93\u51fa\u65e0\u7a77\u5927\uff08\u8fd9\u91cc\u8f93\u51fa dis[i]\uff09\n        cout &lt;&lt; dis[i] &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#eg64","title":"e.g.64 \u90ae\u9012\u5458\u9001\u4fe1","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6709\u4e00\u4e2a\u90ae\u9012\u5458\u8981\u9001\u4e1c\u897f\uff0c\u90ae\u5c40\u5728\u8282\u70b9 \\(1\\)\u3002\u4ed6\u603b\u5171\u8981\u9001 \\(n-1\\) \u6837\u4e1c\u897f\uff0c\u5176\u76ee\u7684\u5730\u5206\u522b\u662f\u8282\u70b9 \\(2\\) \u5230\u8282\u70b9 \\(n\\)\u3002\u7531\u4e8e\u8fd9\u4e2a\u57ce\u5e02\u7684\u4ea4\u901a\u6bd4\u8f83\u7e41\u5fd9\uff0c\u56e0\u6b64\u6240\u6709\u7684\u9053\u8def\u90fd\u662f\u5355\u884c\u7684\uff0c\u5171\u6709 \\(m\\) \u6761\u9053\u8def\u3002\u8fd9\u4e2a\u90ae\u9012\u5458\u6bcf\u6b21\u53ea\u80fd\u5e26\u4e00\u6837\u4e1c\u897f\uff0c\u5e76\u4e14\u8fd0\u9001\u6bcf\u4ef6\u7269\u54c1\u8fc7\u540e\u5fc5\u987b\u8fd4\u56de\u90ae\u5c40\u3002\u6c42\u9001\u5b8c\u8fd9 \\(n-1\\) \u6837\u4e1c\u897f\u5e76\u4e14\u6700\u7ec8\u56de\u5230\u90ae\u5c40\u6700\u5c11\u9700\u8981\u7684\u65f6\u95f4\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570\uff0c\\(n\\) \u548c \\(m\\)\uff0c\u8868\u793a\u57ce\u5e02\u7684\u8282\u70b9\u6570\u91cf\u548c\u9053\u8def\u6570\u91cf\u3002</p> <p>\u7b2c\u4e8c\u884c\u5230\u7b2c \\((m+1)\\) \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570\uff0c\\(u,v,w\\)\uff0c\u8868\u793a\u4ece \\(u\\) \u5230 \\(v\\) \u6709\u4e00\u6761\u901a\u8fc7\u65f6\u95f4\u4e3a \\(w\\) \u7684\u9053\u8def\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4ec5\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u6700\u5c11\u9700\u8981\u7684\u65f6\u95f4\u3002</p> <p>\u6837\u4f8b</p> <p>\u6837\u4f8b\u8f93\u5165</p> <pre><code>5 10\n2 3 5\n1 5 5\n3 5 6\n1 2 8\n1 3 8\n5 3 4\n4 1 8\n4 5 3\n3 5 6\n5 4 2\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa</p> <pre><code>83\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e \\(30\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\leq n \\leq 200\\)\u3002</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\leq n \\leq 10^3\\)\uff0c\\(1 \\leq m \\leq 10^5\\)\uff0c\\(1\\leq u,v \\leq n\\)\uff0c\\(1 \\leq w \\leq 10^4\\)\uff0c\u8f93\u5165\u4fdd\u8bc1\u4efb\u610f\u4e24\u70b9\u90fd\u80fd\u4e92\u76f8\u5230\u8fbe\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int N = 1e3 + 10;\nint n, m, disa[N], disb[N];\nbool vis[N];\nvector&lt;pii&gt; va[N], vb[N];\nvoid dijkstra(vector&lt;pii&gt; v[N], int dis[]) {\n    memset(vis, 0, sizeof(vis));\n    dis[1] = 0;\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; q;\n    q.push({0, 1});\n    while (!q.empty()) {\n        pii now = q.top();\n        q.pop();\n        int x = now.second;\n        if (vis[x])\n            continue;\n        vis[x] = 1;\n        for (int i = 0; i &lt; v[x].size(); i++) {\n            int nx = v[x][i].second;\n            int w = v[x][i].first;\n            if (dis[nx] &gt; dis[x] + w) {\n                dis[nx] = dis[x] + w;\n                q.push({dis[nx], nx});\n            }\n        }\n    }\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y, z;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n        va[x].push_back({z, y});\n        vb[y].push_back({z, x});\n    }\n    memset(disa, 0x3f, sizeof(disa));\n    memset(disb, 0x3f, sizeof(disb));\n    dijkstra(va, disa);\n    dijkstra(vb, disb);\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++)\n        ans += disa[i] + disb[i];\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#eg65","title":"e.g.65 \u6700\u77ed\u8def\u8ba1\u6570","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u51fa\u4e00\u4e2a \\(N\\) \u4e2a\u9876\u70b9 \\(M\\) \u6761\u8fb9\u7684\u65e0\u5411\u65e0\u6743\u56fe\uff0c\u9876\u70b9\u7f16\u53f7\u4e3a \\(1\\sim N\\)\u3002\u95ee\u4ece\u9876\u70b9 \\(1\\) \u5f00\u59cb\uff0c\u5230\u5176\u4ed6\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u6709\u51e0\u6761\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u5305\u542b \\(2\\) \u4e2a\u6b63\u6574\u6570 \\(N,M\\)\uff0c\u4e3a\u56fe\u7684\u9876\u70b9\u6570\u4e0e\u8fb9\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 \\(M\\) \u884c\uff0c\u6bcf\u884c \\(2\\) \u4e2a\u6b63\u6574\u6570 \\(x,y\\)\uff0c\u8868\u793a\u6709\u4e00\u6761\u8fde\u63a5\u9876\u70b9 \\(x\\) \u548c\u9876\u70b9 \\(y\\) \u7684\u8fb9\uff0c\u8bf7\u6ce8\u610f\u53ef\u80fd\u6709\u81ea\u73af\u4e0e\u91cd\u8fb9\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u5171 \\(N\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u7b2c \\(i\\) \u884c\u8f93\u51fa\u4ece\u9876\u70b9 \\(1\\) \u5230\u9876\u70b9 \\(i\\) \u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u6700\u77ed\u8def\uff0c\u7531\u4e8e\u7b54\u6848\u6709\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa $ ans \\bmod 100003$ \u540e\u7684\u7ed3\u679c\u5373\u53ef\u3002\u5982\u679c\u65e0\u6cd5\u5230\u8fbe\u9876\u70b9 \\(i\\) \u5219\u8f93\u51fa \\(0\\)\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>5 7\n1 2\n1 3\n2 4\n3 4\n2 3\n4 5\n4 5\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>1\n1\n1\n2\n4\n</code></pre> <p>\u63d0\u793a</p> <p>\\(1\\) \u5230 \\(5\\) \u7684\u6700\u77ed\u8def\u6709 \\(4\\) \u6761\uff0c\u5206\u522b\u4e3a \\(2\\) \u6761 \\(1\\to 2\\to 4\\to 5\\) \u548c \\(2\\) \u6761 \\(1\\to 3\\to 4\\to 5\\)\uff08\u7531\u4e8e \\(4\\to 5\\) \u7684\u8fb9\u6709 \\(2\\) \u6761\uff09\u3002</p> <p>\u5bf9\u4e8e \\(20\\%\\) \u7684\u6570\u636e\uff0c\\(1\\le N \\le 100\\)\uff1b \u5bf9\u4e8e \\(60\\%\\) \u7684\u6570\u636e\uff0c\\(1\\le N \\le 10^3\\)\uff1b \u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1\\le N\\le10^6\\)\uff0c\\(1\\le M\\le 2\\times 10^6\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int N = 1e6 + 10, mod = 100003;\nint n, m, dis[N], cnt[N];\nbool vis[N];\nvector&lt;int&gt; v[N];\npriority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; q;\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        v[x].push_back(y);\n        v[y].push_back(x);\n    }\n    memset(dis, 0x3f, sizeof(dis));\n    dis[1] = 0, cnt[1] = 1;\n    q.push({0, 1});\n    while (!q.empty()) {\n        pii now = q.top();\n        q.pop();\n        int x = now.second;\n        if (vis[x])\n            continue;\n        vis[x] = 1;\n        for (int i = 0; i &lt; v[x].size(); i++) {\n            int nx = v[x][i];\n            if (dis[nx] &gt; dis[x] + 1) {\n                dis[nx] = dis[x] + 1;\n                cnt[nx] = cnt[x];\n                q.push({dis[nx], nx});\n            } else if (dis[nx] == dis[x] + 1)\n                cnt[nx] = (cnt[nx] + cnt[x]) % mod;\n        }\n    }\n    for (int i = 1; i &lt;= n; i++)\n        cout &lt;&lt; cnt[i] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#eg66-2022-b","title":"e.g.66 [\u84dd\u6865\u676f 2022 \u56fd B] \u51fa\u5dee","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\\(\\mathrm{A}\\) \u56fd\u6709 \\(N\\) \u4e2a\u57ce\u5e02\uff0c\u7f16\u53f7\u4e3a \\(1 \\ldots N\\) \u5c0f\u660e\u662f\u7f16\u53f7\u4e3a \\(1\\) \u7684\u57ce\u5e02\u4e2d\u4e00\u5bb6\u516c\u53f8\u7684\u5458\u5de5\uff0c\u4eca\u5929\u7a81\u7136\u63a5\u5230\u4e86\u4e0a\u7ea7\u901a\u77e5\u9700\u8981\u53bb\u7f16\u53f7\u4e3a \\(N\\) \u7684\u57ce\u5e02\u51fa\u5dee\u3002</p> <p>\u7531\u4e8e\u75ab\u60c5\u539f\u56e0\uff0c\u5f88\u591a\u76f4\u8fbe\u7684\u4ea4\u901a\u65b9\u5f0f\u6682\u65f6\u5173\u95ed\uff0c\u5c0f\u660e\u65e0\u6cd5\u4e58\u5750\u98de\u673a\u76f4\u63a5\u4ece\u57ce\u5e02 \\(1\\) \u5230\u8fbe\u57ce\u5e02 \\(N\\)\uff0c\u9700\u8981\u901a\u8fc7\u5176\u4ed6\u57ce\u5e02\u8fdb\u884c\u9646\u8def\u4ea4\u901a\u4e2d\u8f6c\u3002\u5c0f\u660e\u901a\u8fc7\u4ea4\u901a\u4fe1\u606f\u7f51\uff0c\u67e5\u8be2\u5230\u4e86 \\(M\\) \u6761\u57ce\u5e02\u4e4b\u95f4\u4ecd\u7136\u8fd8\u5f00\u901a\u7684\u8def\u7ebf\u4fe1\u606f\u4ee5\u53ca\u6bcf\u4e00\u6761\u8def\u7ebf\u9700\u8981\u82b1\u8d39\u7684\u65f6\u95f4\u3002</p> <p>\u540c\u6837\u7531\u4e8e\u75ab\u60c5\u539f\u56e0\uff0c\u5c0f\u660e\u5230\u8fbe\u4e00\u4e2a\u57ce\u5e02\u540e\u9700\u8981\u9694\u79bb\u89c2\u5bdf\u4e00\u6bb5\u65f6\u95f4\u624d\u80fd\u79bb\u5f00\u8be5\u57ce\u5e02\u524d\u5f80\u5176\u4ed6\u57ce\u5e02\u3002\u901a\u8fc7\u7f51\u7edc\uff0c\u5c0f\u660e\u4e5f\u67e5\u8be2\u5230\u4e86\u5404\u4e2a\u57ce\u5e02\u7684\u9694\u79bb\u4fe1\u606f\u3002\uff08\u7531\u4e8e\u5c0f\u660e\u4e4b\u524d\u5728\u57ce\u5e02 \\(1\\)\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u79bb\u5f00\u57ce\u5e02 \\(1\\)\uff0c\u4e0d\u9700\u8981\u9694\u79bb\uff09</p> <p>\u7531\u4e8e\u4e0a\u7ea7\u8981\u6c42\uff0c\u5c0f\u660e\u5e0c\u671b\u80fd\u591f\u5c3d\u5feb\u8d76\u5230\u57ce\u5e02 \\(\\mathrm{N}\\), \u56e0\u6b64\u4ed6\u6c42\u52a9\u4e8e\u4f60\uff0c\u5e0c\u671b\u4f60\u80fd\u5e2e\u4ed6\u89c4\u5212\u4e00\u6761\u8def\u7ebf\uff0c\u80fd\u591f\u5728\u6700\u77ed\u65f6\u95f4\u5185\u5230\u8fbe\u57ce\u5e02 \\(N\\) \u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c \\(1\\) \u884c\uff1a\u4e24\u4e2a\u6b63\u6574\u6570 \\(N, M\\) \u8868\u793a A \u56fd\u7684\u57ce\u5e02\u6570\u91cf, \\(M\\) \u8868\u793a\u672b\u5173\u95ed\u7684\u8def\u7ebf\u6570\u91cf\u3002</p> <p>\u7b2c \\(2\\) \u884c: \\(N\\) \u4e2a\u6b63\u6574\u6570\uff0c\u7b2c \\(i\\) \u4e2a\u6574\u6570 \\(C_{i}\\) \u8868\u793a\u5230\u8fbe\u7f16\u53f7\u4e3a \\(\\mathrm{i}\\) \u7684\u57ce\u5e02\u540e\u9700\u8981\u9694\u79bb\u7684\u65f6\u95f4\u3002</p> <p>\u7b2c \\(3 \\ldots M+2\\) \u884c: \u6bcf\u884c \\(3\\) \u4e2a\u6b63\u6574\u6570, \\(u, v, c\\), \u8868\u793a\u6709\u4e00\u6761\u57ce\u5e02 \\(u\\) \u5230\u57ce\u5e02 \\(v\\) \u7684\u53cc\u5411\u8def\u7ebf\u4ecd\u7136\u5f00\u901a\u7740\uff0c\u901a\u8fc7\u8be5\u8def\u7ebf\u7684\u65f6\u95f4\u4e3a \\(c\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u7b2c \\(1\\) \u884c\uff1a\\(1\\) \u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u5c0f\u660e\u4ece\u57ce\u5e02 \\(1\\) \u51fa\u53d1\u5230\u8fbe\u57ce\u5e02 \\(N\\) \u7684\u6700\u77ed\u65f6\u95f4\u3002\uff08\u5230\u8fbe\u57ce\u5e02 \\(N\\)\uff0c\u4e0d\u9700\u8981\u8ba1\u7b97\u57ce\u5e02 \\(N\\) \u7684\u9694\u79bb\u65f6\u95f4\uff09</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>4 4\n5 7 3 4\n1 2 4\n1 3 5\n2 4 3\n3 4 5\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>13\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6837\u4f8b\u8bf4\u660e\u3011</p> <p></p> <p>\u3010\u8bc4\u6d4b\u7528\u4f8b\u89c4\u6a21\u4e0e\u7ea6\u5b9a\u3011</p> <p>\u5bf9\u4e8e \\(100 \\%\\) \u7684\u6570\u636e, \\(1 \\leq N \\leq 1000,1 \\leq M \\leq 10000,1 \\leq C_{i} \\leq 200,1 \\leq u, v \\leq\\) \\(N, 1 \\leq c \\leq 1000\\) </p> <p>\u84dd\u6865\u676f 2022 \u56fd\u8d5b B \u7ec4 E \u9898\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int N = 1e3 + 10;\nint n, m, dis[N], a[N];\nbool vis[N];\nvector&lt;pii&gt; v[N];\nqueue&lt;int&gt; q;\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y, z;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n        v[x].push_back({z, y});\n        v[y].push_back({z, x});\n    }\n    memset(dis, 0x3f, sizeof(dis));\n    dis[1] = 0;\n    q.push(1);\n    while (!q.empty()) {\n        int x = q.front();\n        q.pop();\n        vis[x] = 0;\n        for (int i = 0; i &lt; v[x].size(); i++) {\n            int nx = v[x][i].second;\n            int w = v[x][i].first;\n            if (dis[nx] &gt; dis[x] + w + a[nx]) {\n                dis[nx] = dis[x] + w + a[nx];\n                if (!vis[nx]) {\n                    vis[nx] = 1;\n                    q.push(nx);\n                }\n            }\n        }\n    }\n    cout &lt;&lt; dis[n] - a[n] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/18%20%E3%80%81%E5%9B%BE/#eg67","title":"e.g.67 \u3010\u6a21\u677f\u3011\u8d1f\u73af","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u5b9a\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\u7684\u6709\u5411\u56fe\uff0c\u8bf7\u6c42\u51fa\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u4ece\u9876\u70b9 \\(1\\) \u51fa\u53d1\u80fd\u5230\u8fbe\u7684\u8d1f\u73af\u3002</p> <p>\u8d1f\u73af\u7684\u5b9a\u4e49\u662f\uff1a\u4e00\u6761\u8fb9\u6743\u4e4b\u548c\u4e3a\u8d1f\u6570\u7684\u56de\u8def\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u672c\u9898\u5355\u6d4b\u8bd5\u70b9\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002</p> <p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 \\(T\\)\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u7684\u683c\u5f0f\u5982\u4e0b\uff1a</p> <p>\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u56fe\u7684\u70b9\u6570 \\(n\\) \u548c\u63a5\u4e0b\u6765\u7ed9\u51fa\u8fb9\u4fe1\u606f\u7684\u6761\u6570 \\(m\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(m\\) \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 \\(u, v, w\\)\u3002</p> <ul> <li>\u82e5 \\(w \\geq 0\\)\uff0c\u5219\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece \\(u\\) \u81f3 \\(v\\) \u8fb9\u6743\u4e3a \\(w\\) \u7684\u8fb9\uff0c\u8fd8\u5b58\u5728\u4e00\u6761\u4ece \\(v\\) \u81f3 \\(u\\) \u8fb9\u6743\u4e3a \\(w\\) \u7684\u8fb9\u3002</li> <li>\u82e5 \\(w &lt; 0\\)\uff0c\u5219\u53ea\u8868\u793a\u5b58\u5728\u4e00\u6761\u4ece \\(u\\) \u81f3 \\(v\\) \u8fb9\u6743\u4e3a \\(w\\) \u7684\u8fb9\u3002</li> </ul> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u82e5\u6240\u6c42\u8d1f\u73af\u5b58\u5728\uff0c\u5219\u8f93\u51fa <code>YES</code>\uff0c\u5426\u5219\u8f93\u51fa <code>NO</code>\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>2\n3 4\n1 2 2\n1 3 4\n2 3 1\n3 1 -3\n3 3\n1 2 3\n2 3 4\n3 1 -8\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>NO\nYES\n</code></pre> <p>\u63d0\u793a</p> <p>\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <p>\u5bf9\u4e8e\u5168\u90e8\u7684\u6d4b\u8bd5\u70b9\uff0c\u4fdd\u8bc1\uff1a</p> <ul> <li>\\(1 \\leq n \\leq 2 \\times 10^3\\)\uff0c\\(1 \\leq m \\leq 3 \\times 10^3\\)\u3002</li> <li>\\(1 \\leq u, v \\leq n\\)\uff0c\\(-10^4 \\leq w \\leq 10^4\\)\u3002</li> <li>\\(1 \\leq T \\leq 10\\)\u3002</li> </ul> <p>\u63d0\u793a</p> <p>\u8bf7\u6ce8\u610f\uff0c\\(m\\) \u4e0d\u662f\u56fe\u7684\u8fb9\u6570\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int N = 2e3 + 10;\nint t, n, m, dis[N], cnt[N];\nbool vis[N];\nint solve() {\n    vector&lt;pii&gt; v[N];\n    queue&lt;int&gt; q;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y, w;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;\n        if (w &gt;= 0) {\n            v[x].push_back({w, y});\n            v[y].push_back({w, x});\n        } else\n            v[x].push_back({w, y});\n    }\n    memset(dis, 0x3f, sizeof(dis));\n    memset(cnt, 0, sizeof(cnt));\n    memset(vis, 0, sizeof(vis));\n    dis[1] = 0;\n    q.push(1);\n    while (!q.empty()) {\n        int x = q.front();\n        q.pop();\n        vis[x] = 0;\n        for (int i = 0; i &lt; v[x].size(); i++) {\n            int nx = v[x][i].second;\n            int w = v[x][i].first;\n            if (dis[nx] &gt; dis[x] + w) {\n                dis[nx] = dis[x] + w;\n                if (!vis[nx]) {\n                    vis[nx] = 1;\n                    q.push(nx);\n                    cnt[nx] = cnt[x] + 1;\n                    if (cnt[nx] &gt;= n)\n                        return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\nint main() {\n    cin &gt;&gt; t;\n    while (t--) {\n        int ret = solve();\n        if (ret)\n            cout &lt;&lt; \"YES\" &lt;&lt; endl;\n        else\n            cout &lt;&lt; \"NO\" &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/19%20%E3%80%81%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/","title":"19 \u3001\u6700\u5c0f\u751f\u6210\u6811","text":"<ul> <li>1\u3001\u6982\u5ff5</li> <li>2\u3001\u4e24\u79cd\u7b97\u6cd5\uff08\u8d2a\u5fc3\uff09<ul> <li>\uff081\uff09\\(Kruskal\\)\u7b97\u6cd5</li> <li>\uff082\uff09\\(Prim\\)\u7b97\u6cd5</li> </ul> </li> <li>\u4f8b\u9898<ul> <li>e.g.68 \u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811</li> <li>e.g.69 \u65e0\u7ebf\u901a\u8baf\u7f51</li> <li>\u2b50e.g.70 \u516c\u8def\u4fee\u5efa</li> </ul> </li> </ul>"},{"location":"DataStruct/19%20%E3%80%81%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#1","title":"1\u3001\u6982\u5ff5","text":"<ul> <li>\u751f\u6210\u6811\uff1a\u7528\\(n-1\\)\u6761\u8fb9\u8fde\u63a5\\(n\\)\u4e2a\u70b9</li> <li>\u6700\u5c0f\u751f\u6210\u6811\uff1a\u8fde\u63a5\u7684\u8fb9\u6743\u503c\u4e4b\u548c\u6700\u5c0f\uff0c\u4e14\u4e0d\u6210\u73af</li> </ul>"},{"location":"DataStruct/19%20%E3%80%81%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#2","title":"2\u3001\u4e24\u79cd\u7b97\u6cd5\uff08\u8d2a\u5fc3\uff09","text":""},{"location":"DataStruct/19%20%E3%80%81%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#1kruskal","title":"\uff081\uff09\\(Kruskal\\)\u7b97\u6cd5","text":"<p>Tip</p> <p>\u6392\u5e8f\uff0b\u5e76\u67e5\u96c6</p> <p>\u628a\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u68c0\u67e5\u662f\u5426\u5728\u540c\u4e00\u68f5\u6811\u4e0a\uff0c\u4e0d\u662f\u5219\u8fde\u63a5\uff0c\u662f\u5219\u7ee7\u7eed\u904d\u5386\u5176\u4f59\u6743\u503c</p> <p>\u590d\u6742\u5ea6\uff1a\\(m\\log n\\Rightarrow \u9002\u7528\u4e8e\u7a00\u758f\u56fe\\)</p>"},{"location":"DataStruct/19%20%E3%80%81%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#2prim","title":"\uff082\uff09\\(Prim\\)\u7b97\u6cd5","text":"<p>\u4efb\u610f\u8d77\u70b9\uff0c\u5bfb\u627e\u548c\u8be5\u6574\u4f53\u8fde\u63a5\u7684\u6700\u5c0f\u6743\u503c</p> <p>\u590d\u6742\u5ea6\uff1a\\(n\\log m\\Rightarrow \u9002\u7528\u4e8e\u7a20\u5bc6\u56fe\uff08\u70b9\u5c11\u8fb9\u591a\uff09\\)</p> <p>Note</p> <p>\u8fb9\u5f88\u591a\uff0c\\(Kruskal\\)\u590d\u6742\u5ea6\u7565\u5dee</p>"},{"location":"DataStruct/19%20%E3%80%81%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/19%20%E3%80%81%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#eg68","title":"e.g.68 \u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5982\u9898\uff0c\u7ed9\u51fa\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u679c\u8be5\u56fe\u4e0d\u8fde\u901a\uff0c\u5219\u8f93\u51fa <code>orz</code>\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 \\(N,M\\)\uff0c\u8868\u793a\u8be5\u56fe\u5171\u6709 \\(N\\) \u4e2a\u7ed3\u70b9\u548c \\(M\\) \u6761\u65e0\u5411\u8fb9\u3002</p> <p>\u63a5\u4e0b\u6765 \\(M\\) \u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 \\(X_i,Y_i,Z_i\\)\uff0c\u8868\u793a\u6709\u4e00\u6761\u957f\u5ea6\u4e3a \\(Z_i\\) \u7684\u65e0\u5411\u8fb9\u8fde\u63a5\u7ed3\u70b9 \\(X_i,Y_i\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u5982\u679c\u8be5\u56fe\u8fde\u901a\uff0c\u5219\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u8868\u793a\u6700\u5c0f\u751f\u6210\u6811\u7684\u5404\u8fb9\u7684\u957f\u5ea6\u4e4b\u548c\u3002\u5982\u679c\u8be5\u56fe\u4e0d\u8fde\u901a\u5219\u8f93\u51fa <code>orz</code>\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>4 5\n1 2 2\n1 3 2\n1 4 3\n2 3 4\n3 4 3\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>7\n</code></pre> <p>\u63d0\u793a</p> <p>\u6570\u636e\u89c4\u6a21\uff1a</p> <p>\u5bf9\u4e8e \\(20\\%\\) \u7684\u6570\u636e\uff0c\\(N\\le 5\\)\uff0c\\(M\\le 20\\)\u3002</p> <p>\u5bf9\u4e8e \\(40\\%\\) \u7684\u6570\u636e\uff0c\\(N\\le 50\\)\uff0c\\(M\\le 2500\\)\u3002</p> <p>\u5bf9\u4e8e \\(70\\%\\) \u7684\u6570\u636e\uff0c\\(N\\le 500\\)\uff0c\\(M\\le 10^4\\)\u3002</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff1a\\(1\\le N\\le 5000\\)\uff0c\\(1\\le M\\le 2\\times 10^5\\)\uff0c\\(1\\le Z_i \\le 10^4\\)\u3002</p> \\(Kruskal\\)\\(Prim\\) <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 5e3 + 10, M = 2e5 + 10;\nstruct edge {\n    int x, y, w;\n} e[M];\nint n, m, ans, cnt, s[N];\nbool cmp(edge e1, edge e2) {\n    return e1.w &lt; e2.w;\n}\n// \u5e76\u67e5\u96c6\u8def\u5f84\u538b\u7f29\nint find_set(int k) {\n    if (k != s[k])\n        s[k] = find_set(s[k]);\n    return s[k];\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; e[i].x &gt;&gt; e[i].y &gt;&gt; e[i].w;\n    sort(e + 1, e + 1 + m, cmp); // \u6309\u6743\u503c\u6392\u5e8f\n    for (int i = 1; i &lt;= n; i++)\n        s[i] = i;\n    // Kruskal\u7b97\u6cd5\n    for (int i = 1; i &lt;= m; i++) {\n        int nx = find_set(e[i].x), ny = find_set(e[i].y);\n        if (nx != ny) {\n            s[nx] = ny;\n            ans += e[i].w, cnt++;\n        }\n    }\n    if (cnt == n - 1)\n        cout &lt;&lt; ans &lt;&lt; endl;\n    else\n        cout &lt;&lt; \"orz\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int N = 5e3 + 10, M = 2e5 + 10;\nint n, m, ans, cnt, dis[N];\nbool vis[N];\nvector&lt;pii&gt; v[N];\npriority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; q;\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y, w;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;\n        v[x].push_back({w, y});\n        v[y].push_back({w, x});\n    }\n    memset(dis, 0x3f, sizeof(dis));\n    dis[1] = 0;\n    q.push({0, 1});\n    while (!q.empty()) {\n        pii now = q.top();\n        q.pop();\n        int x = now.second;\n        if (vis[x])\n            continue;\n        vis[x] = 1;\n        ans += now.first;\n        cnt++;\n        for (int i = 0; i &lt; v[x].size(); i++) {\n            int nx = v[x][i].second;\n            int w = v[x][i].first;\n            if (dis[nx] &gt; w) {\n                dis[nx] = w;\n                if (vis[nx] == 0)\n                    q.push({dis[nx], nx});\n            }\n        }\n    }\n    cnt--;\n    if (cnt == n - 1)\n        cout &lt;&lt; ans &lt;&lt; endl;\n    else\n        cout &lt;&lt; \"orz\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/19%20%E3%80%81%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#eg69","title":"e.g.69 \u65e0\u7ebf\u901a\u8baf\u7f51","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u56fd\u9632\u90e8\u8ba1\u5212\u7528\u65e0\u7ebf\u7f51\u7edc\u8fde\u63a5\u82e5\u5e72\u4e2a\u8fb9\u9632\u54e8\u6240\u30022 \u79cd\u4e0d\u540c\u7684\u901a\u8baf\u6280\u672f\u7528\u6765\u642d\u5efa\u65e0\u7ebf\u7f51\u7edc\uff1b</p> <p>\u6bcf\u4e2a\u8fb9\u9632\u54e8\u6240\u90fd\u8981\u914d\u5907\u65e0\u7ebf\u7535\u6536\u53d1\u5668\uff1b\u6709\u4e00\u4e9b\u54e8\u6240\u8fd8\u53ef\u4ee5\u589e\u914d\u536b\u661f\u7535\u8bdd\u3002</p> <p>\u4efb\u610f\u4e24\u4e2a\u914d\u5907\u4e86\u4e00\u6761\u536b\u661f\u7535\u8bdd\u7ebf\u8def\u7684\u54e8\u6240\uff08\u4e24\u8fb9\u90fd\u6709\u536b\u661f\u7535\u8bdd\uff09\u5747\u53ef\u4ee5\u901a\u8bdd\uff0c\u65e0\u8bba\u4ed6\u4eec\u76f8\u8ddd\u591a\u8fdc\u3002\u800c\u53ea\u901a\u8fc7\u65e0\u7ebf\u7535\u6536\u53d1\u5668\u901a\u8bdd\u7684\u54e8\u6240\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e0d\u80fd\u8d85\u8fc7 \\(D\\)\uff0c\u8fd9\u662f\u53d7\u6536\u53d1\u5668\u7684\u529f\u7387\u9650\u5236\u3002\u6536\u53d1\u5668\u7684\u529f\u7387\u8d8a\u9ad8\uff0c\u901a\u8bdd\u8ddd\u79bb \\(D\\) \u4f1a\u66f4\u8fdc\uff0c\u4f46\u540c\u65f6\u4ef7\u683c\u4e5f\u4f1a\u66f4\u8d35\u3002</p> <p>\u6536\u53d1\u5668\u9700\u8981\u7edf\u4e00\u8d2d\u4e70\u548c\u5b89\u88c5\uff0c\u6240\u4ee5\u5168\u90e8\u54e8\u6240\u53ea\u80fd\u9009\u62e9\u5b89\u88c5\u4e00\u79cd\u578b\u53f7\u7684\u6536\u53d1\u5668\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u4e00\u5bf9\u54e8\u6240\u4e4b\u95f4\u7684\u901a\u8bdd\u8ddd\u79bb\u90fd\u662f\u540c\u4e00\u4e2a \\(D\\)\u3002\u4f60\u7684\u4efb\u52a1\u662f\u786e\u5b9a\u6536\u53d1\u5668\u5fc5\u987b\u7684\u6700\u5c0f\u901a\u8bdd\u8ddd\u79bb \\(D\\)\uff0c\u4f7f\u5f97\u6bcf\u4e00\u5bf9\u54e8\u6240\u4e4b\u95f4\u81f3\u5c11\u6709\u4e00\u6761\u901a\u8bdd\u8def\u5f84\uff08\u76f4\u63a5\u7684\u6216\u8005\u95f4\u63a5\u7684\uff09\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\uff0c\\(2\\) \u4e2a\u6574\u6570 \\(S\\) \u548c \\(P\\)\uff0c\\(S\\) \u8868\u793a\u53ef\u5b89\u88c5\u7684\u536b\u661f\u7535\u8bdd\u7684\u54e8\u6240\u6570\uff0c\\(P\\) \u8868\u793a\u8fb9\u9632\u54e8\u6240\u7684\u6570\u91cf\u3002</p> <p>\u63a5\u4e0b\u91cc \\(P\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(x\uff0cy\\) \u63cf\u8ff0\u4e00\u4e2a\u54e8\u6240\u7684\u5e73\u9762\u5750\u6807 \\((x, y)\\)\uff0c\u4ee5 km \u4e3a\u5355\u4f4d\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\uff0c\\(1\\) \u4e2a\u5b9e\u6570 \\(D\\)\uff0c\u8868\u793a\u65e0\u7ebf\u7535\u6536\u53d1\u5668\u7684\u6700\u5c0f\u4f20\u8f93\u8ddd\u79bb\uff0c\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>2 4\n0 100\n0 300\n0 600\n150 750\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>212.13\n</code></pre> <p>\u63d0\u793a</p> <p>\u6570\u636e\u8303\u56f4\u53ca\u7ea6\u5b9a</p> <ul> <li>\u5bf9\u4e8e \\(20\\%\\) \u7684\u6570\u636e\uff1a\\(P = 2\uff0cS = 1\\)\uff1b</li> <li>\u5bf9\u4e8e\u53e6\u5916 \\(20\\%\\) \u7684\u6570\u636e\uff1a\\(P = 4\uff0cS = 2\\)\uff1b</li> <li>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\u4fdd\u8bc1\uff1a\\(1 \u2264 S \u2264 100\\)\uff0c\\(S &lt; P \u2264 500\\)\uff0c\\(0 \u2264 x,y \u2264 10000\\)\u3002</li> </ul> Tip <p>\u6c42\u6700\u5927\u7684\u8fb9\u7684\u6743\u503c\uff0c\u6709\u536b\u661f\u7535\u8bdd\u7684\u6743\u503c\u4e3a0</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\nconst int N = 505, M = 3e5 + 10;\nstruct edge {\n    int x, y;\n    double w;\n} e[M];\nint k, n, cnt, s[N];\ndouble ans[M];\npii p[N];\nbool cmp(edge e1, edge e2) {\n    return e1.w &lt; e2.w;\n}\nint find_set(int k) {\n    if (k != s[k])\n        s[k] = find_set(s[k]);\n    return s[k];\n}\nint main() {\n    cin &gt;&gt; k &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; p[i].first &gt;&gt; p[i].second;\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = i + 1; j &lt;= n; j++) {\n            e[++cnt].x = i, e[cnt].y = j;\n            e[cnt].w = sqrt((p[i].first - p[j].first) * (p[i].first - p[j].first) +\n                            (p[i].second - p[j].second) * (p[i].second - p[j].second));\n        }\n    sort(e + 1, e + 1 + cnt, cmp);\n    for (int i = 1; i &lt;= n; i++)\n        s[i] = i;\n    int num = 0;\n    for (int i = 1; i &lt;= cnt; i++) {\n        int nx = find_set(e[i].x), ny = find_set(e[i].y);\n        if (nx != ny) {\n            s[nx] = ny;\n            ans[++num] = e[i].w;\n        }\n    }\n    if (k == 1)\n        printf(\"%.2lf\", ans[num]);\n    else\n        printf(\"%.2lf\", ans[max(0, num - k + 1)]);\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/19%20%E3%80%81%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#eg70","title":"\u2b50e.g.70 \u516c\u8def\u4fee\u5efa","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u67d0\u56fd\u6709 \\(n\\) \u4e2a\u57ce\u5e02\uff0c\u5b83\u4eec\u4e92\u76f8\u4e4b\u95f4\u6ca1\u6709\u516c\u8def\u76f8\u901a\uff0c\u56e0\u6b64\u4ea4\u901a\u5341\u5206\u4e0d\u4fbf\u3002\u4e3a\u89e3\u51b3\u8fd9\u4e00\u201c\u884c\u8def\u96be\u201d\u7684\u95ee\u9898\uff0c\u653f\u5e9c\u51b3\u5b9a\u4fee\u5efa\u516c\u8def\u3002\u4fee\u5efa\u516c\u8def\u7684\u4efb\u52a1\u7531\u5404\u57ce\u5e02\u5171\u540c\u5b8c\u6210\u3002</p> <p>\u4fee\u5efa\u5de5\u7a0b\u5206\u82e5\u5e72\u8f6e\u5b8c\u6210\u3002\u5728\u6bcf\u4e00\u8f6e\u4e2d\uff0c\u6bcf\u4e2a\u57ce\u5e02\u9009\u62e9\u4e00\u4e2a\u4e0e\u5b83\u6700\u8fd1\u7684\u57ce\u5e02\uff0c\u7533\u8bf7\u4fee\u5efa\u901a\u5f80\u8be5\u57ce\u5e02\u7684\u516c\u8def\u3002\u653f\u5e9c\u8d1f\u8d23\u5ba1\u6279\u8fd9\u4e9b\u7533\u8bf7\u4ee5\u51b3\u5b9a\u662f\u5426\u540c\u610f\u4fee\u5efa\u3002</p> <p>\u653f\u5e9c\u5ba1\u6279\u7684\u89c4\u5219\u5982\u4e0b\uff1a</p> <ol> <li>\u5982\u679c\u4e24\u4e2a\u6216\u4ee5\u4e0a\u57ce\u5e02\u7533\u8bf7\u4fee\u5efa\u540c\u4e00\u6761\u516c\u8def\uff0c\u5219\u8ba9\u5b83\u4eec\u5171\u540c\u4fee\u5efa\uff1b</li> <li>\u5982\u679c\u4e09\u4e2a\u6216\u4ee5\u4e0a\u7684\u57ce\u5e02\u7533\u8bf7\u4fee\u5efa\u7684\u516c\u8def\u6210\u73af\u3002\u5982\u4e0b\u56fe\uff0cA \u7533\u8bf7\u4fee\u5efa\u516c\u8def AB\uff0cB \u7533\u8bf7\u4fee\u5efa\u516c\u8def BC\uff0cC \u7533\u8bf7\u4fee\u5efa\u516c\u8def CA\u3002\u5219\u653f\u5e9c\u5c06\u5426\u51b3\u5176\u4e2d\u6700\u77ed\u7684\u4e00\u6761\u516c\u8def\u7684\u4fee\u5efa\u7533\u8bf7\uff1b </li> <li>\u5176\u4ed6\u60c5\u51b5\u7684\u7533\u8bf7\u4e00\u5f8b\u540c\u610f\u3002</li> </ol> <p></p> <p>\u4e00\u8f6e\u4fee\u5efa\u7ed3\u675f\u540e\uff0c\u53ef\u80fd\u4f1a\u6709\u82e5\u5e72\u57ce\u5e02\u53ef\u4ee5\u901a\u8fc7\u516c\u8def\u76f4\u63a5\u6216\u95f4\u63a5\u76f8\u8fde\u3002\u8fd9\u4e9b\u53ef\u4ee5\u4e92\u76f8\u8fde\u901a\u7684\u57ce\u5e02\u5373\u7ec4\u6210\u201c\u57ce\u5e02\u8054\u76df\u201d\u3002\u5728\u4e0b\u4e00\u8f6e\u4fee\u5efa\u4e2d\uff0c\u6bcf\u4e2a\u201c\u57ce\u5e02\u8054\u76df\u201d\u5c06\u88ab\u770b\u4f5c\u4e00\u4e2a\u57ce\u5e02\uff0c\u53d1\u6325\u4e00\u4e2a\u57ce\u5e02\u7684\u4f5c\u7528\u3002</p> <p>\u5f53\u6240\u6709\u57ce\u5e02\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u201c\u57ce\u5e02\u8054\u76df\u201d\u65f6\uff0c\u4fee\u5efa\u5de5\u7a0b\u4e5f\u5c31\u5b8c\u6210\u4e86\u3002</p> <p>\u4f60\u7684\u4efb\u52a1\u662f\u6839\u636e\u57ce\u5e02\u7684\u5206\u5e03\u548c\u524d\u9762\u8bb2\u5230\u7684\u89c4\u5219\uff0c\u8ba1\u7b97\u51fa\u5c06\u8981\u4fee\u5efa\u7684\u516c\u8def\u603b\u957f\u5ea6\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u57ce\u5e02\u7684\u6570\u91cf\u3002\uff08\\(n \\leq 5000\\)\uff09</p> <p>\u4ee5\u4e0b \\(n\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(x\\) \u548c \\(y\\)\uff0c\u8868\u793a\u4e00\u4e2a\u57ce\u5e02\u7684\u5750\u6807\u3002\uff08\\(-10^6 \\leq x,y \\leq 10^6\\)\uff09</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u5b9e\u6570\uff0c\u56db\u820d\u4e94\u5165\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\uff0c\u8868\u793a\u516c\u8def\u603b\u957f\u3002\uff08\u4fdd\u8bc1\u6709\u552f\u4e00\u89e3\uff09</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>4\n0 0\n1 2\n-1 2\n0 4\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>6.47\n</code></pre> <p>\u63d0\u793a</p> <p>\u4fee\u5efa\u7684\u516c\u8def\u5982\u56fe\u6240\u793a\uff1a</p> <p></p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\ntypedef pair&lt;double, ll&gt; pii;\nconst int N = 5e3 + 10;\nstruct node {\n    ll x, y;\n} e[N];\nll n;\ndouble ans, dis[N];\nbool vis[N];\npriority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; q;\ndouble cal(int i, int j) {\n    return sqrt((e[i].x - e[j].x) * (e[i].x - e[j].x) + (e[i].y - e[j].y) * (e[i].y - e[j].y));\n}\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; e[i].x &gt;&gt; e[i].y;\n    for (int i = 1; i &lt;= n; i++)\n        dis[i] = 1e18;\n    dis[1] = 0;\n    q.push({0, 1});\n    while (!q.empty()) {\n        pii now = q.top();\n        q.pop();\n        int x = now.second;\n        if (vis[x])\n            continue;\n        vis[x] = 1;\n        ans += now.first;\n        for (int i = 1; i &lt;= n; i++) {\n            if (!vis[i] &amp;&amp; dis[i] &gt; cal(x, i)) {\n                dis[i] = cal(x, i);\n                q.push({dis[i], i});\n            }\n        }\n    }\n    printf(\"%.2lf\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/2%20%E3%80%81%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/","title":"2 \u3001\u8f93\u5165\u8f93\u51fa","text":"\u8f93\u5165\u8f93\u51fa  <ul> <li>1\u3001cin/cout \u4e0e scanf/printf</li> <li>2\u3001\u901f\u5ea6\u5bf9\u6bd4</li> <li>3\u3001cin/cout\u4f18\u5316</li> </ul>"},{"location":"DataStruct/2%20%E3%80%81%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/#1cincout-scanfprintf","title":"1\u3001<code>cin/cout</code> \u4e0e <code>scanf/printf</code>","text":"<ul> <li> <p><code>scanf</code>\u3001<code>printf</code>\u9700\u8981\u4f7f\u7528\u683c\u5f0f\u7b26\u53f7<code>%d</code>\u3001<code>%f</code>\u3001<code>%c</code>\u7b49\uff0c\u7528\u8d77\u6765\u4e0d\u5982<code>cin</code>\u3001<code>cout</code>\u7b80\u4fbf\uff0c\u6240\u4ee5\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9009\u7528<code>cin/cout</code>\u3002</p> </li> <li> <p><code>cout</code>\u5728\u63a7\u5236\u5c0f\u6570\u4f4d\u8f93\u51fa\u65f6\u5f88\u9ebb\u70e6\uff0c\u4e0d\u5982\u7528<code>printf</code>\u7b80\u5355\u3002</p> </li> </ul>"},{"location":"DataStruct/2%20%E3%80%81%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/#2","title":"2\u3001\u901f\u5ea6\u5bf9\u6bd4","text":"<p>\u4e00\u822c\u60c5\u51b5\uff1a<code>scanf/printf</code>\u6bd4<code>cin/cout</code>\u5feb4\u500d\u5de6\u53f3</p> <ul> <li> <p>\u8f93\u5165\\(10^4\\)\u4e2a\u6570\uff0c<code>scanf</code>\u7ea6\u9700\u89810.05s\uff0c<code>cin</code>\u7ea6\u9700\u89810.15s\u3002 </p> </li> <li> <p>\u8f93\u5165\\(10^5\\)\u4e2a\u6570\uff0c<code>scanf</code>\u7ea6\u9700\u89810.1s\uff0c<code>cin</code>\u7ea6\u9700\u89810.6s\u3002</p> </li> </ul> <p>Tip</p> <p><code>cout&lt;&lt;endl</code>\u5f88\u6162\uff0c\u6539\u4e3a<code>cout&lt;&lt;\u201c\\n\u201d</code></p>"},{"location":"DataStruct/2%20%E3%80%81%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/#3cincout","title":"3\u3001<code>cin/cout</code>\u4f18\u5316","text":"<p>\u4ee3\u7801\u4e2d\u52a0\u5165\u4e0b\u9762\u4e24\u884c\uff0c\u53ef\u4ee5\u63d0\u5347<code>cin</code>\u3001<code>cout</code>\u7684\u6548\u7387\u3002 <pre><code>ios::sync_with_stdio(false);     //\u8bbe\u7f6e\u4e3a\u5f02\u6b65\ncin.tie(0);                      //\u89e3\u9664cin\u548ccout\u7684\u7ed1\u5b9a\n</code></pre></p> <p>\u6b64\u65f6<code>cin</code>\u3001<code>cout</code>\u548c<code>scanf</code>\u3001<code>printf</code>\u4e00\u6837\u5feb\uff0c\u751a\u81f3\u66f4\u5feb\u3002</p> <p>Tip</p> <p>\u8f93\u5165\u8f93\u51fa\u6570\u636e\u91cf\u5c0f\uff0c\u57281000\u4e2a\u4ee5\u5185\uff1a\u53ef\u4ee5\u6df7\u7528<code>cin/scanf</code>\u3001<code>cout/printf</code>\uff0c\u7528\u54ea\u4e2a\u65b9\u4fbf\u5c31\u7528\u54ea\u4e2a\u3002</p> <p>\u8f93\u5165\u8f93\u51fa\u6570\u636e\u91cf\u5927\uff1a\u4e3a\u907f\u514d\u8d85\u65f6\uff0c\u4f7f\u7528<code>scanf/printf</code>\uff0c\u6216\u8005\u4f7f\u7528\u52a0\u4e86<code>ios::sync_with_stdio(false); cin.tie(0)</code>\u7684<code>cin/cout</code>\u3002 </p>"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/","title":"3 \u3001\u94fe\u8868","text":"Linked List\ud83d\udcc3   <ul> <li>List</li> <li>Linked List</li> <li>Array vs Linked List</li> <li>Implementation in C/C++(singly-linked list)<ul> <li>\u203c\ufe0fBasics\uff1aTraversal of the list</li> <li>1\uff09Insert in the beginning</li> <li>2\uff09Insert in the middle</li> <li>3\uff09Delete in a list</li> <li>4\uff09Reverse a linked list<ul> <li>\u2460Iteration way</li> <li>\u2461Recursion way to print</li> <li>\u2462Recursion  way</li> </ul> </li> </ul> </li> <li>Doubly Linked List</li> <li>Implementation in C/C++(doubly-linked list)</li> </ul>"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#list","title":"List","text":"<p>question: can\u2019t I do it with arrays?</p> <ul> <li>empty list has size 0</li> <li>insert/remove/count</li> <li>read/modify</li> <li>specify data-type</li> </ul> <p>When array is full, create a new larger array ,copy previous array into the new array.</p> <p>free the memory of the previous array</p> <ol> <li>Access-read/write \u2013O(1)</li> <li>Insert/remove/add \u2013 O(n)</li> </ol>"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#linked-list","title":"Linked List","text":"<pre><code>struct Node{\n    int data;   //4 bytes\n    Node *next; //4 bytes\n}\n</code></pre> <p>address of the head node gives us the access to the complete list</p> <ol> <li>Access to element \u2013O(n)</li> <li>Insert/remove/add \u2013 O(n)</li> </ol>"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#array-vs-linked-list","title":"Array vs Linked List","text":"<ul> <li> Array Linked List 1)Cost of accessing an element constant time\u2013O(1) Average case\u2013O(n) 2)Memory usage fixed size no unused memory memory may not be available as a large block extra memory for pointer variables memory may be available as multiple small blocks 3)Cost of inserting/deleting an element a) at beginning -O(n) a)-O(1) b)at end -O(1) b)-O(n) 4)Easy to use \u2714\ufe0f \u274c </li> </ul>"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#implementation-in-ccsingly-linked-list","title":"Implementation in C/C++(singly-linked list)","text":"<pre><code>Node *A;\nA=NULL;//empty list\nNode *temp=(*Node)malloc(sizeof(Node));//C\nNode *temp=new Node();//C++\n(*temp).data=2;\n//OR\ntemp-&gt;data=2;\n\n(*temp).link=NULL;\n//OR\ntemp-&gt;link=NULL;\nA=temp;\n</code></pre>"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#basicstraversal-of-the-list","title":"\u203c\ufe0fBasics\uff1aTraversal of the list","text":"<pre><code>while(temp1-&gt;link!=NULL){\n    temp1=temp1-&gt;link;\n}\n</code></pre>"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#1insert-in-the-beginning","title":"1\uff09Insert in the beginning","text":"<pre><code>//Insert in the beginning\nstruct Node {\n    int data;\n    Node* next;\n};\n\n\nstruct Node*head;//global variable\n\n\nvoid Insert(int x) {\n    struct Node *temp=(Node*)malloc(sizeof(struct Node));\n    //or---------\n    Node *temp=new Node();//C++\n    //-------------\n    temp-&gt;data=x;\n    temp-&gt;next=head;\n    head=temp;\n}\nvoid Print() {\n    struct Node* temp=head;\n    printf(\"List is:\");\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;next;\n    }\n    printf(\"\\n\");\n}\n\nint main(){\n    head=NULL;//empty list\n    printf(\"How many numbers?\");\n    int n,i,x;\n    scanf(\"%d\",&amp;n);\n    for(i=0;i&lt;n;i++) {\n        printf(\"Enter number:\");\n        scanf(\"%d\",&amp;x);\n        Insert(x);\n        Print();\n    }\n}\n</code></pre>"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#2insert-in-the-middle","title":"2\uff09Insert in the middle","text":"<pre><code>struct Node {\n    int data;\n    Node*next;\n};\n\nstruct Node*head;//pointer to the head\n\nvoid Insert(int data,int n);\nvoid Print();\n\nint main() {\n    head=NULL;      //empty list\n    Insert(2,1);    //List:2\n    Insert(3,2);    //List:2,3\n    Insert(4,1);    //list:4,2,3\n    Insert(5,2);    //List:4,5,2,3\n    Print();\n}\n//-------------------------------------------------------------------------------------------\nvoid Insert(int data,int n) {\n    Node *temp1=new Node();\n    temp1-&gt;data=data;\n    temp1-&gt;next=NULL;\n    if(n==1) {//in case to insert in the beginning\n        temp1-&gt;next=head;\n        head=temp1;\n        return;\n    }\n    Node *temp2=head;//temp2 is an aid for finding the position\n    for(int i=0;i&lt;n-2;i++) {\n        temp2=temp2-&gt;next;\n    }//go to the n-1 node\n    temp1-&gt;next=temp2-&gt;next;\n    temp2-&gt;next=temp1;\n}\n//-------------------------------------------------------------------------------------------\nvoid Print() {\n    Node *temp=head;\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;next;\n    }\n    printf(\"\\n\");\n}\n</code></pre>"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#3delete-in-a-list","title":"3\uff09Delete in a list","text":"<ul> <li>fix the links</li> <li>free the space from memory</li> </ul> <pre><code>struct Node {\n    int data;\n    Node*next;\n};\nstruct Node*head;                  //global\n\nvoid Insert(int data);              //insert at the end of the list\nvoid Print();                       //print all the elements in the list\nvoid Delete(int n);                 //delete node at position n\n\nint main() {\n    head = NULL;\n    Insert(2);\n    Insert(4);\n    Insert(6);\n    Insert(5);          //List:5,6,4,2\n    int n;\n    printf(\"Enter a position:\\n\");\n    scanf(\"%d\", &amp;n);\n    Delete(n);\n    Print();\n}\n\n//-------------------------------------------------------------------------------------------\n\nvoid Delete(int n) {\n    Node*temp1=head;\n    int i;\n    if(n==1) {\n        head=temp1-&gt;next;\n        free(temp1);\n        return;\n    }\n\n    for(i=0;i&lt;n-2;i++) {\n        temp1=temp1-&gt;next;\n    }                               //temp1 points to the (n-1)th node\n    struct Node*temp2=temp1-&gt;next;\n    temp1-&gt;next=temp2-&gt;next;\n    free(temp2);                    //delete temp2\n}\n//-------------------------------------------------------------------------------------------\n\nvoid Insert(int x) {\n    struct Node *temp=new Node();\n    temp-&gt;data=x;\n    temp-&gt;next=head;\n    head=temp;\n}\nvoid Print() {\n    Node*temp=head;\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;next;\n    }\n    printf(\"\\n\");\n}\n</code></pre>"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#4reverse-a-linked-list","title":"4\uff09Reverse a linked list","text":""},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#1iteration-way","title":"\u2460Iteration way","text":"<pre><code>void Reverse() {\n    Node *next,*prev,*current;\n    current=head;\n    prev=NULL;\n    while(current!=NULL) {\n        next=current-&gt;next;\n        current-&gt;next=prev;\n        prev=current;\n        current=next;\n    }\n    head=prev;\n}\n</code></pre> <p>e.g.</p> <pre><code>struct Node {\n    int data;\n    Node* next;\n};\n\nstruct Node* head;\n\nstruct Node* Insert(Node* head, int data);\nvoid Print(Node* head);\nstruct Node* Reverse(Node* head);\n\nint main() {\n    head = NULL;\n    head = Insert(head, 2);\n    head = Insert(head, 4);\n    head = Insert(head, 6);\n    head = Insert(head, 8);\n    head = Reverse(head);\n    Print(head);\n}\n\nstruct Node* Insert(Node* head, int data) {\n    Node* temp = new Node();\n    temp-&gt;data = data;\n    temp-&gt;next = NULL;\n\n    if (head == NULL) {\n        head = temp;\n    } else {\n        Node* current = head;\n        while (current-&gt;next != NULL) {\n            current = current-&gt;next;\n        }\n        current-&gt;next = temp;\n    }\n    return head;\n}\n\nvoid Print(Node* head) {\n    while (head != NULL) {\n        std::cout &lt;&lt; head-&gt;data &lt;&lt; \" \";\n        head = head-&gt;next;\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\nstruct Node* Reverse(Node* head) {\n    Node* next = NULL;\n    Node* prev = NULL;\n    Node* current = head;\n\n    while (current != NULL) {\n        next = current-&gt;next;\n        current-&gt;next = prev;\n        prev = current;\n        current = next;\n    }\n    head = prev;\n    return head;\n}\n</code></pre>"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#2recursion-way-to-print","title":"\u2461Recursion way to print","text":"<p>Tip</p> <p>Recursion is like calling or using itself in the function</p>      Normal print  <pre><code>void Print(struct Node* p) {\n    //recursion\n    //2 6 5 4\n    if(p==NULL) return;           //Exit Recursion, prevent dead loop\n    printf(\"%d \",p-&gt;data);  //First print the value int the node\n    Print(p-&gt;next);               //Recursive call\n}\n</code></pre> Reverse print <pre><code>void ReversePrint(struct Node* q) {\n    //recursion\n    //4 5 6 2\n    if(q==NULL) return;           //Exit Recursion\n    ReversePrint(q-&gt;next);               //First do a Recursive call\n    printf(\"%d \",q-&gt;data);  //print the value int the node\n}\n</code></pre> <p>e.g.</p> <pre><code>struct Node {\n    int data;\n    Node*next;\n};\n\nstruct Node* Insert(Node* head, int data) {\n    Node *temp=new Node;\n    temp-&gt;data = data;\n    temp-&gt;next = NULL;\n    if (head == NULL) {\n        head = temp;\n    } else {\n        Node *current = head;\n        while (current-&gt;next != NULL) {\n            current = current-&gt;next;\n        }\n        current-&gt;next = temp;\n    }\n    return head;\n}\n\n\nvoid Print(struct Node* p) {\n    //recursion\n    //2 6 5 4\n    if(p==NULL) return;           //Exit Recursion\n    printf(\"%d \",p-&gt;data);  //First print the value int the node\n    Print(p-&gt;next);               //Recursive call\n}\n\nvoid ReversePrint(struct Node* q) {\n    //recursion\n    //4 5 6 2\n    if(q==NULL) return;           //Exit Recursion\n    ReversePrint(q-&gt;next);               //First do a Recursive call\n    printf(\"%d \",q-&gt;data);  //print the value int the node\n}\n\nint main() {\n    struct Node* head = NULL;//local variable,empty list \n    head = Insert(head,2);\n    head = Insert(head,4);\n    head = Insert(head,6);\n    head = Insert(head,5);\n    Print(head);\n    printf(\"\\n\");\n    ReversePrint(head);\n}\n</code></pre> <p></p> Recursion tree"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#3recursion-way","title":"\u2462Recursion  way","text":"<pre><code>struct Node*head;//global\nvoid Reverse(struct Node*p) {\n    if(p-&gt;next==NULL) {             //exit condition\n        head=p;\n        return;\n    }\n    Reverse(p-&gt;next);\n    //make reverse link\n    Node *q=p-&gt;next;\n    q-&gt;next=p;\n    p-&gt;next=NULL;\n}\n</code></pre> <p>Tip</p> C++ <pre><code>Node *q=p-&gt;next;\nq-&gt;next=p;\n//can also be written as \np-&gt;next-&gt;next=p\n</code></pre>"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#doubly-linked-list","title":"Doubly Linked List","text":"singly linked list  <p>Doubly linked list</p> <ul> <li>one link to the previous and one link to the next</li> </ul> <p><pre><code>struct Node {\n    int data;\n    struct Node* next;\n    struct Node* prev;\n};\n</code></pre> </p>      doubly linked list  <p>Important</p> pros cons Reverse look-up Extra memory for pointer to the previous node"},{"location":"DataStruct/3%20%E3%80%81%E9%93%BE%E8%A1%A8/#implementation-in-ccdoubly-linked-list","title":"Implementation in C/C++(doubly-linked list)","text":"wrong way <ul> <li> <p>The problem with using the  \u201c&amp;\u201d operator: The stack frame of GNN will be reclaimed and even if you have the address of e.g. 50, you won't be able to get it.-&gt;It doesn't create anything in the heap.</p> </li> <li> <p>The only way to access something in heap is through a pointer.</p> </li> </ul> <p></p> right way <p>Create new Node</p> <pre><code>struct Node *GetNewNode(int x) {\n    Node *newNode=new Node;\n    newNode-&gt;data=x;\n    newNode-&gt;prev=NULL;\n    newNode-&gt;next=head;\n    return newNode;\n}\n</code></pre> <p>Insert Ahead</p> <pre><code>void InsertAhead(int x) {\n    struct Node *newNode = GetNewNode(x);   //the newNode here is a local variable different from the one in the function GetNewNode,just share the same name\n    if(head==NULL) {//when list is empty\n        head=newNode;\n        return;\n    }\n    head-&gt;prev=newNode;\n    newNode-&gt;next=head;\n    head=newNode;\n}\n</code></pre> <p>Normal print/Reverse print</p> <pre><code>void Print() {\n    Node* temp=head;\n    printf(\"Forward:\");\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;next;\n    }\n    printf(\"\\n\");\n}\n\nvoid ReversePrint() {\n    Node *temp=head;\n    if(temp==NULL) return;//empty list,exit\n    //Going to last node\n    while(temp-&gt;next!=NULL) {\n        temp=temp-&gt;next;\n    }\n    //traversing backward using prev pointer\n    printf(\"Reverse :\");\n    while(temp!=NULL) {\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;prev;\n    }\n    printf(\"\\n\");\n}\n</code></pre> <p>e.g.</p> <pre><code>//using the functions upon\u2026\u2026 \nint main() {\n    head=NULL;\n    InsertAhead(2);Print();ReversePrint();\n    InsertAhead(3);Print();ReversePrint();\n    InsertAhead(4);Print();ReversePrint();\n    InsertAhead(5);Print();ReversePrint();\n}\n</code></pre>"},{"location":"DataStruct/4%20%E3%80%81%E9%98%9F%E5%88%97/","title":"4 \u3001\u961f\u5217","text":"Queues  <ul> <li>Queue ADT</li> <li>Implementation of Queues<ul> <li>1 \uff09Array Implementation</li> </ul> </li> </ul>"},{"location":"DataStruct/4%20%E3%80%81%E9%98%9F%E5%88%97/#queue-adt","title":"Queue ADT","text":"<p>A list or collection that its insertion can be performed from at one end(rear) and deletion can be performed at other end(front)</p> <p>Note</p> <p>Operations</p> <ul> <li><code>EnQueue(x)</code> or<code>Push(x)</code></li> <li><code>Dequeue()</code>or<code>Pop()</code></li> <li><code>front()</code>or<code>Peek()</code></li> <li><code>IsEmpty()</code></li> </ul> <pre><code>void EnQueue(int x);\nint Dequeue;\n</code></pre> <p></p>"},{"location":"DataStruct/4%20%E3%80%81%E9%98%9F%E5%88%97/#implementation-of-queues","title":"Implementation of Queues","text":""},{"location":"DataStruct/4%20%E3%80%81%E9%98%9F%E5%88%97/#1-array-implementation","title":"1 \uff09Array Implementation","text":""},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/","title":"5 \u3001\u6808","text":"Stacks\ud83d\udd73\ufe0f   <ul> <li>Stack ADT</li> <li>Implementation in C/C++<ul> <li>1)  Array implementation</li> <li>2)  Linked List Implementation</li> </ul> </li> <li>Using stack to reverse<ul> <li>1)  Reverse a string</li> <li>2)  Reverse a linked list<ul> <li>explicit way</li> </ul> </li> </ul> </li> <li>Check for balanced parentheses</li> <li>Infix,Postfix,Prefix<ul> <li>1\uff09Intro<ul> <li>\u2460Infix</li> <li>\u2461Prefix</li> <li>\u2462Postfix</li> </ul> </li> <li>2\uff09Evaluation of  Prefix and Postfix expressions</li> <li>3\uff09Infix to Postfix</li> </ul> </li> </ul>"},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#stack-adt","title":"Stack ADT","text":"<p>ADT:</p> <ul> <li>only talk about features/operations\u2714\ufe0f</li> <li>no implementation\u274c</li> </ul> <p></p> <p>Tip</p> <p>You can only get access to the one on top\u2192     Last In First Out (LIFO)</p> <ul> <li>Definition: A list with the restriction that insertion and deletion can be performed only from one end, called the top.</li> </ul> operations O(1) (1)<code>Push</code> push x into the stack (2)<code>Pop</code> Remove the latest element from stack (3)<code>Top</code> return element at the top (4)<code>IsEmpty</code> return T/F Info <p>Application</p> <ul> <li>Function calls/Recursion</li> <li>undo in an editor</li> <li>balanced parentheses<code>(){}[]</code></li> </ul>"},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#implementation-in-cc","title":"Implementation in C/C++","text":"<p>We can implement stacks in :</p> <p>\u200b   a) arrays</p> <p>\u200b   b) linked list</p>"},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#1-array-implementation","title":"1)  Array implementation","text":"logical diagram <p>Warning</p> <ul> <li> <p>Only be done when an overflow doesn\u2019t happen</p> </li> <li> <p>Solution: create a larger array.(twice the size of the smaller array) Copy all element in the new array </p> </li> <li> Push O(1)\u2013Best O(n)\u2013Worst O(1)\u2013Average O(n) for n pushes </li> </ul> <pre><code>#define MAX_SIZE 101\nint A[MAX_SIZE];\nint top=-1;\nvoid Push(int x) {\n    if(top==MAX_SIZE-1) {\n        printf(\"Stack Overflow\\n\");\n    }\n    A[++top]=x;\n}\nvoid Pop() {\n    if(top==-1) {\n        printf(\"Stack Underflow\\n\");\n    }\n    top--;\n}\nint Top() {\n    return A[top];\n}\n\nvoid Print() {\n    int i;\n    printf(\"Stack:\\n\");\n    for(i=top;i&gt;=0;i--) {\n        printf(\"%d\\n\",A[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    Push(2);Print();\n    Push(5);Print();\n    Push(10);Print();\n    Pop();Print();\n    Push(12);Print();\n\n}\n</code></pre>"},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#2-linked-list-implementation","title":"2)  Linked List Implementation","text":"<p>insert a new in the linked list </p> <ul> <li>create a new node</li> <li>insert /delete</li> <li>at the end(tail)\u2013<code>O(n)</code></li> <li>at beginning\u2013<code>O(1)</code></li> </ul> <p> <pre><code>struct Node {\n    int data;\n    Node *link;\n};\n\nstruct Node *top=NULL;//it means the same as Node *head=NULL;\n\nvoid Push(int x) {\n    Node *temp=new Node;\n    temp-&gt;data=x;\n    temp-&gt;link=top;\n    top=temp;\n}\n\nvoid Pop() {\n    Node *temp;\n    if (top==NULL) {\n        printf(\"Stack is empty\\n\");\n        return;\n    }\n    temp=top;\n    top=top-&gt;link;                  //making top point to the second node\n    delete temp;                    //in C++ use new/delete instead of malloc/free in C\n}\n\nvoid Top() {\n    if (top==NULL) {\n        printf(\"Stack is empty\\n\");\n        return;\n    }\n    printf(\"%d\\n\",top-&gt;data);\n}\n\nvoid IsEmpty() {\n    if (top==NULL) {\n        printf(\"Stack is empty\\n\");\n        return;\n    }else {\n        printf(\"Stack is not empty\\n\");\n    }\n}\n\nvoid Print() {\n    Node *temp=top;\n    printf(\"Stack is : \");\n    while(temp!=NULL) {                     //traversal of the linked list\n        printf(\"%d \",temp-&gt;data);\n        temp=temp-&gt;link;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    Push(5);Print();IsEmpty();\n    Pop();Print();IsEmpty();\n    Push(6);Print();IsEmpty();\n    Push(7);Print();IsEmpty();\n    Push(8);Print();IsEmpty();\n    return 0;\n}\n</code></pre></p> <p>Note</p> <ul> <li>Don't need to worry about overflow</li> <li>use memory only when needed -&gt;more graceful</li> </ul>"},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#using-stack-to-reverse","title":"Using stack to reverse","text":"<ul> <li>1) Reverse a string   2) Reverse a linked list</li> </ul>"},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#1-reverse-a-string","title":"1)  Reverse a string","text":"<p>use the characteristics of Stack \u2013(LIFO)</p> <p> <pre><code>#include &lt;stack&gt;                        //stack from standard template library\n#include &lt;iostream&gt;\nusing namespace std;\n\nvoid Reverse(char C[],int n) {\n    stack&lt;char&gt; S;                      //create a stack\n    //loop for push\n    for(int i=0;i&lt;n;i++) {\n        S.push(C[i]);\n    }\n    //loop for pop\n    for(int i=0;i&lt;n;i++) {\n        C[i]=S.top();                   //overwrite the character at index i\n        S.pop();                        //perform pop\n    }\n\n}\n\nint main(){\n    char C[51];\n    printf(\"Eneter a string: \");\n    gets(C);\n    Reverse(C,strlen(C));\n    printf(\"Output is %s\",C);\n}\n</code></pre></p> <p>Note</p> <ul> <li>Time-Complexity=<code>O(n)</code></li> <li>Space-Complexity=<code>O(n)</code></li> </ul> <p></p> <ul> <li>easier way</li> </ul> <ul> <li>swap char[i] and char[j] while i&lt;j;</li> </ul>"},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#2-reverse-a-linked-list","title":"2)  Reverse a linked list","text":"Iterative solution(Explicit Stack) Recursive solution(Implicit Stack) time\u2013O(n) time\u2013O(n) Space\u2013O(1) Space\u2013O(n)"},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#explicit-way","title":"explicit way","text":"<pre><code>void Reverse() {\n    if(head==NULL) return;\n    stack&lt;Node*&gt;S;\n    while (temp!=NULL) {\n        //To push all references (traversal)\n        S.push(temp);\n        temp=temp-&gt;next;\n    }\n    Node *temp=S.top();\n    head=temp;\n    S.pop;\n    while(!S.empty()) {\n        temp-&gt;next=S.top();\n        S.pop();\n        temp=temp-&gt;next;\n    }\n    temp-&gt;next=NULL;\n}\n</code></pre>"},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#check-for-balanced-parentheses","title":"Check for balanced parentheses","text":"<p>solution:</p> <ul> <li>scan from left to right</li> <li>if opening symbol, add it to a list(Push it in a stack)</li> <li>if closing symbol, remove last opening symbol in list(Pop it from a stack)</li> <li>should end with an empty list</li> </ul> <pre><code>Check for balanced Parentheses(exp){\n    n\u2190length(exp)\n    Create a stack S;\n    for i from 0 to n-1{\n        if (exp[i] is \"(\" or\"[\" or \"{\"){\n            Push(exp[i])\n            }else if(exp[i] is \")\" or\"]\" or \"}\")\n                if(S is empty){\n                    return false;\n                }else{\n                    Pop()\n                }\n            }\n\n    }\n}\nif S is empty true\nelse:  false\n</code></pre> <pre><code>#include &lt;string.h&gt;\n#include &lt;stdbool.h&gt;\n\nbool CheckforParentheses(char* expression) {\n    int n = strlen(expression);\n    char S[100];\n    int top = -1;// Stack to store the parentheses\n\n    for (int i = 0; i &lt; n; i++) {\n        if (expression[i] == '(' ||\n            expression[i] == '[' ||\n            expression[i] == '{'    ) {\n            S[++top] = expression[i];\n            } else if (expression[i] == ')' ||\n                       expression[i] == ']'||\n                       expression[i]=='}') {\n                if (top == -1) {\n                    return false;\n                } if (\n                    (expression[i] == ')' &amp;&amp; S[top] == '(') ||\n                    (expression[i] == ']' &amp;&amp; S[top] == '[') ||\n                    (expression[i] == '}' &amp;&amp; S[top] == '{')) {\n                    top--;\n                    }else {\n                        return false;\n                    }\n                       }\n    }\n    return top==-1;//return true if all parentheses are matched\n}\n\nint main() {\n    char expression[100];\n    printf(\"Enter an expression: \");\n    fgets(expression, sizeof(expression), stdin);\n    expression[strcspn(expression, \"\\n\")] = '\\0'; //Remove \\n from string\n    CheckforParentheses(expression);\n    if (CheckforParentheses(expression)) {\n        printf(\" The expression is valid\\n\");\n    } else {\n        printf(\"The expression is invalid\\n\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#infixpostfixprefix","title":"Infix,Postfix,Prefix","text":""},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#1intro","title":"1\uff09Intro","text":""},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#1infix","title":"\u2460Infix","text":""},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#2prefix","title":"\u2461Prefix","text":""},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#3postfix","title":"\u2462Postfix","text":""},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#2evaluation-of-prefix-and-postfix-expressions","title":"2\uff09Evaluation of  Prefix and Postfix expressions","text":"<p>Success</p> <p>Postfix\uff1a</p> <ul> <li> <p>Look for pattern <code>&lt;num&gt;&lt;num&gt;&lt;operator&gt;</code>(from left to right)</p> </li> <li> <p></p> </li> </ul> <pre><code>//Sudo code\nEvaluatePostfix(exp){\n   create a stack S;\n   for i to lenngth(exp)-1{\n       if(exp[i] is operand){\n           Push(exp[i])\n       }else if(exp[i] is operator){\n           op2 Pop;\n           op1 Pop;\n           res=Preform(exp[i],op1,op2);\n           Push(res)\n       }\n   }\n   return top of stack\n}\n</code></pre> <p>Prefix\uff1a</p> <ul> <li>Look for pattern <code>&lt;num&gt;&lt;num&gt;&lt;operator&gt;</code></li> <li>Difference from Postfix: scan from right to left</li> </ul>"},{"location":"DataStruct/5%20%E3%80%81%E6%A0%88/#3infix-to-postfix","title":"3\uff09Infix to Postfix","text":"<pre><code>//Sudo code\nInfixToPostfix(exp){\n    create a stack s;\n    res-&gt;empty string;\n    for i from 0 to length (exp)-1{\n        if exp[i] is operand {\n            res&lt;-res+exp[i];\n        }\n        else if exp[i] is operator{\n            while(!=s.empty()&amp;&amp;HasHigherPrec(s.top(),exp[i])){\n                res&lt;-res+s.top();\n                s.Pop()\n            }\n            s.Push(exp[i]);\n        }\n        while(!s.empty()){\n            res&lt;-res+s.top();\n            s.pop();\n        }\n    }\n    return res;\n}\n</code></pre>"},{"location":"DataStruct/6%20%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"6 \u3001\u4e8c\u53c9\u6811","text":"<ul> <li>1\u3001\u5206\u7c7b<ul> <li>\uff081\uff09\u6ee1\u4e8c\u53c9\u6811</li> <li>\uff082\uff09\u5b8c\u5168\u4e8c\u53c9\u6811</li> <li>\uff083\uff09\u9000\u5316\u4e8c\u53c9\u6811</li> <li>\uff084\uff09\u5b8c\u7f8e\u4e8c\u53c9\u6811</li> </ul> </li> <li>2\u3001\u9759\u6001\u5199\u6cd5</li> <li>3\u3001\u4e09\u79cd\u904d\u5386\u65b9\u5f0f</li> <li>\u4f8b\u9898<ul> <li>e.g.6\u4e8c\u53c9\u6811\u7684\u904d\u5386</li> <li>e.g.7[NOIP2004 \u666e\u53ca\u7ec4] FBI \u6811</li> </ul> </li> </ul>"},{"location":"DataStruct/6%20%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91/#1","title":"1\u3001\u5206\u7c7b","text":""},{"location":"DataStruct/6%20%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91/#1_1","title":"\uff081\uff09\u6ee1\u4e8c\u53c9\u6811","text":"<p>\u6bcf\u4e00\u5c42\u8282\u70b9\u90fd\u662f\u6ee1\u7684</p>"},{"location":"DataStruct/6%20%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91/#2","title":"\uff082\uff09\u5b8c\u5168\u4e8c\u53c9\u6811","text":"<p>\u6700\u540e\u4e00\u5c42\u6709\u7f3a\u5931</p>"},{"location":"DataStruct/6%20%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91/#3","title":"\uff083\uff09\u9000\u5316\u4e8c\u53c9\u6811","text":"<p>\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b50\u8282\u70b9</p>"},{"location":"DataStruct/6%20%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91/#4","title":"\uff084\uff09\u5b8c\u7f8e\u4e8c\u53c9\u6811","text":"<p>\u6240\u6709\u53f6\u7ed3\u70b9\u7684\u6df1\u5ea6\u5747\u76f8\u540c\uff0c\u4e14\u6240\u6709\u975e\u53f6\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf\u5747\u4e3a 2 \u7684\u4e8c\u53c9\u6811\u79f0\u4e3a\u5b8c\u7f8e\u4e8c\u53c9\u6811\u3002</p> <p></p>"},{"location":"DataStruct/6%20%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91/#2_1","title":"2\u3001\u9759\u6001\u5199\u6cd5","text":"<p>Tip</p> C++ <pre><code>struct tree {\n    int v;\n    int l, r;\n} tree[N];\n</code></pre>"},{"location":"DataStruct/6%20%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91/#3_1","title":"3\u3001\u4e09\u79cd\u904d\u5386\u65b9\u5f0f","text":"<ul> <li>\u5148\uff08\u6839\uff09\u5e8f\u904d\u5386</li> <li>\u5148\u6839\u8282\u70b9\uff0c\u518d\u5de6\u5b50\u6811\uff0c\u518d\u53f3\u5b50\u6811</li> <li></li> <li>\u4e2d\uff08\u6839\uff09\u5e8f\u904d\u5386</li> <li>\u5148\u5de6\u5b50\u6811\uff0c\u518d\u6839\u8282\u70b9\uff0c\u518d\u53f3\u5b50\u6811</li> <li></li> <li>\u540e\uff08\u6839\uff09\u5e8f\u904d\u5386</li> <li>\u5148\u5de6\u5b50\u6811\uff0c\u518d\u53f3\u5b50\u6811\uff0c\u518d\u6839\u8282\u70b9</li> <li></li> </ul>"},{"location":"DataStruct/6%20%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/6%20%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91/#eg6","title":"e.g.6\u4e8c\u53c9\u6811\u7684\u904d\u5386","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6709\u4e00\u4e2a \\(n(n \\le 10^6)\\) \u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u3002\u7ed9\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7f16\u53f7\uff08\u5747\u4e0d\u8d85\u8fc7 \\(n\\)\uff09\uff0c\u5efa\u7acb\u4e00\u68f5\u4e8c\u53c9\u6811\uff08\u6839\u8282\u70b9\u7684\u7f16\u53f7\u4e3a \\(1\\)\uff09\uff0c\u5982\u679c\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5219\u8f93\u5165 <code>0 0</code>\u3002</p> <p>\u5efa\u597d\u6811\u8fd9\u68f5\u4e8c\u53c9\u6811\u4e4b\u540e\uff0c\u4f9d\u6b21\u6c42\u51fa\u5b83\u7684\u524d\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u5217\u904d\u5386\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u7ed3\u70b9\u6570\u3002</p> <p>\u4e4b\u540e \\(n\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u4e24\u4e2a\u6574\u6570 \\(l\\)\u3001\\(r\\)\uff0c\u5206\u522b\u8868\u793a\u7ed3\u70b9 \\(i\\) \u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u7f16\u53f7\u3002\u82e5 \\(l=0\\) \u5219\u8868\u793a\u65e0\u5de6\u5b50\u7ed3\u70b9\uff0c\\(r=0\\) \u540c\u7406\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e09\u884c\uff0c\u6bcf\u884c \\(n\\) \u4e2a\u6570\u5b57\uff0c\u7528\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\u7b2c\u4e00\u884c\u662f\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u3002</p> <p>\u7b2c\u4e8c\u884c\u662f\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u3002</p> <p>\u7b2c\u4e09\u884c\u662f\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>7\n2 7\n4 0\n0 0\n0 3\n0 0\n0 5\n6 0\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>1 2 4 3 7 6 5\n4 3 2 1 6 5 7\n3 4 2 5 6 7 1\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e5 + 10;\n\nstruct tree {\n    int value;//\u8282\u70b9\u503c\n    int left, right;//\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\n} tr[N];\n\nvoid Preorder(int u) {\n    if (u == 0)\n        return;//\u5982\u679c\u8282\u70b9\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\n    cout &lt;&lt; u &lt;&lt; \" \";//\u8f93\u51fa\u8282\u70b9\u503c\n    Preorder(tr[u].left);//\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811\n    Preorder(tr[u].right);//\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811\n}\n\nvoid Inorder(int u) {\n    if (u == 0)\n        return;\n    Inorder(tr[u].left);\n    cout &lt;&lt; u &lt;&lt; \" \";\n    Inorder(tr[u].right);\n}\n\nvoid Postorder(int u) {\n    if (u == 0)\n        return;\n    Postorder(tr[u].left);\n    Postorder(tr[u].right);\n    cout &lt;&lt; u &lt;&lt; \" \";\n}\n\nint main() {\n    int n;\n    cin&gt;&gt;n;\n\n    for (int i = 1; i &lt;= n; i++) {//\u6ce8\u610f\u56e0\u4e3a\u6811\u7684\u6700\u5c0f\u503c\u4ece1\u5f00\u59cb\uff0ci\u4e5f\u9700\u8981\u4ece1-&gt;n\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;//\u8f93\u5165\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\n        tr[i].value = i;//\u8282\u70b9\u503c\n        tr[i].left = a;//\u5de6\u5b50\u6811\n        tr[i].right = b;//\u53f3\u5b50\u6811\n    }\n\n    Preorder(1);//\u5148\u5e8f\u904d\u5386\n    cout&lt;&lt;endl;\n    Inorder(1);//\u4e2d\u5e8f\u904d\u5386\n    cout&lt;&lt;endl;\n    Postorder(1);//\u540e\u5e8f\u904d\u5386\n    cout&lt;&lt;endl;\n}\n</code></pre>"},{"location":"DataStruct/6%20%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91/#eg7noip2004-fbi","title":"e.g.7[NOIP2004 \u666e\u53ca\u7ec4] FBI \u6811","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6211\u4eec\u53ef\u4ee5\u628a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u5206\u4e3a\u4e09\u7c7b\uff1a\u5168 0 \u4e32\u79f0\u4e3a B \u4e32\uff0c\u5168 1 \u4e32\u79f0\u4e3a I \u4e32\uff0c\u65e2\u542b 0 \u53c8\u542b 1 \u7684\u4e32\u5219\u79f0\u4e3a F \u4e32\u3002</p> <p>FBI \u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u7ed3\u70b9\u7c7b\u578b\u4e5f\u5305\u62ec F \u7ed3\u70b9\uff0cB \u7ed3\u70b9\u548c I \u7ed3\u70b9\u4e09\u79cd\u3002\u7531\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2^N\\) \u7684 01 \u4e32 \\(S\\) \u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u68f5 FBI \u6811 \\(T\\)\uff0c\u9012\u5f52\u7684\u6784\u9020\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <ol> <li>\\(T\\) \u7684\u6839\u7ed3\u70b9\u4e3a \\(R\\)\uff0c\u5176\u7c7b\u578b\u4e0e\u4e32 \\(S\\) \u7684\u7c7b\u578b\u76f8\u540c\uff1b</li> <li>\u82e5\u4e32 \\(S\\) \u7684\u957f\u5ea6\u5927\u4e8e \\(1\\)\uff0c\u5c06\u4e32 \\(S\\) \u4ece\u4e2d\u95f4\u5206\u5f00\uff0c\u5206\u4e3a\u7b49\u957f\u7684\u5de6\u53f3\u5b50\u4e32 \\(S_1\\) \u548c \\(S_2\\)\uff1b\u7531\u5de6\u5b50\u4e32 \\(S_1\\) \u6784\u9020 \\(R\\) \u7684\u5de6\u5b50\u6811 \\(T_1\\)\uff0c\u7531\u53f3\u5b50\u4e32 \\(S_2\\) \u6784\u9020 \\(R\\) \u7684\u53f3\u5b50\u6811 \\(T_2\\)\u3002</li> </ol> <p>\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2^N\\) \u7684 01 \u4e32\uff0c\u8bf7\u7528\u4e0a\u8ff0\u6784\u9020\u65b9\u6cd5\u6784\u9020\u51fa\u4e00\u68f5 FBI \u6811\uff0c\u5e76\u8f93\u51fa\u5b83\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 \\(N(0 \\le N \\le 10)\\)\uff0c  </p> <p>\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2^N\\) \u7684 01 \u4e32\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5373 FBI \u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>3\n10001011\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>IBFBBBFIBFIIIFF\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e \\(40\\%\\) \u7684\u6570\u636e\uff0c\\(N \\le 2\\)\uff1b</p> <p>\u5bf9\u4e8e\u5168\u90e8\u7684\u6570\u636e\uff0c\\(N \\le 10\\)\u3002</p> <p>noip2004\u666e\u53ca\u7ec4\u7b2c3\u9898</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e4 + 10;\nint n;\nstring s;\nint Ls(int p) { return 2 * p; }     // \u5de6\u513f\u5b50\nint Rs(int p) { return 2 * p + 1; } // \u53f3\u513f\u5b50\n\nstruct tree {\n    char ch;\n    int l, r;\n} tr[N];\n\nvoid build(int p, int l, int r) {\n    // \u7ec8\u6b62\u6761\u4ef6\n    if (l == r) {\n        if (s[l - 1] == '0') {\n            tr[p].ch = 'B';\n        } else {\n            tr[p].ch = 'I';\n        }\n        return;\n    }\n    int mid = (l + r) / 2; // \u5207\u5272\u5b57\u7b26\u4e32\n    // \u5de6\u53f3\u5b57\u7b26\u4e32\n    tr[p].l = Ls(p);\n    tr[p].r = Rs(p);\n    // \u9012\u5f52\n    build(Ls(p), l, mid);\n    build(Rs(p), mid + 1, r);\n    if (tr[Ls(p)].ch == 'B' &amp;&amp; tr[Rs(p)].ch == 'B') {\n        tr[p].ch = 'B';\n    } else if (tr[Ls(p)].ch == 'I' &amp;&amp; tr[Rs(p)].ch == 'I') {\n        tr[p].ch = 'I';\n    } else {\n        tr[p].ch = 'F';\n    }\n}\n// \u540e\u5e8f\u904d\u5386\nvoid post(int p) {\n    if(p==0) return;\n    if (tr[p].l)\n        post(tr[p].l);\n    if (tr[p].r)\n        post(tr[p].r);\n    cout &lt;&lt; tr[p].ch;\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; s;\n    int len = pow(2, n);\n    build(1, 1, len);\n\n    post(1);\n    cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/7%20%E3%80%81%E5%B9%B6%E6%9F%A5%E9%9B%86/","title":"7 \u3001\u5e76\u67e5\u96c6","text":"<ul> <li>1\u3001\u67e5\u8be2</li> <li>2\u3001\u2192\u65b9\u6cd5\uff1a\u8def\u5f84\u538b\u7f29</li> <li>\u4f8b\u9898<ul> <li>e.g.9\u4eb2\u621a\uff08\u6a21\u677f\uff09</li> <li>e.g.10[\u84dd\u6865\u676f 2017 \u56fd C] \u5408\u6839\u690d\u7269</li> <li>e.g.11\u2b50[USACO16OPEN] Closing the Farm S</li> </ul> </li> </ul> <p>\u987e\u540d\u601d\u4e49\uff0c\u5e76\u67e5\u96c6\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a</p> <ul> <li>\u5408\u5e76\uff08Union\uff09\uff1a\u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u6240\u5c5e\u96c6\u5408\uff08\u5408\u5e76\u5bf9\u5e94\u7684\u6811\uff09</li> <li>\u67e5\u8be2\uff08Find\uff09\uff1a\u67e5\u8be2\u67d0\u4e2a\u5143\u7d20\u6240\u5c5e\u96c6\u5408\uff08\u67e5\u8be2\u5bf9\u5e94\u7684\u6811\u7684\u6839\u8282\u70b9\uff09\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408</li> </ul>"},{"location":"DataStruct/7%20%E3%80%81%E5%B9%B6%E6%9F%A5%E9%9B%86/#1","title":"1\u3001\u67e5\u8be2","text":"<p>\u5b9e\u73b0</p> <pre><code>    return x=s[x]? x:find_set(s[x]);\n</code></pre> <p>\u8be5\u51fd\u6570\u7528\u4e8e\u67e5\u627e\u5143\u7d20 x \u6240\u5728\u7684\u96c6\u5408\u7684\u6839\u8282\u70b9\u3002\u6839\u8282\u70b9\u662f\u8be5\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\uff0c\u901a\u5e38\u662f\u96c6\u5408\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u6216\u88ab\u6307\u5b9a\u4e3a \"\u7236\" \u7684\u5143\u7d20\u3002</p> <p>\u9012\u5f52\u67e5\u627e\uff1a</p> <ul> <li> <p>\u5982\u679c <code>s[x] == x</code>\uff0c\u8bf4\u660e x \u662f\u81ea\u5df1\u7684\u7236\u8282\u70b9\uff0c\u5373 x \u662f\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\u6216\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de x\u3002</p> </li> <li> <p>\u5982\u679c <code>s[x] != x</code>\uff0c\u8bf4\u660e x \u7684\u7236\u8282\u70b9\u4e0d\u662f\u81ea\u5df1\uff08x \u4e0d\u662f\u6839\u8282\u70b9\uff09\uff0c\u90a3\u4e48\u901a\u8fc7\u9012\u5f52\u67e5\u627e s[x] \u7684\u7236\u8282\u70b9\uff0c\u76f4\u5230\u627e\u5230\u6839\u8282\u70b9\u4e3a\u6b62\u3002</p> </li> </ul> <p>Danger</p> <p>\u95ee\u9898\uff1a\u627e\u5230\u7956\u5148\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8</p>"},{"location":"DataStruct/7%20%E3%80%81%E5%B9%B6%E6%9F%A5%E9%9B%86/#2","title":"2\u3001\u2192\u65b9\u6cd5\uff1a\u8def\u5f84\u538b\u7f29","text":"Tip <p>\u5728\u9012\u5f52\u67e5\u627e\u8fc7\u7a0b\u4e2d\uff0c\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u90fd\u76f4\u63a5\u6307\u5411\u6839\u8282\u70b9<code>s[x] = find_set(s[x])</code>\u3002\u8fd9\u6837\u53ef\u4ee5\u52a0\u901f\u540e\u7eed\u7684\u67e5\u627e\u64cd\u4f5c\uff0c\u51cf\u5c11\u6811\u7684\u9ad8\u5ea6\uff0c\u4ece\u800c\u4f18\u5316\u67e5\u8be2\u6548\u7387\u3002</p> <p></p> <p>Success</p> <pre><code>int find_set(int x){\n    if(x!=s[x]) s[x]=find_set(s[x]); //\u8def\u5f84\u538b\u7f29\n    return s[x];\n}\n</code></pre> <pre><code>int find_set(int x) {\n    return s[x] == x ? x : s[x] = find_set(s[x]);\n}\n\nint merge(int x, int y) {\n    s[find_set(x)] = s[find_set(y)];\n}  // (1)\n</code></pre> <ol> <li> <p>\u8be5\u51fd\u6570\u7528\u4e8e\u5c06 x \u548c y \u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408\u3002</p> <ul> <li> <p>\u67e5\u627e\u6839\u8282\u70b9\uff1a\u9996\u5148\u5206\u522b\u67e5\u627e x \u548c y \u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9\uff0c\u4f7f\u7528 <code>find_set(x)</code> \u548c <code>find_set(y)</code>\u3002</p> </li> <li> <p>\u5408\u5e76\u64cd\u4f5c\uff1a\u5c06 y \u96c6\u5408\u7684\u6839\u8282\u70b9\u6307\u5411 x \u96c6\u5408\u7684\u6839\u8282\u70b9\uff0c\u5373 <code>s[find_set(x)] = s[find_set(y)]</code>\u3002\u8fd9\u6837\uff0cx \u548c y \u6240\u5728\u7684\u4e24\u4e2a\u96c6\u5408\u5c31\u88ab\u5408\u5e76\u6210\u4e86\u4e00\u4e2a\u96c6\u5408\u3002</p> </li> </ul> </li> </ol>"},{"location":"DataStruct/7%20%E3%80%81%E5%B9%B6%E6%9F%A5%E9%9B%86/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/7%20%E3%80%81%E5%B9%B6%E6%9F%A5%E9%9B%86/#eg9","title":"e.g.9\u4eb2\u621a\uff08\u6a21\u677f\uff09","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>\u82e5\u67d0\u4e2a\u5bb6\u65cf\u4eba\u5458\u8fc7\u4e8e\u5e9e\u5927\uff0c\u8981\u5224\u65ad\u4e24\u4e2a\u662f\u5426\u662f\u4eb2\u621a\uff0c\u786e\u5b9e\u8fd8\u5f88\u4e0d\u5bb9\u6613\uff0c\u73b0\u5728\u7ed9\u51fa\u67d0\u4e2a\u4eb2\u621a\u5173\u7cfb\u56fe\uff0c\u6c42\u4efb\u610f\u7ed9\u51fa\u7684\u4e24\u4e2a\u4eba\u662f\u5426\u5177\u6709\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u89c4\u5b9a\uff1a\\(x\\) \u548c \\(y\\) \u662f\u4eb2\u621a\uff0c\\(y\\) \u548c \\(z\\) \u662f\u4eb2\u621a\uff0c\u90a3\u4e48 \\(x\\) \u548c \\(z\\) \u4e5f\u662f\u4eb2\u621a\u3002\u5982\u679c \\(x\\)\uff0c\\(y\\) \u662f\u4eb2\u621a\uff0c\u90a3\u4e48 \\(x\\) \u7684\u4eb2\u621a\u90fd\u662f \\(y\\) \u7684\u4eb2\u621a\uff0c\\(y\\) \u7684\u4eb2\u621a\u4e5f\u90fd\u662f \\(x\\) \u7684\u4eb2\u621a\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\uff1a\u4e09\u4e2a\u6574\u6570 \\(n,m,p\\)\uff0c\uff08\\(n,m,p \\le 5000\\)\uff09\uff0c\u5206\u522b\u8868\u793a\u6709 \\(n\\) \u4e2a\u4eba\uff0c\\(m\\) \u4e2a\u4eb2\u621a\u5173\u7cfb\uff0c\u8be2\u95ee \\(p\\) \u5bf9\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u4ee5\u4e0b \\(m\\) \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570 \\(M_i\\)\uff0c\\(M_j\\)\uff0c\\(1 \\le M_i,~M_j\\le n\\)\uff0c\u8868\u793a \\(M_i\\) \u548c \\(M_j\\) \u5177\u6709\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u63a5\u4e0b\u6765 \\(p\\) \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570 \\(P_i,P_j\\)\uff0c\u8be2\u95ee \\(P_i\\) \u548c \\(P_j\\) \u662f\u5426\u5177\u6709\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\\(p\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a <code>Yes</code> \u6216 <code>No</code>\u3002\u8868\u793a\u7b2c \\(i\\) \u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u4e3a\u201c\u5177\u6709\u201d\u6216\u201c\u4e0d\u5177\u6709\u201d\u4eb2\u621a\u5173\u7cfb\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>6 5 3\n1 2\n1 5\n3 4\n5 2\n1 3\n1 4\n2 3\n5 6\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>Yes\nYes\nNo\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 5e3 + 10; // \u5b9a\u4e49\u6700\u5927\u8282\u70b9\u6570\uff0c\u8fd9\u91cc\u5047\u8bbe\u4e3a5001\nint n, m, p, s[N];      // n\u4e3a\u8282\u70b9\u6570\uff0cm\u4e3a\u8fb9\u6570\uff0cp\u4e3a\u67e5\u8be2\u6b21\u6570\uff0cs\u6570\u7ec4\u7528\u4e8e\u5b58\u50a8\u5e76\u67e5\u96c6\u4fe1\u606f\n\n// \u5e76\u67e5\u96c6\u7684\u67e5\u627e\u51fd\u6570\uff0c\u7528\u4e8e\u627e\u5230\u5143\u7d20k\u6240\u5728\u7684\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\uff08\u6839\u8282\u70b9\uff09\nint find_set(int k) {\n    if (k != s[k]) {           // \u5982\u679ck\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u5219\u9012\u5f52\u67e5\u627e\u5176\u6839\u8282\u70b9\n        s[k] = find_set(s[k]); // \u8def\u5f84\u538b\u7f29\uff0c\u51cf\u5c11\u67e5\u627e\u65f6\u95f4\n    }\n    return s[k]; // \u8fd4\u56de\u6839\u8282\u70b9\n}\n\n// \u5e76\u67e5\u96c6\u7684\u5408\u5e76\u51fd\u6570\uff0c\u7528\u4e8e\u5408\u5e76\u4e24\u4e2a\u5143\u7d20x\u548cy\u6240\u5728\u7684\u96c6\u5408\nvoid merge(int x, int y) {\n    s[find_set(x)] = s[find_set(y)]; // \u5c06x\u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9\u6307\u5411y\u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p; // \u8f93\u5165\u8282\u70b9\u6570n\uff0c\u8fb9\u6570m\uff0c\u67e5\u8be2\u6b21\u6570p\n    for (int i = 1; i &lt;= n; i++)\n        s[i] = i; // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u90fd\u662f\u81ea\u5df1\n\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y; // \u8f93\u5165\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\n        merge(x, y);   // \u5408\u5e76\u8fd9\u4e24\u4e2a\u8282\u70b9\u6240\u5728\u7684\u96c6\u5408\n    }\n\n    while (p--) { // \u8fdb\u884cp\u6b21\u67e5\u8be2\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;                  // \u8f93\u5165\u8981\u67e5\u8be2\u7684\u4e24\u4e2a\u8282\u70b9\n        if (find_set(x) == find_set(y)) // \u5982\u679c\u4e24\u4e2a\u8282\u70b9\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\n            cout &lt;&lt; \"Yes\\n\";            // \u8f93\u51fa\"Yes\"\n        else\n            cout &lt;&lt; \"No\\n\"; // \u5426\u5219\u8f93\u51fa\"No\"\n    }\n}\n</code></pre>"},{"location":"DataStruct/7%20%E3%80%81%E5%B9%B6%E6%9F%A5%E9%9B%86/#eg10-2017-c","title":"e.g.10[\u84dd\u6865\u676f 2017 \u56fd C] \u5408\u6839\u690d\u7269","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>w \u661f\u7403\u7684\u4e00\u4e2a\u79cd\u690d\u56ed\uff0c\u88ab\u5206\u6210 \\(m \\times n\\) \u4e2a\u5c0f\u683c\u5b50\uff08\u4e1c\u897f\u65b9\u5411 \\(m\\) \u884c\uff0c\u5357\u5317\u65b9\u5411 \\(n\\) \u5217\uff09\u3002\u6bcf\u4e2a\u683c\u5b50\u91cc\u79cd\u4e86\u4e00\u682a\u5408\u6839\u690d\u7269\u3002</p> <p>\u8fd9\u79cd\u690d\u7269\u6709\u4e2a\u7279\u70b9\uff0c\u5b83\u7684\u6839\u53ef\u80fd\u4f1a\u6cbf\u7740\u5357\u5317\u6216\u4e1c\u897f\u65b9\u5411\u4f38\u5c55\uff0c\u4ece\u800c\u4e0e\u53e6\u4e00\u4e2a\u683c\u5b50\u7684\u690d\u7269\u5408\u6210\u4e3a\u4e00\u4f53\u3002</p> <p>\u5982\u679c\u6211\u4eec\u544a\u8bc9\u4f60\u54ea\u4e9b\u5c0f\u683c\u5b50\u95f4\u51fa\u73b0\u4e86\u8fde\u6839\u73b0\u8c61\uff0c\u4f60\u80fd\u8bf4\u51fa\u8fd9\u4e2a\u56ed\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u682a\u5408\u6839\u690d\u7269\u5417\uff1f</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570 \\(m\\)\uff0c\\(n\\)\uff0c\u7528\u7a7a\u683c\u5206\u5f00\uff0c\u8868\u793a\u683c\u5b50\u7684\u884c\u6570\u3001\u5217\u6570\uff08\\(1&lt;m,n&lt;1000\\)\uff09\u3002</p> <p>\u63a5\u4e0b\u6765\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570 \\(k\\)\uff0c\u8868\u793a\u4e0b\u9762\u8fd8\u6709 \\(k\\) \u884c\u6570\u636e \\((0&lt;k&lt;10^5)\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(k\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(a\\)\uff0c\\(b\\)\uff0c\u8868\u793a\u7f16\u53f7\u4e3a \\(a\\) \u7684\u5c0f\u683c\u5b50\u548c\u7f16\u53f7\u4e3a \\(b\\) \u7684\u5c0f\u683c\u5b50\u5408\u6839\u4e86\u3002</p> <p>\u683c\u5b50\u7684\u7f16\u53f7\u4e00\u884c\u4e00\u884c\uff0c\u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\u7f16\u53f7\u3002</p> <p>\u6bd4\u5982\uff1a\\(5 \\times 4\\) \u7684\u5c0f\u683c\u5b50\uff0c\u7f16\u53f7\uff1a</p> <pre><code>1  2  3  4\n5  6  7  8\n9  10 11 12\n13 14 15 16\n17 18 19 20\n</code></pre> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b54\u6848</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>5 4\n16\n2 3\n1 5\n5 9\n4 8\n7 8\n9 10\n10 11\n11 12\n10 14\n12 16\n14 18\n17 18\n15 19\n19 20\n9 13\n13 17\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>5\n</code></pre> <p>\u63d0\u793a</p> <p>\u6837\u4f8b\u89e3\u91ca</p> <p></p> <p>\u65f6\u9650 1 \u79d2, 256M\u3002\u84dd\u6865\u676f 2017 \u5e74\u7b2c\u516b\u5c4a\u56fd\u8d5b</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e5 + 10;\nint n, m, p, s[N];\n// \u5e76\u67e5\u96c6\nint find_set(int k) {\n    if (k != s[k]) {\n        s[k] = find_set(s[k]);\n    }\n    return s[k];\n}\nvoid merge(int x, int y) {\n    s[find_set(x)] = s[find_set(y)];\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;\n    for (int i = 1; i &lt;= n * m; i++)\n        s[i] = i;\n\n    for (int i = 1; i &lt;= p; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        merge(x, y);\n    }\n    int ans = 0;\n    for (int i = 1; i &lt;= n * m; i++) {\n        if (s[i] == i) {\n            ans++;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n}\n</code></pre>"},{"location":"DataStruct/7%20%E3%80%81%E5%B9%B6%E6%9F%A5%E9%9B%86/#eg11usaco16open-closing-the-farm-s","title":"e.g.11\u2b50[USACO16OPEN] Closing the Farm S","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>FJ \u548c\u4ed6\u7684\u5976\u725b\u4eec\u6b63\u5728\u8ba1\u5212\u79bb\u5f00\u5c0f\u9547\u505a\u4e00\u6b21\u957f\u7684\u65c5\u884c\uff0c\u540c\u65f6 FJ \u60f3\u4e34\u65f6\u5730\u5173\u6389\u4ed6\u7684\u519c\u573a\u4ee5\u8282\u7701\u4e00\u4e9b\u91d1\u94b1\u3002</p> <p>\u8fd9\u4e2a\u519c\u573a\u4e00\u5171\u6709\u88ab\u7528 \\(M\\) \u6761\u53cc\u5411\u9053\u8def\u8fde\u63a5\u7684 \\(N\\) \u4e2a\u8c37\u4ed3\uff08\\(1 \\leq N,M \\leq 3000\\)\uff09\u3002\u4e3a\u4e86\u5173\u95ed\u6574\u4e2a\u519c\u573a\uff0cFJ \u8ba1\u5212\u6bcf\u4e00\u6b21\u5173\u95ed\u6389\u4e00\u4e2a\u8c37\u4ed3\u3002\u5f53\u4e00\u4e2a\u8c37\u4ed3\u88ab\u5173\u95ed\u4e86\uff0c\u6240\u6709\u7684\u8fde\u63a5\u5230\u8fd9\u4e2a\u8c37\u4ed3\u7684\u9053\u8def\u90fd\u4f1a\u88ab\u5173\u95ed\uff0c\u800c\u4e14\u518d\u4e5f\u4e0d\u80fd\u591f\u88ab\u4f7f\u7528\u3002</p> <p>FJ \u73b0\u5728\u6b63\u611f\u5174\u8da3\u4e8e\u77e5\u9053\u5728\u6bcf\u4e00\u4e2a\u65f6\u95f4\uff08\u8fd9\u91cc\u7684\u201c\u65f6\u95f4\u201d\u6307\u5728\u6bcf\u4e00\u6b21\u5173\u95ed\u8c37\u4ed3\u4e4b\u524d\u7684\u65f6\u95f4\uff09\u65f6\u4ed6\u7684\u519c\u573a\u662f\u5426\u662f\u201c\u5168\u8fde\u901a\u7684\u201d\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\u4ece\u4efb\u610f\u7684\u4e00\u4e2a\u5f00\u7740\u7684\u8c37\u4ed3\u5f00\u59cb\uff0c\u80fd\u591f\u5230\u8fbe\u53e6\u5916\u7684\u4e00\u4e2a\u8c37\u4ed3\u3002\u6ce8\u610f\u81ea\u4ece\u67d0\u4e00\u4e2a\u65f6\u95f4\u4e4b\u540e\uff0c\u53ef\u80fd\u6574\u4e2a\u519c\u573a\u90fd\u5f00\u59cb\u4e0d\u4f1a\u662f\u201c\u5168\u8fde\u901a\u7684\u201d\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(N,M\\)\u3002</p> <p>\u63a5\u4e0b\u6765 \\(M\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(u,v\\)\uff08\\(1 \\leq u,v \\leq N\\)\uff09\uff0c\u63cf\u8ff0\u4e00\u6761\u8fde\u63a5 \\(u,v\\) \u4e24\u4e2a\u519c\u573a\u7684\u8def\u3002</p> <p>\u6700\u540e \\(N\\) \u884c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2c \\(i\\) \u4e2a\u88ab\u5173\u95ed\u7684\u519c\u573a\u7f16\u53f7\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa \\(N\\) \u884c\uff0c\u6bcf\u884c\u5305\u542b <code>YES</code> \u6216 <code>NO</code>\uff0c\u8868\u793a\u67d0\u4e2a\u65f6\u523b\u519c\u573a\u662f\u5426\u662f\u5168\u8fde\u901a\u7684\u3002</p> <p>\u7b2c\u4e00\u884c\u8f93\u51fa\u6700\u521d\u7684\u72b6\u6001\uff0c\u7b2c \\(i\\) \u884c\uff08\\(2 \\leq i \\leq N\\)\uff09\u8f93\u51fa\u7b2c \\(i-1\\) \u4e2a\u519c\u573a\u88ab\u5173\u95ed\u540e\u7684\u72b6\u6001\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>4 3\n1 2\n2 3\n3 4\n3\n4\n1\n2\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>YES\nNO\nYES\nYES\n</code></pre>"},{"location":"DataStruct/8%20%E3%80%81%E6%8E%92%E5%BA%8F/","title":"8 \u3001\u6392\u5e8f","text":"<ul> <li>1\u3001\u8ba1\u6570\u6392\u5e8f</li> <li>2\u3001\u5feb\u901f\u6392\u5e8f</li> <li>3\u3001\u6392\u5e8f\u51fd\u6570<ul> <li>\uff081\uff09\u81ea\u5b9a\u4e49\u987a\u5e8f</li> <li>\uff082\uff09\u7ed3\u6784\u4f53\u6392\u5e8f</li> </ul> </li> <li>\u4f8b\u9898<ul> <li>e.g.12 [NOIP2007 \u666e\u53ca\u7ec4] \u5956\u5b66\u91d1</li> <li>e.g.13 \u6570\u4f4d\u6392\u5e8f</li> <li>e.g. 14 \u6392\u961f\u63a5\u6c34</li> <li>e.g.15 \u2b50\u6bcd\u8230</li> </ul> </li> </ul>"},{"location":"DataStruct/8%20%E3%80%81%E6%8E%92%E5%BA%8F/#1","title":"1\u3001\u8ba1\u6570\u6392\u5e8f","text":""},{"location":"DataStruct/8%20%E3%80%81%E6%8E%92%E5%BA%8F/#2","title":"2\u3001\u5feb\u901f\u6392\u5e8f","text":""},{"location":"DataStruct/8%20%E3%80%81%E6%8E%92%E5%BA%8F/#3","title":"3\u3001\u6392\u5e8f\u51fd\u6570","text":"<p>\u590d\u6742\u5ea6\\(nlog(n)\\)</p> <pre><code>sort(first,last,comp);\n</code></pre> <p>Warning</p> <ul> <li>\u5de6\u95ed\u53f3\u5f00</li> <li><code>comp</code>\u662f\u6bd4\u8f83\u51fd\u6570\uff0c<code>sort</code>\u81ea\u5e26\u56db\u79cd<code>sort</code></li> <li>\u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927</li> </ul> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[100];\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    sort(a + 1, a + n + 1);\n    //\u4ece\u4e0b\u68071\u5f00\u59cb\uff0c\u5230\u4e0b\u6807a+n\uff08\u5de6\u95ed\u53f3\u5f00\uff09\n    for (int i = 1; i &lt;= n; i++) {\n        cout &lt;&lt; a[i] &lt;&lt; \" \";\n    }\n}\n</code></pre>"},{"location":"DataStruct/8%20%E3%80%81%E6%8E%92%E5%BA%8F/#1_1","title":"\uff081\uff09\u81ea\u5b9a\u4e49\u987a\u5e8f","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[100];\nint cmp(int x, int y) { // \u6ce8\u610fcmp\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u6b64\u5904\u4e3aint\u6570\u7ec4\n    return x &gt; y;       // \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n    //x &lt; y \u540c\u7406\n}\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    sort(a + 1, a + n + 1, cmp);\n    for (int i = 1; i &lt;= n; i++) {\n        cout &lt;&lt; a[i] &lt;&lt; \" \";\n    }\n}\n</code></pre>"},{"location":"DataStruct/8%20%E3%80%81%E6%8E%92%E5%BA%8F/#2_1","title":"\uff082\uff09\u7ed3\u6784\u4f53\u6392\u5e8f","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[100];\n\nstruct node {\n    int a, b;\n} e[100];\nint cmp(node n1, node n2) { // \u6ce8\u610fcmp\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u6b64\u5904\u4e3anode\u7ed3\u6784\u4f53\n    return n1.b &gt; n2.b;     // \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n}\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; e[i].a &gt;&gt; e[i].b;\n    }\n    sort(e + 1, e + n + 1, cmp);\n    for (int i = 1; i &lt;= n; i++) {\n        cout &lt;&lt; e[i].a &lt;&lt; \" \" &lt;&lt; e[i].b;\n    }\n}\n</code></pre> <pre><code>int cmp(node n1, node n2) { // \u6ce8\u610fcmp\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u6b64\u5904\u4e3anode\u7ed3\u6784\u4f53\n    if (n1.b == n2.b) {\n        return n1.a &lt; n2.a; // \u5982\u679cb\u76f8\u540c\uff0c\u5219\u6309a\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n    }\n    return n1.b &gt; n2.b; // \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n}\n</code></pre>"},{"location":"DataStruct/8%20%E3%80%81%E6%8E%92%E5%BA%8F/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/8%20%E3%80%81%E6%8E%92%E5%BA%8F/#eg12-noip2007","title":"e.g.12 [NOIP2007 \u666e\u53ca\u7ec4] \u5956\u5b66\u91d1","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>NOIP2007 \u666e\u53ca\u7ec4 T1</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u67d0\u5c0f\u5b66\u6700\u8fd1\u5f97\u5230\u4e86\u4e00\u7b14\u8d5e\u52a9\uff0c\u6253\u7b97\u62ff\u51fa\u5176\u4e2d\u4e00\u90e8\u5206\u4e3a\u5b66\u4e60\u6210\u7ee9\u4f18\u79c0\u7684\u524d \\(5\\) \u540d\u5b66\u751f\u53d1\u5956\u5b66\u91d1\u3002\u671f\u672b\uff0c\u6bcf\u4e2a\u5b66\u751f\u90fd\u6709 \\(3\\) \u95e8\u8bfe\u7684\u6210\u7ee9\uff1a\u8bed\u6587\u3001\u6570\u5b66\u3001\u82f1\u8bed\u3002\u5148\u6309\u603b\u5206\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\uff0c\u5982\u679c\u4e24\u4e2a\u540c\u5b66\u603b\u5206\u76f8\u540c\uff0c\u518d\u6309\u8bed\u6587\u6210\u7ee9\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\uff0c\u5982\u679c\u4e24\u4e2a\u540c\u5b66\u603b\u5206\u548c\u8bed\u6587\u6210\u7ee9\u90fd\u76f8\u540c\uff0c\u90a3\u4e48\u89c4\u5b9a\u5b66\u53f7\u5c0f\u7684\u540c\u5b66\u6392\u5728\u524d\u9762\uff0c\u8fd9\u6837\uff0c\u6bcf\u4e2a\u5b66\u751f\u7684\u6392\u5e8f\u662f\u552f\u4e00\u786e\u5b9a\u7684\u3002</p> <p>\u4efb\u52a1\uff1a\u5148\u6839\u636e\u8f93\u5165\u7684 \\(3\\) \u95e8\u8bfe\u7684\u6210\u7ee9\u8ba1\u7b97\u603b\u5206\uff0c\u7136\u540e\u6309\u4e0a\u8ff0\u89c4\u5219\u6392\u5e8f\uff0c\u6700\u540e\u6309\u6392\u540d\u987a\u5e8f\u8f93\u51fa\u524d\u4e94\u540d\u540d\u5b66\u751f\u7684\u5b66\u53f7\u548c\u603b\u5206\u3002</p> <p>\u6ce8\u610f\uff0c\u5728\u524d \\(5\\) \u540d\u540c\u5b66\u4e2d\uff0c\u6bcf\u4e2a\u4eba\u7684\u5956\u5b66\u91d1\u90fd\u4e0d\u76f8\u540c\uff0c\u56e0\u6b64\uff0c\u4f60\u5fc5\u987b\u4e25\u683c\u6309\u4e0a\u8ff0\u89c4\u5219\u6392\u5e8f\u3002\u4f8b\u5982\uff0c\u5728\u67d0\u4e2a\u6b63\u786e\u7b54\u6848\u4e2d\uff0c\u5982\u679c\u524d\u4e24\u884c\u7684\u8f93\u51fa\u6570\u636e\uff08\u6bcf\u884c\u8f93\u51fa\u4e24\u4e2a\u6570\uff1a\u5b66\u53f7\u3001\u603b\u5206) \u662f\uff1a</p> <pre><code>7 279  \n5 279\n</code></pre> <p>\u8fd9\u4e24\u884c\u6570\u636e\u7684\u542b\u4e49\u662f\uff1a\u603b\u5206\u6700\u9ad8\u7684\u4e24\u4e2a\u540c\u5b66\u7684\u5b66\u53f7\u4f9d\u6b21\u662f \\(7\\) \u53f7\u3001\\(5\\) \u53f7\u3002\u8fd9\u4e24\u540d\u540c\u5b66\u7684\u603b\u5206\u90fd\u662f \\(279\\) (\u603b\u5206\u7b49\u4e8e\u8f93\u5165\u7684\u8bed\u6587\u3001\u6570\u5b66\u3001\u82f1\u8bed\u4e09\u79d1\u6210\u7ee9\u4e4b\u548c) \uff0c\u4f46\u5b66\u53f7\u4e3a \\(7\\) \u7684\u5b66\u751f\u8bed\u6587\u6210\u7ee9\u66f4\u9ad8\u4e00\u4e9b\u3002</p> <p>\u5982\u679c\u4f60\u7684\u524d\u4e24\u540d\u7684\u8f93\u51fa\u6570\u636e\u662f\uff1a</p> <pre><code>5 279  \n7 279\n</code></pre> <p>\u5219\u6309\u8f93\u51fa\u9519\u8bef\u5904\u7406\uff0c\u4e0d\u80fd\u5f97\u5206\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u5171 \\(n+1\\) \u884c\u3002</p> <p>\u7b2c \\(1\\) \u884c\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570 \\(n \\le 300\\)\uff0c\u8868\u793a\u8be5\u6821\u53c2\u52a0\u8bc4\u9009\u7684\u5b66\u751f\u4eba\u6570\u3002</p> <p>\u7b2c \\(2\\) \u5230 \\(n+1\\) \u884c\uff0c\u6bcf\u884c\u6709 \\(3\\) \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u90fd\u5728 \\(0\\) \u5230 \\(100\\) \u4e4b\u95f4\u3002\u7b2c \\(j\\) \u884c\u7684 \\(3\\) \u4e2a\u6570\u5b57\u4f9d\u6b21\u8868\u793a\u5b66\u53f7\u4e3a \\(j-1\\) \u7684\u5b66\u751f\u7684\u8bed\u6587\u3001\u6570\u5b66\u3001\u82f1\u8bed\u7684\u6210\u7ee9\u3002\u6bcf\u4e2a\u5b66\u751f\u7684\u5b66\u53f7\u6309\u7167\u8f93\u5165\u987a\u5e8f\u7f16\u53f7\u4e3a \\(1\\sim n\\)\uff08\u6070\u597d\u662f\u8f93\u5165\u6570\u636e\u7684\u884c\u53f7\u51cf \\(1\\)\uff09\u3002</p> <p>\u4fdd\u8bc1\u6240\u7ed9\u7684\u6570\u636e\u90fd\u662f\u6b63\u786e\u7684\uff0c\u4e0d\u5fc5\u68c0\u9a8c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u5171 \\(5\\) \u884c\uff0c\u6bcf\u884c\u662f\u4e24\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570\uff0c\u4f9d\u6b21\u8868\u793a\u524d \\(5\\) \u540d\u5b66\u751f\u7684\u5b66\u53f7\u548c\u603b\u5206\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>6\n90 67 80\n87 66 91\n78 89 91\n88 99 77\n67 89 64\n78 89 98\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>6 265\n4 264\n3 258\n2 244\n1 237\n</code></pre> <p>\u6837\u4f8b #2</p> <p>\u6837\u4f8b\u8f93\u5165 #2</p> <pre><code>8\n80 89 89\n88 98 78\n90 67 80\n87 66 91\n78 89 91\n88 99 77\n67 89 64\n78 89 98\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #2</p> <pre><code>8 265\n2 264\n6 264\n1 258\n5 258\n</code></pre> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct node {\n    int Chinese;\n    int Math;\n    int English;\n    int sum;\n    int id;\n} score[100005];\n\nbool cmp(node a, node b) {\n    if (a.sum == b.sum ) {\n        if (a.Chinese == b.Chinese)\n            return a.id &lt; b.id;\n        return a.Chinese &gt; b.Chinese;\n    } // \u5982\u679c\u603b\u5206\u76f8\u540c\uff0c\u5219\u8bed\u6587\u6210\u7ee9\u9ad8\u7684\u4f18\u5148\uff0c\u5982\u679c\u8bed\u6587\u6210\u7ee9\u4e5f\u76f8\u540c\uff0c\u5219\u5b66\u53f7\u5c0f\u7684\u4f18\u5148\n    return a.sum &gt; b.sum;\n}\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        score[i].id = i + 1;\n        cin &gt;&gt; score[i].Chinese &gt;&gt; score[i].Math &gt;&gt; score[i].English;\n        score[i].sum = score[i].Chinese + score[i].Math + score[i].English;\n    }\n    sort(score, score + n, cmp);\n    for (int i = 0; i &lt;5 ; i++) {\n        cout &lt;&lt; score[i].id &lt;&lt; \" \" &lt;&lt; score[i].sum &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"DataStruct/8%20%E3%80%81%E6%8E%92%E5%BA%8F/#eg13","title":"e.g.13 \u6570\u4f4d\u6392\u5e8f","text":"<p>\u95ee\u9898\u63cf\u8ff0</p> <p>\u5c0f\u84dd\u5bf9\u4e00\u4e2a\u6570\u7684\u6570\u4f4d\u4e4b\u548c\u5f88\u611f\u5174\u8da3, \u4eca\u5929\u4ed6\u8981\u6309\u7167\u6570\u4f4d\u4e4b\u548c\u7ed9\u6570\u6392\u5e8f\u3002\u5f53 \u4e24\u4e2a\u6570\u5404\u4e2a\u6570\u4f4d\u4e4b\u548c\u4e0d\u540c\u65f6, \u5c06\u6570\u4f4d\u548c\u8f83\u5c0f\u7684\u6392\u5728\u524d\u9762, \u5f53\u6570\u4f4d\u4e4b\u548c\u76f8\u7b49\u65f6, \u5c06\u6570\u503c\u5c0f\u7684\u6392\u5728\u524d\u9762\u3002</p> <p>\u4f8b\u5982, 2022 \u6392\u5728 409 \u524d\u9762, \u56e0\u4e3a 2022 \u7684\u6570\u4f4d\u4e4b\u548c\u662f 6, \u5c0f\u4e8e 409 \u7684\u6570\u4f4d \u4e4b\u548c 13 \u3002</p> <p>\u53c8\u5982, 6 \u6392\u5728 2022 \u524d\u9762, \u56e0\u4e3a\u5b83\u4eec\u7684\u6570\u4f4d\u4e4b\u548c\u76f8\u540c, \u800c 6 \u5c0f\u4e8e 2022 \u3002</p> <p>\u7ed9\u5b9a\u6b63\u6574\u6570 \\(n,m\\), \u8bf7\u95ee\u5bf9 1 \u5230 \\(n\\)\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\u6392\u5e8f\u65f6, \u6392\u5728\u7b2c \\(m\\)\u4e2a\u7684\u5143 \u7d20\u662f\u591a\u5c11?</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\) \u3002</p> <p>\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 \\(m\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570, \u8868\u793a\u7b54\u6848\u3002</p> <p>\u6837\u4f8b\u8f93\u5165</p> <pre><code>13\n5\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa</p> <pre><code>3\n</code></pre> <p>\u6837\u4f8b\u8bf4\u660e</p> <p>1 \u5230 13 \u7684\u6392\u5e8f\u4e3a: \\(1,10,2,11,3,12,4,13,5,6,7,8,9\\)\u3002\u7b2c 5 \u4e2a\u6570\u4e3a 3 \u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstruct node {\n    int number;\n    int sum;\n} e[1000005];//\u4e00\u5b9a\u6ce8\u610f\u6570\u636e\u89c4\u6a21\n\nbool cmp(node a, node b) {\n\n    if (a.sum == b.sum) {\n        return a.number &lt; b.number;\n    }\n    return a.sum &lt; b.sum;\n}\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    int m;\n    cin &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        e[i].number = i;\n        e[i].sum = 0;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        int number = e[i].number; //\u6ce8\u610f\u4f7f\u7528\u4e2d\u95f4\u53d8\u91cf\uff0c\u4e0d\u7be1\u6539\u539f\u6570\u7ec4\n        while (number) {\n            e[i].sum += number % 10;\n            number /= 10;\n        }\n    }\n    sort(e + 1, e + 1 + n, cmp); \n    cout &lt;&lt; e[m].number &lt;&lt; endl ;\n}\n</code></pre>"},{"location":"DataStruct/8%20%E3%80%81%E6%8E%92%E5%BA%8F/#eg-14","title":"e.g. 14 \u6392\u961f\u63a5\u6c34","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u6709 \\(n\\) \u4e2a\u4eba\u5728\u4e00\u4e2a\u6c34\u9f99\u5934\u524d\u6392\u961f\u63a5\u6c34\uff0c\u5047\u5982\u6bcf\u4e2a\u4eba\u63a5\u6c34\u7684\u65f6\u95f4\u4e3a \\(T_i\\)\uff0c\u8bf7\u7f16\u7a0b\u627e\u51fa\u8fd9 \\(n\\) \u4e2a\u4eba\u6392\u961f\u7684\u4e00\u79cd\u987a\u5e8f\uff0c\u4f7f\u5f97 \\(n\\) \u4e2a\u4eba\u7684\u5e73\u5747\u7b49\u5f85\u65f6\u95f4\u6700\u5c0f\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570 \\(n\\)\u3002</p> <p>\u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u7b2c \\(i\\) \u4e2a\u6574\u6570 \\(T_i\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a\u4eba\u7684\u63a5\u6c34\u65f6\u95f4 \\(T_i\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u6587\u4ef6\u6709\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u4e3a\u4e00\u79cd\u5e73\u5747\u65f6\u95f4\u6700\u77ed\u7684\u6392\u961f\u987a\u5e8f\uff1b\u7b2c\u4e8c\u884c\u4e3a\u8fd9\u79cd\u6392\u5217\u65b9\u6848\u4e0b\u7684\u5e73\u5747\u7b49\u5f85\u65f6\u95f4\uff08\u8f93\u51fa\u7ed3\u679c\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d\uff09\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>10 \n56 12 1 99 1000 234 33 55 99 812\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>3 2 7 8 1 4 9 6 10 5\n291.90\n</code></pre> <p>\u63d0\u793a</p> <p>\\(1\\le n \\leq 1000\\)\uff0c\\(1\\le t_i \\leq 10^6\\)\uff0c\u4e0d\u4fdd\u8bc1 \\(t_i\\) \u4e0d\u91cd\u590d\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define int long long\nstruct node {\n    int number;\n    int time;\n} e[100005];\nbool cmp(node a, node b) {\n    return a.time &lt; b.time;     //\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\n}\nint32_t main() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; e[i].time;\n        e[i].number = i;\n    }\n    sort(e + 1, e + n + 1, cmp);\n    for (int i = 1; i &lt;= n; i++) {\n        cout &lt;&lt; e[i].number &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    double sum=0;\n    //e.time[1]*9+e.time[2]*8+\u2026\u2026\u2026\u2026\n    for(int i=1;i&lt;=n;i++){\n        sum+=e[i].time*(n-i);\n    }\n    // cout&lt;&lt;sum&lt;&lt;endl;\n    printf(\"%.2lf\",sum/n);\n}\n</code></pre>"},{"location":"DataStruct/8%20%E3%80%81%E6%8E%92%E5%BA%8F/#eg15","title":"e.g.15 \u2b50\u6bcd\u8230","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>\u5e7f\u4e1c\u6c55\u5934\u807f\u6000\u521d\u4e2d Train#3 Problem 1</p> <p>\uff08\u6709\u6ca1\u6709\u7ea2\u8b66\u65e2\u89c6\u611f~\uff09</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5728\u5c0f A \u7684\u661f\u9645\u5927\u6218\u6e38\u620f\u4e2d\uff0c\u4e00\u8258\u5f3a\u529b\u7684\u6bcd\u8230\u5f80\u5f80\u51b3\u5b9a\u4e86\u4e00\u573a\u6218\u4e89\u7684\u80dc\u8d1f\u3002\u4e00\u8258\u6bcd\u8230\u7684\u653b\u51fb\u529b\u662f\u666e\u901a\u7684 MA\uff08Mobile Armor\uff09\u65e0\u6cd5\u6bd4\u8f83\u7684\u3002</p> <p>\u5bf9\u4e8e\u4e00\u8258\u6bcd\u8230\u800c\u8a00\uff0c\u5b83\u662f\u7531\u82e5\u5e72\u4e2a\u653b\u51fb\u7cfb\u7edf\u548c\u82e5\u5e72\u4e2a\u9632\u5fa1\u7cfb\u7edf\u7ec4\u6210\u7684\u3002\u4e24\u8258\u6bcd\u8230\u5bf9\u51b3\u65f6\uff0c\u4e00\u8258\u6bcd\u8230\u4f1a\u9009\u62e9\u7528\u4e0d\u540c\u7684\u653b\u51fb\u7cfb\u7edf\u53bb\u653b\u51fb\u5bf9\u9762\u6bcd\u8230\u7684\u9632\u5fa1\u7cfb\u7edf\u3002\u5f53\u8fd9\u4e2a\u653b\u51fb\u7cfb\u7edf\u7684\u653b\u51fb\u529b\u5927\u4e8e\u9632\u5fa1\u7cfb\u7edf\u7684\u9632\u5fa1\u529b\u65f6\uff0c\u90a3\u4e2a\u9632\u5fa1\u7cfb\u7edf\u4f1a\u88ab\u7834\u574f\u6389\u3002\u5f53\u4e00\u8258\u6bcd\u8230\u7684\u9632\u5fa1\u7cfb\u7edf\u5168\u90e8\u88ab\u7834\u574f\u6389\u4e4b\u540e\uff0c\u6240\u6709\u7684\u653b\u51fb\u90fd\u4f1a\u653b\u51fb\u5230\u654c\u65b9\u6bcd\u8230\u672c\u8eab\u4e0a\u53bb\u9020\u6210\u4f24\u5bb3\u3002</p> <p>\u8fd9\u6837\u8bf4\uff0c\u4e00\u8258\u6bcd\u8230\u5bf9\u5bf9\u9762\u7684\u4f24\u5bb3\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u53d6\u51b3\u4e8e\u9009\u62e9\u7684\u653b\u51fb\u5bf9\u8c61\u7684\u3002</p> <p>\u5728\u77ac\u606f\u4e07\u53d8\u7684\u6218\u573a\u4e2d\uff0c\u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7684\u653b\u51fb\u5bf9\u8c61\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u6240\u4ee5\u9700\u8981\u5199\u51fa\u4e00\u4e2a\u6218\u6597\u7cfb\u7edf\u51fa\u6765\uff0c\u5224\u65ad\u51fa\u4f60\u7684\u6bcd\u8230\u6700\u591a\u80fd\u5bf9\u5bf9\u624b\u9020\u6210\u591a\u5c11\u4f24\u5bb3\u5e76\u52a0\u4ee5\u5b9e\u73b0\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(M\\) \u548c \\(N\\)\uff0c\u8868\u793a\u5bf9\u65b9\u6bcd\u8230\u7684\u9632\u5fa1\u7cfb\u7edf\u6570\u91cf\u548c\u4f60\u7684\u6bcd\u8230\u7684\u653b\u51fb\u7cfb\u7edf\u6570\u91cf\u3002</p> <p>\u63a5\u7740 \\(M\\) \u884c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\u6bcf\u4e00\u4e2a\u8868\u793a\u5bf9\u65b9\u9632\u5fa1\u7cfb\u7edf\u7684\u9632\u5fa1\u529b\u662f\u591a\u5c11\u3002</p> <p>\u63a5\u7740 \\(N\\) \u884c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\u6bcf\u4e00\u4e2a\u8868\u793a\u5df1\u65b9\u653b\u51fb\u7cfb\u7edf\u7684\u653b\u51fb\u529b\u662f\u591a\u5c11\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4ec5\u6709\u4e00\u884c\uff0c\u8868\u793a\u53ef\u4ee5\u9020\u6210\u7684\u6700\u5927\u4f24\u5bb3\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>3 5 \n1000 \n2000 \n1200 \n2100 \n2000 \n1200 \n1000 \n1000\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>2000\n</code></pre> <p>\u63d0\u793a</p> <p>\u6837\u4f8b\u89e3\u91ca </p> <p>\u5bf9\u65b9\u9632\u5fa1\u7cfb\u7edf\u6709 \\(3\\) \u4e2a\uff0c\u9632\u5fa1\u503c\u4e3a \\(1000(a),2000(b),1200(c)\\)\uff0c\u5df1\u65b9\u653b\u51fb\u7cfb\u7edf\u6709 \\(5\\) \u4e2a\uff0c\u653b\u51fb\u503c\u4e3a \\(2100(d)\uff0c2000(e),1200(f),1000(g),1000(h)\\)\u3002\u7b2c \\(1\\) \u8f6e\u653b\u51fb\u7684\u6700\u4f18\u65b9\u6848\u662f \\(d\\) \u653b\u51fb \\(b\\)\uff0c\\(e\\) \u653b\u51fb \\(c\\)\uff0c\\(f\\) \u653b\u51fb \\(a\\)\uff0c\\(g\\) \u548c \\(h\\) \u653b\u51fb\u5bf9\u65b9\u6bcd\u8230\u672c\u8eab\uff0c\u9020\u6210 \\(2000\\) \u70b9\u4f24\u5bb3\u3002</p> <p>\u6570\u636e\u8303\u56f4\u4e0e\u7ea6\u5b9a</p> <p>\u5bf9\u4e8e \\(80 \\%\\) \u7684\u6570\u636e\uff0c\\(1 \\le N,M \\le 1000\\)\u3002</p> <p>\u5bf9\u4e8e \\(100 \\%\\) \u7684\u6570\u636e\uff0c\\(1 \\le N,M \\le 10 ^ 5\\)\u3002</p>"},{"location":"DataStruct/9%20%E3%80%81%E6%8E%92%E5%88%97/","title":"9 \u3001\u6392\u5217","text":"<ul> <li>next-permutation\u51fd\u6570\u5e94\u7528</li> <li>\u4f8b\u9898<ul> <li>e.g.16 # [NOIP2004 \u666e\u53ca\u7ec4] \u706b\u661f\u4eba</li> <li>e.g.17 [NOIP2002 \u666e\u53ca\u7ec4] \u9009\u6570</li> </ul> </li> </ul>"},{"location":"DataStruct/9%20%E3%80%81%E6%8E%92%E5%88%97/#next-permutation","title":"<code>next-permutation</code>\u51fd\u6570\u5e94\u7528","text":"<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[100]={1,2,3,4,};\nint main(){\n    do{\n        for(int i=0;i&lt;4;i++){\n            cout&lt;&lt;a[i]&lt;&lt;\" \";\n        }\n        cout&lt;&lt;endl;\n    }while(next_permutation(a,a+4));\n}\n/*\u51fd\u6570\u529f\u80fd\uff1a\n    \u5c06\u5f53\u524d\u5e8f\u5217\u91cd\u6392\u4e3a\u4e0b\u4e00\u4e2a\u5b57\u5178\u5e8f\u7684\u6392\u5217\n    \u5982\u679c\u5b58\u5728\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u8fd4\u56detrue\n    \u5982\u679c\u5f53\u524d\u5df2\u662f\u6700\u540e\u4e00\u4e2a\u6392\u5217\uff0c\u8fd4\u56defalse\u5e76\u91cd\u6392\u4e3a\u6700\u5c0f\u6392\u5217\n    \u5982\u679c\u8981\u751f\u6210\u6240\u6709\u6392\u5217\uff0c\u521d\u59cb\u5e8f\u5217\u5fc5\u987b\u662f\u6700\u5c0f\u7684\u6392\u5217\uff08\u5347\u5e8f\u6392\u5217\uff09\n */\n</code></pre>"},{"location":"DataStruct/9%20%E3%80%81%E6%8E%92%E5%88%97/#_1","title":"\u4f8b\u9898","text":""},{"location":"DataStruct/9%20%E3%80%81%E6%8E%92%E5%88%97/#eg16-noip2004","title":"e.g.16 # [NOIP2004 \u666e\u53ca\u7ec4] \u706b\u661f\u4eba","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4eba\u7c7b\u7ec8\u4e8e\u767b\u4e0a\u4e86\u706b\u661f\u7684\u571f\u5730\u5e76\u4e14\u89c1\u5230\u4e86\u795e\u79d8\u7684\u706b\u661f\u4eba\u3002\u4eba\u7c7b\u548c\u706b\u661f\u4eba\u90fd\u65e0\u6cd5\u7406\u89e3\u5bf9\u65b9\u7684\u8bed\u8a00\uff0c\u4f46\u662f\u6211\u4eec\u7684\u79d1\u5b66\u5bb6\u53d1\u660e\u4e86\u4e00\u79cd\u7528\u6570\u5b57\u4ea4\u6d41\u7684\u65b9\u6cd5\u3002\u8fd9\u79cd\u4ea4\u6d41\u65b9\u6cd5\u662f\u8fd9\u6837\u7684\uff0c\u9996\u5148\uff0c\u706b\u661f\u4eba\u628a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570\u5b57\u544a\u8bc9\u4eba\u7c7b\u79d1\u5b66\u5bb6\uff0c\u79d1\u5b66\u5bb6\u7834\u89e3\u8fd9\u4e2a\u6570\u5b57\u7684\u542b\u4e49\u540e\uff0c\u518d\u628a\u4e00\u4e2a\u5f88\u5c0f\u7684\u6570\u5b57\u52a0\u5230\u8fd9\u4e2a\u5927\u6570\u4e0a\u9762\uff0c\u628a\u7ed3\u679c\u544a\u8bc9\u706b\u661f\u4eba\uff0c\u4f5c\u4e3a\u4eba\u7c7b\u7684\u56de\u7b54\u3002</p> <p>\u706b\u661f\u4eba\u7528\u4e00\u79cd\u975e\u5e38\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u8868\u793a\u6570\u5b57\u2015\u2015\u63b0\u624b\u6307\u3002\u706b\u661f\u4eba\u53ea\u6709\u4e00\u53ea\u624b\uff0c\u4f46\u8fd9\u53ea\u624b\u4e0a\u6709\u6210\u5343\u4e0a\u4e07\u7684\u624b\u6307\uff0c\u8fd9\u4e9b\u624b\u6307\u6392\u6210\u4e00\u5217\uff0c\u5206\u522b\u7f16\u53f7\u4e3a \\(1,2,3,\\cdots\\)\u3002\u706b\u661f\u4eba\u7684\u4efb\u610f\u4e24\u6839\u624b\u6307\u90fd\u80fd\u968f\u610f\u4ea4\u6362\u4f4d\u7f6e\uff0c\u4ed6\u4eec\u5c31\u662f\u901a\u8fc7\u8fd9\u65b9\u6cd5\u8ba1\u6570\u7684\u3002</p> <p>\u4e00\u4e2a\u706b\u661f\u4eba\u7528\u4e00\u4e2a\u4eba\u7c7b\u7684\u624b\u6f14\u793a\u4e86\u5982\u4f55\u7528\u624b\u6307\u8ba1\u6570\u3002\u5982\u679c\u628a\u4e94\u6839\u624b\u6307\u2015\u2015\u62c7\u6307\u3001\u98df\u6307\u3001\u4e2d\u6307\u3001\u65e0\u540d\u6307\u548c\u5c0f\u6307\u5206\u522b\u7f16\u53f7\u4e3a \\(1,2,3,4\\) \u548c \\(5\\)\uff0c\u5f53\u5b83\u4eec\u6309\u6b63\u5e38\u987a\u5e8f\u6392\u5217\u65f6\uff0c\u5f62\u6210\u4e86 \\(5\\) \u4f4d\u6570 \\(12345\\)\uff0c\u5f53\u4f60\u4ea4\u6362\u65e0\u540d\u6307\u548c\u5c0f\u6307\u7684\u4f4d\u7f6e\u65f6\uff0c\u4f1a\u5f62\u6210 \\(5\\) \u4f4d\u6570 \\(12354\\)\uff0c\u5f53\u4f60\u628a\u4e94\u4e2a\u624b\u6307\u7684\u987a\u5e8f\u5b8c\u5168\u98a0\u5012\u65f6\uff0c\u4f1a\u5f62\u6210 \\(54321\\)\uff0c\u5728\u6240\u6709\u80fd\u591f\u5f62\u6210\u7684 \\(120\\) \u4e2a \\(5\\) \u4f4d\u6570\u4e2d\uff0c\\(12345\\) \u6700\u5c0f\uff0c\u5b83\u8868\u793a \\(1\\)\uff1b\\(12354\\) \u7b2c\u4e8c\u5c0f\uff0c\u5b83\u8868\u793a \\(2\\)\uff1b\\(54321\\) \u6700\u5927\uff0c\u5b83\u8868\u793a \\(120\\)\u3002\u4e0b\u8868\u5c55\u793a\u4e86\u53ea\u6709 \\(3\\) \u6839\u624b\u6307\u65f6\u80fd\u591f\u5f62\u6210\u7684 \\(6\\) \u4e2a \\(3\\) \u4f4d\u6570\u548c\u5b83\u4eec\u4ee3\u8868\u7684\u6570\u5b57\uff1a</p> \u4e09\u8fdb\u5236\u6570 \u4ee3\u8868\u7684\u6570\u5b57 \\(123\\) \\(1\\) \\(132\\) \\(2\\) \\(213\\) \\(3\\) \\(231\\) \\(4\\) \\(312\\) \\(5\\) \\(321\\) \\(6\\) <p>\u73b0\u5728\u4f60\u6709\u5e78\u6210\u4e3a\u4e86\u7b2c\u4e00\u4e2a\u548c\u706b\u661f\u4eba\u4ea4\u6d41\u7684\u5730\u7403\u4eba\u3002\u4e00\u4e2a\u706b\u661f\u4eba\u4f1a\u8ba9\u4f60\u770b\u4ed6\u7684\u624b\u6307\uff0c\u79d1\u5b66\u5bb6\u4f1a\u544a\u8bc9\u4f60\u8981\u52a0\u4e0a\u53bb\u7684\u5f88\u5c0f\u7684\u6570\u3002\u4f60\u7684\u4efb\u52a1\u662f\uff0c\u628a\u706b\u661f\u4eba\u7528\u624b\u6307\u8868\u793a\u7684\u6570\u4e0e\u79d1\u5b66\u5bb6\u544a\u8bc9\u4f60\u7684\u6570\u76f8\u52a0\uff0c\u5e76\u6839\u636e\u76f8\u52a0\u7684\u7ed3\u679c\u6539\u53d8\u706b\u661f\u4eba\u624b\u6307\u7684\u6392\u5217\u987a\u5e8f\u3002\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u8fd9\u4e2a\u7ed3\u679c\u4e0d\u4f1a\u8d85\u51fa\u706b\u661f\u4eba\u624b\u6307\u80fd\u8868\u793a\u7684\u8303\u56f4\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u5171\u4e09\u884c\u3002 \u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 \\(N\\)\uff0c\u8868\u793a\u706b\u661f\u4eba\u624b\u6307\u7684\u6570\u76ee\uff08\\(1 \\le N \\le 10000\\)\uff09\u3002 \u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570 \\(M\\)\uff0c\u8868\u793a\u8981\u52a0\u4e0a\u53bb\u7684\u5c0f\u6574\u6570\uff08\\(1  \\le  M  \\le  100\\)\uff09\u3002 \u4e0b\u4e00\u884c\u662f \\(1\\) \u5230 \\(N\\) \u8fd9 \\(N\\) \u4e2a\u6574\u6570\u7684\u4e00\u4e2a\u6392\u5217\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u706b\u661f\u4eba\u624b\u6307\u7684\u6392\u5217\u987a\u5e8f\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\\(N\\) \u4e2a\u6574\u6570\uff0c\u8868\u793a\u6539\u53d8\u540e\u7684\u706b\u661f\u4eba\u624b\u6307\u7684\u6392\u5217\u987a\u5e8f\u3002\u6bcf\u4e24\u4e2a\u76f8\u90bb\u7684\u6570\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u5f00\uff0c\u4e0d\u80fd\u6709\u591a\u4f59\u7684\u7a7a\u683c\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>5\n3\n1 2 3 4 5\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>1 2 4 5 3\n</code></pre> <p>\u63d0\u793a</p> <p>\u5bf9\u4e8e \\(30\\%\\) \u7684\u6570\u636e\uff0c\\(N \\le 15\\)\u3002</p> <p>\u5bf9\u4e8e \\(60\\%\\) \u7684\u6570\u636e\uff0c\\(N \\le 50\\)\u3002</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(N \\le 10000\\)\u3002</p> <p>noip2004 \u666e\u53ca\u7ec4\u7b2c 4 \u9898</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int N;\n    int M;\n    cin &gt;&gt; N &gt;&gt; M;\n    int arr[N];\n    for (int i = 0; i &lt; N; i++) {\n        cin &gt;&gt; arr[i];\n    }\n    //\u5199\u5165\uff0c\u7136\u540enext_permutation\u81f3M\u6b21   \n    for (int i = 0; i &lt; M; i++) {\n        next_permutation(arr, arr + N);\n    }\n    for (int i = 0; i &lt; N; i++) {\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n}\n</code></pre>"},{"location":"DataStruct/9%20%E3%80%81%E6%8E%92%E5%88%97/#eg17-noip2002","title":"e.g.17 [NOIP2002 \u666e\u53ca\u7ec4] \u9009\u6570","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5df2\u77e5 \\(n\\) \u4e2a\u6574\u6570 \\(x_1,x_2,\\cdots,x_n\\)\uff0c\u4ee5\u53ca \\(1\\) \u4e2a\u6574\u6570 \\(k\\)\uff08\\(k&lt;n\\)\uff09\u3002\u4ece \\(n\\) \u4e2a\u6574\u6570\u4e2d\u4efb\u9009 \\(k\\) \u4e2a\u6574\u6570\u76f8\u52a0\uff0c\u53ef\u5206\u522b\u5f97\u5230\u4e00\u7cfb\u5217\u7684\u548c\u3002\u4f8b\u5982\u5f53 \\(n=4\\)\uff0c\\(k=3\\)\uff0c\\(4\\) \u4e2a\u6574\u6570\u5206\u522b\u4e3a \\(3,7,12,19\\) \u65f6\uff0c\u53ef\u5f97\u5168\u90e8\u7684\u7ec4\u5408\u4e0e\u5b83\u4eec\u7684\u548c\u4e3a\uff1a</p> <p>\\(3+7+12=22\\)</p> <p>\\(3+7+19=29\\)</p> <p>\\(7+12+19=38\\)</p> <p>\\(3+12+19=34\\)</p> <p>\u73b0\u5728\uff0c\u8981\u6c42\u4f60\u8ba1\u7b97\u51fa\u548c\u4e3a\u7d20\u6570\u5171\u6709\u591a\u5c11\u79cd\u3002</p> <p>\u4f8b\u5982\u4e0a\u4f8b\uff0c\u53ea\u6709\u4e00\u79cd\u7684\u548c\u4e3a\u7d20\u6570\uff1a\\(3+7+19=29\\)\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c\u4e24\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570 \\(n,k\\)\uff08\\(1 \\le n \\le 20\\)\uff0c\\(k&lt;n\\)\uff09\u3002</p> <p>\u7b2c\u4e8c\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u5206\u522b\u4e3a \\(x_1,x_2,\\cdots,x_n\\)\uff08\\(1 \\le x_i \\le 5\\times 10^6\\)\uff09\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u79cd\u7c7b\u6570\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>4 3\n3 7 12 19\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>1\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u9898\u76ee\u6765\u6e90\u3011</p> <p>NOIP 2002 \u666e\u53ca\u7ec4\u7b2c\u4e8c\u9898</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[100];\nint b[100];\nbool isPrime(int n) {\n    if (n &lt; 2) return false;\n    for (int i = 2; i &lt;= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n\nint main() {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    for (int i = n; i &gt;= n - k + 1; i--) {\n        b[i] = 1;\n    }\n    do {\n        int sum = 0;\n        for (int i = 1; i &lt;= n; i++) {\n            if (b[i] == 1) {\n                sum += a[i];\n            }\n\n        }\n        if (isPrime(sum)) {\n                ans++;\n            }\n    }while(next_permutation(b + 1, b + n + 1));\n    cout &lt;&lt; ans;\n}\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/","title":"\u7efc\u5408","text":"Code Practice  <ul> <li>\u4e00\u3001STL<ul> <li>1\u3001vector<ul> <li>e.g.1 \u3010\u6df1\u57fa15.\u4f8b2\u3011\u5bc4\u5305\u67dc</li> </ul> </li> <li>2\u3001 \u961f\u5217<ul> <li>e.g.2 \u7ea6\u745f\u592b\u95ee\u9898</li> <li>e.g.3 [NOIP2010 \u63d0\u9ad8\u7ec4] \u673a\u5668\u7ffb\u8bd1</li> </ul> </li> <li>3\u3001Stack \u6808<ul> <li>e.g.4\u62ec\u53f7\u5e8f\u5217</li> </ul> </li> <li>4\u3001\u6742\u9898\uff08\u5b57\u5178\u5e8f\uff09<ul> <li>e.g.5 String Minimization</li> </ul> </li> </ul> </li> <li>\u4e8c\u3001\u8fed\u4ee3<ul> <li>e.g.8 [NOIP1998 \u666e\u53ca\u7ec4] \u5e42\u6b21\u65b9</li> </ul> </li> </ul>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#_1","title":"\u7efc\u5408","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#stl","title":"\u4e00\u3001STL","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#1vector","title":"1\u3001vector","text":"Tip <p>\u987a\u5e8f\u5bb9\u5668\uff0c\u4efb\u610f\u7c7b\u578b\u52a8\u6001\u6570\u7ec4</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int n;\n    cin&gt;&gt;n;\n    vector&lt;int&gt; v(n);\n    for(int i=0;i&lt;n;i++) {\n        cin&gt;&gt;v[i];\n    }\n    for(int i=0;i&lt;n;i++) {\n        cout&lt;&lt;v[i]+1&lt;&lt;\" \";\n    }\n}\n</code></pre> <pre><code>v.resize(2*n);\ncout&lt;&lt;v.size()&lt;&lt;endl;\n</code></pre> <pre><code> insert /pushback\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg1-152","title":"e.g.1 \u3010\u6df1\u57fa15.\u4f8b2\u3011\u5bc4\u5305\u67dc","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u8d85\u5e02\u91cc\u6709 \\(n(1\\le n\\le10^5)\\) \u4e2a\u5bc4\u5305\u67dc\u3002\u6bcf\u4e2a\u5bc4\u5305\u67dc\u683c\u5b50\u6570\u91cf\u4e0d\u4e00\uff0c\u7b2c \\(i\\) \u4e2a\u5bc4\u5305\u67dc\u6709 \\(a_i(1\\le a_i\\le10^5)\\) \u4e2a\u683c\u5b50\uff0c\u4e0d\u8fc7\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u5404\u4e2a \\(a_i\\) \u7684\u503c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5bc4\u5305\u67dc\uff0c\u683c\u5b50\u7f16\u53f7\u4ece 1 \u5f00\u59cb\uff0c\u4e00\u76f4\u5230 \\(a_i\\)\u3002\u73b0\u5728\u6709 \\(q(1 \\le q\\le10^5)\\) \u6b21\u64cd\u4f5c\uff1a</p> <ul> <li><code>1 i j k</code>\uff1a\u5728\u7b2c \\(i\\) \u4e2a\u67dc\u5b50\u7684\u7b2c \\(j\\) \u4e2a\u683c\u5b50\u5b58\u5165\u7269\u54c1 \\(k(0\\le k\\le 10^9)\\)\u3002\u5f53 \\(k=0\\) \u65f6\u8bf4\u660e\u6e05\u7a7a\u8be5\u683c\u5b50\u3002</li> <li><code>2 i j</code>\uff1a\u67e5\u8be2\u7b2c \\(i\\) \u4e2a\u67dc\u5b50\u7684\u7b2c \\(j\\) \u4e2a\u683c\u5b50\u4e2d\u7684\u7269\u54c1\u662f\u4ec0\u4e48\uff0c\u4fdd\u8bc1\u67e5\u8be2\u7684\u67dc\u5b50\u6709\u5b58\u8fc7\u4e1c\u897f\u3002</li> </ul> <p>\u5df2\u77e5\u8d85\u5e02\u91cc\u5171\u8ba1\u4e0d\u4f1a\u8d85\u8fc7 \\(10^7\\) \u4e2a\u5bc4\u5305\u683c\u5b50\uff0c\\(a_i\\) \u662f\u786e\u5b9a\u7136\u800c\u672a\u77e5\u7684\uff0c\u4f46\u662f\u4fdd\u8bc1\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u8be5\u67dc\u5b50\u5b58\u7269\u54c1\u8bf7\u6c42\u7684\u683c\u5b50\u7f16\u53f7\u7684\u6700\u5927\u503c\u3002\u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u67d0\u4e9b\u5bc4\u5305\u67dc\u4e2d\u4e00\u4e2a\u683c\u5b50\u90fd\u6ca1\u6709\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u7b2c\u4e00\u884c 2 \u4e2a\u6574\u6570 \\(n\\) \u548c \\(q\\)\uff0c\u5bc4\u5305\u67dc\u4e2a\u6570\u548c\u8be2\u95ee\u6b21\u6570\u3002</p> <p>\u63a5\u4e0b\u6765 \\(q\\) \u4e2a\u884c\uff0c\u6bcf\u884c\u6709\u82e5\u5e72\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u6b21\u64cd\u4f5c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\u65f6\uff0c\u8f93\u51fa\u7b54\u6848\uff0c\u4ee5\u6362\u884c\u9694\u5f00\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>5 4\n1 3 10000 118014\n1 1 1 1\n2 3 10000\n2 1 1\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>118014\n1\n</code></pre> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n\n    vector&lt;vector&lt;int&gt; &gt; A(n + 1);\n    for (int i = 1; i &lt;= q; i++) {\n        int op;\n        cin &gt;&gt; op;\n        if (op == 1) {\n            int I, j, k;\n            cin &gt;&gt; I &gt;&gt; j &gt;&gt; k;\n            if (A[I].size() &lt; j + 1) {//in case there is no 'j'\n                A[I].resize(j + 1);//resize the 'j'\n            }\n            A[I][j] = k;\n        }\n        if (op == 2) {\n            int I, j;\n            cin &gt;&gt; I &gt;&gt; j;\n            cout &lt;&lt; A[I][j] &lt;&lt; endl;\n        }\n    }\n}\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#2","title":"2\u3001 \u961f\u5217","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg2","title":"e.g.2 \u7ea6\u745f\u592b\u95ee\u9898","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\\(n\\) \u4e2a\u4eba\u56f4\u6210\u4e00\u5708\uff0c\u4ece\u7b2c\u4e00\u4e2a\u4eba\u5f00\u59cb\u62a5\u6570,\u6570\u5230 \\(m\\) \u7684\u4eba\u51fa\u5217\uff0c\u518d\u7531\u4e0b\u4e00\u4e2a\u4eba\u91cd\u65b0\u4ece \\(1\\) \u5f00\u59cb\u62a5\u6570\uff0c\u6570\u5230 \\(m\\) \u7684\u4eba\u518d\u51fa\u5708\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u6240\u6709\u7684\u4eba\u90fd\u51fa\u5708\uff0c\u8bf7\u8f93\u51fa\u4f9d\u6b21\u51fa\u5708\u4eba\u7684\u7f16\u53f7\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u4e24\u4e2a\u6574\u6570 \\(n,m\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c \\(n\\) \u4e2a\u6574\u6570\uff0c\u6309\u987a\u5e8f\u8f93\u51fa\u6bcf\u4e2a\u51fa\u5708\u4eba\u7684\u7f16\u53f7\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>10 3\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>3 6 9 2 7 1 8 5 10 4\n</code></pre> <p>\u63d0\u793a</p> <p>\\(1 \\le m, n \\le 100\\)</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n   int n, m;            // n\u662f\u4eba\u6570\uff0cm\u662f\u62a5\u6570\u5230\u51e0\u51fa\u5217\n   cin &gt;&gt; n &gt;&gt; m;\n\n   queue&lt;int&gt; q;        // \u521b\u5efa\u961f\u5217\u6a21\u62df\u5706\u5708\u4e2d\u7684\u4eba\n   for (int i = 1; i &lt;= n; i++) {  // \u5c061\u5230n\u7684\u6570\u5b57\u653e\u5165\u961f\u5217\n       q.push(i);       // \u6570\u5b57\u4ee3\u8868\u6bcf\u4e2a\u4eba\u7684\u7f16\u53f7\n   }\n\n   for (int i = 1; i &lt;= n; i++) {   // \u4e00\u5171\u8981\u51fa\u5217n\u4e2a\u4eba\n       for (int j = 1; j &lt; m; j++) { // \u6bcf\u6b21\u62a5\u6570\u5230m-1\n           int f = q.front();        // \u53d6\u51fa\u961f\u9996\u7684\u4eba\n           q.pop();                  // \u79fb\u9664\u961f\u9996\n           q.push(f);               // \u5c06\u8fd9\u4e2a\u4eba\u653e\u5230\u961f\u5c3e(\u56e0\u4e3a\u6ca1\u62a5\u5230m\uff0c\u4e0d\u7528\u51fa\u5217)\n       }\n       cout &lt;&lt; q.front() &lt;&lt; ' ';    // \u8f93\u51fa\u62a5\u6570\u4e3am\u7684\u4eba(\u5373\u51fa\u5217\u7684\u4eba)\n       q.pop();                     // \u79fb\u9664\u8fd9\u4e2a\u4eba(\u51fa\u5217)\n   }\n}\n</code></pre> \\[ \u7528\u6570\u5b66\u65b9\u6cd5\\\\ f(n,k)=(f(n\u22121,k)+k)\\mod n  \\] <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint josephus(int n, int k) {\n    if (n == 1) return 0;\n    return (josephus(n - 1, k) + k) % n;\n}\n\nint main() {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    int result = josephus(n, k);\n    cout &lt;&lt; result + 1 &lt;&lt; ' '; // \u8f93\u51fa\u7ed3\u679c\u52a01\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u7684\u4f4d\u7f6e\u662f\u4ece1\u5f00\u59cb\u7684\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg3-noip2010","title":"e.g.3 [NOIP2010 \u63d0\u9ad8\u7ec4] \u673a\u5668\u7ffb\u8bd1","text":"<p>\u9898\u76ee\u80cc\u666f</p> <p>NOIP2010 \u63d0\u9ad8\u7ec4 T1</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5c0f\u6668\u7684\u7535\u8111\u4e0a\u5b89\u88c5\u4e86\u4e00\u4e2a\u673a\u5668\u7ffb\u8bd1\u8f6f\u4ef6\uff0c\u4ed6\u7ecf\u5e38\u7528\u8fd9\u4e2a\u8f6f\u4ef6\u6765\u7ffb\u8bd1\u82f1\u8bed\u6587\u7ae0\u3002</p> <p>\u8fd9\u4e2a\u7ffb\u8bd1\u8f6f\u4ef6\u7684\u539f\u7406\u5f88\u7b80\u5355\uff0c\u5b83\u53ea\u662f\u4ece\u5934\u5230\u5c3e\uff0c\u4f9d\u6b21\u5c06\u6bcf\u4e2a\u82f1\u6587\u5355\u8bcd\u7528\u5bf9\u5e94\u7684\u4e2d\u6587\u542b\u4e49\u6765\u66ff\u6362\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u82f1\u6587\u5355\u8bcd\uff0c\u8f6f\u4ef6\u4f1a\u5148\u5728\u5185\u5b58\u4e2d\u67e5\u627e\u8fd9\u4e2a\u5355\u8bcd\u7684\u4e2d\u6587\u542b\u4e49\uff0c\u5982\u679c\u5185\u5b58\u4e2d\u6709\uff0c\u8f6f\u4ef6\u5c31\u4f1a\u7528\u5b83\u8fdb\u884c\u7ffb\u8bd1\uff1b\u5982\u679c\u5185\u5b58\u4e2d\u6ca1\u6709\uff0c\u8f6f\u4ef6\u5c31\u4f1a\u5728\u5916\u5b58\u4e2d\u7684\u8bcd\u5178\u5185\u67e5\u627e\uff0c\u67e5\u51fa\u5355\u8bcd\u7684\u4e2d\u6587\u542b\u4e49\u7136\u540e\u7ffb\u8bd1\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5355\u8bcd\u548c\u8bd1\u4e49\u653e\u5165\u5185\u5b58\uff0c\u4ee5\u5907\u540e\u7eed\u7684\u67e5\u627e\u548c\u7ffb\u8bd1\u3002</p> <p>\u5047\u8bbe\u5185\u5b58\u4e2d\u6709 \\(M\\) \u4e2a\u5355\u5143\uff0c\u6bcf\u5355\u5143\u80fd\u5b58\u653e\u4e00\u4e2a\u5355\u8bcd\u548c\u8bd1\u4e49\u3002\u6bcf\u5f53\u8f6f\u4ef6\u5c06\u4e00\u4e2a\u65b0\u5355\u8bcd\u5b58\u5165\u5185\u5b58\u524d\uff0c\u5982\u679c\u5f53\u524d\u5185\u5b58\u4e2d\u5df2\u5b58\u5165\u7684\u5355\u8bcd\u6570\u4e0d\u8d85\u8fc7 \\(M-1\\)\uff0c\u8f6f\u4ef6\u4f1a\u5c06\u65b0\u5355\u8bcd\u5b58\u5165\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u5185\u5b58\u5355\u5143\uff1b\u82e5\u5185\u5b58\u4e2d\u5df2\u5b58\u5165 \\(M\\) \u4e2a\u5355\u8bcd\uff0c\u8f6f\u4ef6\u4f1a\u6e05\u7a7a\u6700\u65e9\u8fdb\u5165\u5185\u5b58\u7684\u90a3\u4e2a\u5355\u8bcd\uff0c\u817e\u51fa\u5355\u5143\u6765\uff0c\u5b58\u653e\u65b0\u5355\u8bcd\u3002</p> <p>\u5047\u8bbe\u4e00\u7bc7\u82f1\u8bed\u6587\u7ae0\u7684\u957f\u5ea6\u4e3a \\(N\\) \u4e2a\u5355\u8bcd\u3002\u7ed9\u5b9a\u8fd9\u7bc7\u5f85\u8bd1\u6587\u7ae0\uff0c\u7ffb\u8bd1\u8f6f\u4ef6\u9700\u8981\u53bb\u5916\u5b58\u67e5\u627e\u591a\u5c11\u6b21\u8bcd\u5178\uff1f\u5047\u8bbe\u5728\u7ffb\u8bd1\u5f00\u59cb\u524d\uff0c\u5185\u5b58\u4e2d\u6ca1\u6709\u4efb\u4f55\u5355\u8bcd\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u5171 \\(2\\) \u884c\u3002\u6bcf\u884c\u4e2d\u4e24\u4e2a\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002</p> <p>\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570 \\(M,N\\)\uff0c\u4ee3\u8868\u5185\u5b58\u5bb9\u91cf\u548c\u6587\u7ae0\u7684\u957f\u5ea6\u3002</p> <p>\u7b2c\u4e8c\u884c\u4e3a \\(N\\) \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u6309\u7167\u6587\u7ae0\u7684\u987a\u5e8f\uff0c\u6bcf\u4e2a\u6570\uff08\u5927\u5c0f\u4e0d\u8d85\u8fc7 \\(1000\\)\uff09\u4ee3\u8868\u4e00\u4e2a\u82f1\u6587\u5355\u8bcd\u3002\u6587\u7ae0\u4e2d\u4e24\u4e2a\u5355\u8bcd\u662f\u540c\u4e00\u4e2a\u5355\u8bcd\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u5bf9\u5e94\u7684\u975e\u8d1f\u6574\u6570\u76f8\u540c\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u8f6f\u4ef6\u9700\u8981\u67e5\u8bcd\u5178\u7684\u6b21\u6570\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>3 7\n1 2 1 5 4 4 1\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>5\n</code></pre> <p>\u63d0\u793a</p> <p>\u6837\u4f8b\u89e3\u91ca</p> <p>\u6574\u4e2a\u67e5\u5b57\u5178\u8fc7\u7a0b\u5982\u4e0b\uff1a\u6bcf\u884c\u8868\u793a\u4e00\u4e2a\u5355\u8bcd\u7684\u7ffb\u8bd1\uff0c\u5192\u53f7\u524d\u4e3a\u672c\u6b21\u7ffb\u8bd1\u540e\u7684\u5185\u5b58\u72b6\u51b5\uff1a</p> <ol> <li><code>1</code>\uff1a\u67e5\u627e\u5355\u8bcd 1 \u5e76\u8c03\u5165\u5185\u5b58\u3002</li> <li><code>1 2</code>\uff1a\u67e5\u627e\u5355\u8bcd 2 \u5e76\u8c03\u5165\u5185\u5b58\u3002</li> <li><code>1 2</code>\uff1a\u5728\u5185\u5b58\u4e2d\u627e\u5230\u5355\u8bcd 1\u3002</li> <li><code>1 2 5</code>\uff1a\u67e5\u627e\u5355\u8bcd 5 \u5e76\u8c03\u5165\u5185\u5b58\u3002</li> <li><code>2 5 4</code>\uff1a\u67e5\u627e\u5355\u8bcd 4 \u5e76\u8c03\u5165\u5185\u5b58\u66ff\u4ee3\u5355\u8bcd 1\u3002</li> <li><code>2 5 4</code>\uff1a\u5728\u5185\u5b58\u4e2d\u627e\u5230\u5355\u8bcd 4\u3002</li> <li><code>5 4 1</code>\uff1a\u67e5\u627e\u5355\u8bcd 1 \u5e76\u8c03\u5165\u5185\u5b58\u66ff\u4ee3\u5355\u8bcd 2\u3002</li> </ol> <p>\u5171\u8ba1\u67e5\u4e86 \\(5\\) \u6b21\u8bcd\u5178\u3002</p> <p>\u6570\u636e\u8303\u56f4</p> <ul> <li>\u5bf9\u4e8e \\(10\\%\\) \u7684\u6570\u636e\u6709 \\(M=1\\)\uff0c\\(N \\leq 5\\)\uff1b</li> <li>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\u6709 \\(1 \\leq M \\leq 100\\)\uff0c\\(1 \\leq N \\leq 1000\\)\u3002</li> </ul> <pre><code>#include&lt;bits/stdc++.h&gt; \nusing namespace std;     \n\nint main() {\n    int M, N;           \n    cin &gt;&gt; M &gt;&gt; N;     \n    int count = 0;     \n\n    queue&lt;int&gt; Q;       // \u521b\u5efa\u961f\u5217Q\n    set&lt;int&gt; seen;      // \u521b\u5efa\u96c6\u5408seen\uff0c\u7528\u4e8e\u5feb\u901f\u5224\u65ad\u67d0\u4e2a\u6570\u662f\u5426\u5728\u7f13\u5b58\u4e2d\n\n    for (int i = 0; i &lt; N; i++) {          \n        if (seen.find(i) == seen.end()) {  // \u5982\u679c\u6570\u5b57i\u4e0d\u5728seen\u96c6\u5408\u4e2d\n                                          // seen.find()\u8fd4\u56de\u8fed\u4ee3\u5668\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8fd4\u56deseen.end()\n            Q.push(i);                    // \u5c06i\u52a0\u5165\u961f\u5217\n            seen.insert(i);               // \u5c06i\u52a0\u5165seen\u96c6\u5408\n            count++;                      // \u7f13\u5b58\u672a\u547d\u4e2d\u6b21\u6570\u52a01\n        }\n\n        if (Q.size() &gt; M) {              // \u5982\u679c\u961f\u5217\u5927\u5c0f\u8d85\u8fc7\u4e86\u9650\u5236M\n            int removed = Q.front();      // \u83b7\u53d6\u961f\u5217\u6700\u524d\u9762\u7684\u5143\u7d20\n            Q.pop();                      // \u4ece\u961f\u5217\u4e2d\u79fb\u9664\u8fd9\u4e2a\u5143\u7d20\n            seen.erase(removed);          // \u4eceseen\u96c6\u5408\u4e2d\u4e5f\u79fb\u9664\u8fd9\u4e2a\u5143\u7d20\n        }\n    }\n\n    cout &lt;&lt; count;      \n    return 0;\n}\n</code></pre> queue name \u521b\u5efa push \u961f\u5c3e\u63d2\u5165 pop \u961f\u9996\u5f39\u51fa size() \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 front() \u961f\u9996\u5143\u7d20 back() \u961f\u5c3e\u5143\u7d20"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#3stack","title":"3\u3001Stack \u6808","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg4","title":"e.g.4\u62ec\u53f7\u5e8f\u5217","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5b9a\u4e49\u5982\u4e0b\u89c4\u5219\uff1a</p> <ol> <li>\u7a7a\u4e32\u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d</li> <li>\u82e5\u5b57\u7b26\u4e32 \\(S\\) \u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d\uff0c\u90a3\u4e48 \\(\\texttt{[}S\\texttt]\\) \u548c \\(\\texttt{(}S\\texttt)\\) \u4e5f\u90fd\u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d</li> <li>\u82e5\u5b57\u7b26\u4e32 \\(A\\) \u548c \\(B\\) \u90fd\u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d\uff0c\u90a3\u4e48 \\(AB\\)\uff08\u4e24\u5b57\u7b26\u4e32\u62fc\u63a5\u8d77\u6765\uff09\u4e5f\u662f\u300c\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\u300d\u3002</li> </ol> <p>\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u5e73\u8861\u62ec\u53f7\u5e8f\u5217\uff1a</p> <ul> <li><code>()</code>\uff0c<code>[]</code>\uff0c<code>(())</code>\uff0c<code>([])</code>\uff0c<code>()[]</code>\uff0c<code>()[()]</code></li> </ul> <p>\u800c\u4ee5\u4e0b\u51e0\u4e2a\u5219\u4e0d\u662f\uff1a</p> <ul> <li><code>(</code>\uff0c<code>[</code>\uff0c<code>]</code>\uff0c<code>)(</code>\uff0c<code>())</code>\uff0c<code>([()</code></li> </ul> <p>\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u7531 <code>(</code>\uff0c<code>)</code>\uff0c<code>[</code>\uff0c<code>]</code>\u6784\u6210\u7684\u5b57\u7b26\u4e32 \\(s\\)\uff0c\u8bf7\u4f60\u6309\u7167\u5982\u4e0b\u7684\u65b9\u5f0f\u7ed9\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u914d\u5bf9\uff1a 1. \u4ece\u5de6\u5230\u53f3\u626b\u63cf\u6574\u4e2a\u5b57\u7b26\u4e32\u3002 2. \u5bf9\u4e8e\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u53f3\u62ec\u53f7\uff0c\u8003\u5bdf\u5b83\u4e0e\u5b83\u5de6\u4fa7\u79bb\u5b83\u6700\u8fd1\u7684\u672a\u5339\u914d\u7684\u7684\u5de6\u62ec\u53f7\u3002\u5982\u679c\u8be5\u62ec\u53f7\u4e0e\u4e4b\u5bf9\u5e94\uff08\u5373\u5c0f\u62ec\u53f7\u5339\u914d\u5c0f\u62ec\u53f7\uff0c\u4e2d\u62ec\u53f7\u5339\u914d\u4e2d\u62ec\u53f7\uff09\uff0c\u5219\u5c06\u4e8c\u8005\u914d\u5bf9\u3002\u5982\u679c\u5de6\u4fa7\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\u4e0d\u5b58\u5728\u6216\u4e0e\u4e4b\u4e0d\u5bf9\u5e94\uff0c\u5219\u5176\u914d\u5bf9\u5931\u8d25\u3002</p> <p>\u914d\u5bf9\u7ed3\u675f\u540e\uff0c\u5bf9\u4e8e \\(s\\) \u4e2d\u5168\u90e8\u672a\u914d\u5bf9\u7684\u62ec\u53f7\uff0c\u8bf7\u4f60\u5728\u5176\u65c1\u8fb9\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f7f\u5f97\u8be5\u62ec\u53f7\u548c\u65b0\u52a0\u7684\u62ec\u53f7\u5339\u914d\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u53ea\u6709\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a \\(s\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u4f60\u7684\u7b54\u6848\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>([()\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>()[]()\n</code></pre> <p>\u6837\u4f8b #2</p> <p>\u6837\u4f8b\u8f93\u5165 #2</p> <pre><code>([)\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa #2</p> <pre><code>()[]()\n</code></pre> <p>\u63d0\u793a</p> <p>\u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a</p> <p>\u5bf9\u4e8e\u5168\u90e8\u7684\u6d4b\u8bd5\u70b9\uff0c\u4fdd\u8bc1 \\(s\\) \u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(100\\)\uff0c\u4e14\u53ea\u542b  <code>(</code>\uff0c<code>)</code>\uff0c<code>[</code>\uff0c<code>]</code> \u56db\u79cd\u5b57\u7b26\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    string input;\n    stack&lt;int&gt; st;  // Stack will store indices instead of characters\n    vector&lt;bool&gt; matched;  // Track which positions are properly matched\n    string answer;\n\n    cin &gt;&gt; input;\n\n    // Initialize matched vector with same size as input\n    matched.resize(input.length(), false);\n\n    // First pass: Find all matching pairs\n    for (int i = 0; i &lt; input.length(); ++i) {\n        if (input[i] == '(' || input[i] == '[') {\n            st.push(i);  // Push index onto stack\n        } \n        else if (input[i] == ')' || input[i] == ']') {\n            if (!st.empty()) {\n                char opening = input[st.top()];\n                // Check if brackets match\n                if ((input[i] == ')' &amp;&amp; opening == '(') ||\n                    (input[i] == ']' &amp;&amp; opening == '[')) {\n                    // Mark both positions as matched\n                    matched[i] = true;\n                    matched[st.top()] = true;\n                    st.pop();\n                }\n            }\n        }\n    }\n\n    // Second pass: Build answer string\n    for (int i = 0; i &lt; input.length(); ++i) {\n        if (!matched[i]) {\n            // Replace unmatched brackets with their complete pairs\n            if (input[i] == '(' || input[i] == ')') {\n                answer += \"()\";\n            } else {\n                answer += \"[]\";\n            }\n        } else {\n            // Keep matched brackets as they are\n            answer += input[i];\n        }\n    }\n\n    cout &lt;&lt; answer &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#4","title":"4\u3001\u6742\u9898\uff08\u5b57\u5178\u5e8f\uff09","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg5-string-minimization","title":"e.g.5 String Minimization","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4f60\u6709\u56db\u4e2a\u957f \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(a,b,c,d\\)\u3002\u4f60\u53ef\u4ee5\u6267\u884c\u4efb\u610f\u591a\u6b21\u5982\u4e0b\u64cd\u4f5c\uff1a</p> <ul> <li>\u9009\u62e9\u4e00\u4e2a \\(i\\)\uff0c\u4ea4\u6362 \\(a_i,c_i\\)\uff0c\u7136\u540e\u4ea4\u6362 \\(b_i,d_i\\)\u3002</li> </ul> <p>\u6c42\u5728 \\(a\\) \u7684\u5b57\u5178\u5e8f\u5c3d\u91cf\u5c0f\u7684\u524d\u63d0\u4e0b\uff0c\\(b\\) \u5b57\u5178\u5e8f\u6700\u5c0f\u662f\u4ec0\u4e48\u3002</p> <p>\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u5b57\u5178\u5e8f\uff0c\u770b\u8fd9\u91cc\uff1a</p> <p>\u5bf9\u4e8e\u4e24\u4e2a\u5b57\u7b26\u4e32 \\(p,q\\)\uff0c\u79f0 \\(p\\) \u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e \\(q\\)\uff08\u8bb0\u4e3a \\(p&lt;q\\)\uff09\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u81ea\u7136\u6570 \\(k\\) \u4f7f \\(p,q\\) \u7684\u524d \\(k\\) \u4e2a\u5b57\u7b26\u76f8\u540c\u4e14 \\(p_{k+1}\\) \u7684 ASCII \u7801\u5c0f\u4e8e \\(q_{k+1}\\) \u7684 ASCII \u7801\u3002</p> <p>\u4f8b\u5982\uff1a - \\(\\texttt{abc}&lt;\\texttt{baa}\\)\uff08\u5f53 \\(k=0\\)\uff09 - \\(\\texttt{bae}&lt;\\texttt{bbb}\\)\uff08\u5f53 \\(k=1\\)\uff09</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\uff0c\u8868\u793a\u5b57\u7b26\u4e32 \\(a,b,c,d\\) \u957f\u5ea6\u3002</p> <p>\u4e4b\u540e\u56db\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5206\u522b\u8868\u793a \\(a,b,c,d\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u9898\u76ee\u8981\u6c42\u7684\u5b57\u7b26\u4e32 \\(b\\)\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>8\nwestlake\nyummyqaq\nweabzzke\nazazazaq\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>auazyqaq\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6837\u4f8b\u89e3\u91ca\u3011</p> <p>\u9009\u62e9 \\(i\\) \u4e3a \\(1,3,4\\) \u53ef\u4ee5\u8ba9 \\(a\\) \u53d6\u5230\u6700\u5c0f\u7684\u5b57\u5178\u5e8f \\(\\texttt{weablake}\\)\uff0c\u6b64\u65f6\u5b57\u7b26\u4e32 \\(b\\) \u4e5f\u5f97\u5230\u6ee1\u8db3\u9898\u610f\u6700\u5c0f\u7684\u5b57\u5178\u5e8f \\(\\texttt{auazyqaq}\\)\u3002</p> <p>\u4e8b\u5b9e\u4e0a\u5982\u679c \\(i=1\\) \u65f6\u4e0d\u64cd\u4f5c \\(a\\) \u7684\u5b57\u5178\u5e8f\u4e5f\u662f\u6700\u5c0f\u7684\uff0c\u4f46\u662f\u6b64\u65f6\u5b57\u7b26\u4e32 \\(b\\) \u5c31\u662f \\(\\texttt{yuazyqaq}\\)\uff0c\u4e0d\u591f\u5c0f\u3002</p> <p>\u3010\u6570\u636e\u8303\u56f4\u3011</p> <p>\u672c\u9898\u5171 \\(10\\) \u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u70b9 \\(10\\) \u5206\u3002</p> \u6d4b\u8bd5\u70b9\u7f16\u53f7 \\(n\\le\\) \u7279\u6b8a\u6027\u8d28 \\(1\\sim 2\\) \\(15\\) \\(3\\) \\(10^5\\) \\(a_i&gt;c_i\\) \\(4\\sim 5\\) \\(10^5\\) \\(a_i\\ne c_i\\) \\(6\\sim 7\\) \\(10^5\\) \\(b_i\\ge d_i\\) \\(8\\sim 10\\) \\(10^5\\) <p>\u5bf9\u4e8e\u5168\u4f53\u6570\u636e\uff0c\u4fdd\u8bc1 \\(1\\le n\\le 10^5\\)\uff0c\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n  int len;\n  cin &gt;&gt; len;\n  string a, b, c, d;\n  cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;\n\n  for(int i = 0; i &lt; len; i++) {\n    // \u5982\u679c\u4ea4\u6362\u540e\u80fd\u8ba9a\u6216b\u53d8\u5f97\u66f4\u5c0f\uff0c\u5c31\u8fdb\u884c\u4ea4\u6362\n    if(min(a[i], c[i]) != a[i] ||\n       (a[i] == c[i] &amp;&amp; min(b[i], d[i]) != b[i])) {\n      swap(a[i], c[i]);\n      swap(b[i], d[i]);\n       }\n  }\n\n  cout &lt;&lt; b &lt;&lt; endl;\n  return 0;\n}\n/*\n    \u6b64\u9898\u4e2d\uff0c\u6bd4\u8f83\u6574\u4f53\u5b57\u5178\u5e8f\uff1a\u6bcf\u4f4d\u6bd4\u8f83\u5373\u53ef\n    min(a[i], c[i]) != a[i]\uff1a\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u8ba9a\u53d8\u5f97\u66f4\u5c0f\n    (a[i] == c[i] &amp;&amp; min(b[i], d[i]) != b[i])\uff1a\u5f53a\u4e0d\u80fd\u518d\u53d8\u5c0f\u65f6\uff0c\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u8ba9b\u53d8\u5f97\u66f4\u5c0f\n*/\n</code></pre>"},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#_2","title":"\u4e8c\u3001\u8fed\u4ee3","text":""},{"location":"DataStruct/%E7%BB%BC%E5%90%88/#eg8-noip1998","title":"e.g.8 [NOIP1998 \u666e\u53ca\u7ec4] \u5e42\u6b21\u65b9","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u4efb\u4f55\u4e00\u4e2a\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u7528 \\(2\\) \u7684\u5e42\u6b21\u65b9\u8868\u793a\u3002\u4f8b\u5982 $137=2<sup>7+2</sup>3+2^0 $\u3002</p> <p>\u540c\u65f6\u7ea6\u5b9a\u6b21\u65b9\u7528\u62ec\u53f7\u6765\u8868\u793a\uff0c\u5373 \\(a^b\\) \u53ef\u8868\u793a\u4e3a \\(a(b)\\)\u3002</p> <p>\u7531\u6b64\u53ef\u77e5\uff0c\\(137\\) \u53ef\u8868\u793a\u4e3a \\(2(7)+2(3)+2(0)\\)</p> <p>\u8fdb\u4e00\u6b65\uff1a</p> <p>\\(7= 2^2+2+2^0\\)  ( \\(2^1\\) \u7528 \\(2\\) \u8868\u793a)\uff0c\u5e76\u4e14 \\(3=2+2^0\\)\u3002</p> <p>\u6240\u4ee5\u6700\u540e \\(137\\) \u53ef\u8868\u793a\u4e3a \\(2(2(2)+2+2(0))+2(2+2(0))+2(0)\\)\u3002</p> <p>\u53c8\u5982 \\(1315=2^{10} +2^8 +2^5 +2+1\\)</p> <p>\u6240\u4ee5 \\(1315\\) \u6700\u540e\u53ef\u8868\u793a\u4e3a \\(2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)\\)\u3002</p> <p>\u8f93\u5165\u683c\u5f0f</p> <p>\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\)\u3002</p> <p>\u8f93\u51fa\u683c\u5f0f</p> <p>\u7b26\u5408\u7ea6\u5b9a\u7684 \\(n\\) \u7684 \\(0, 2\\) \u8868\u793a\uff08\u5728\u8868\u793a\u4e2d\u4e0d\u80fd\u6709\u7a7a\u683c\uff09\u3002</p> <p>\u6837\u4f8b </p> <p>\u6837\u4f8b\u8f93\u5165 </p> <pre><code>1315\n</code></pre> <p>\u6837\u4f8b\u8f93\u51fa </p> <pre><code>2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)\n</code></pre> <p>\u63d0\u793a</p> <p>\u3010\u6570\u636e\u8303\u56f4\u3011</p> <p>\u5bf9\u4e8e \\(0100\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\le n \\le 2 \\times {10}^4\\)\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvoid divide(int x)\n{\n    bool flag = false; \n    while (x != 0)\n    {\n        int t = int(log2(x));\n\n        if (flag) cout &lt;&lt; \"+\"; \n        if (t == 1) cout &lt;&lt; \"2\"; \n        else if (t == 0) cout &lt;&lt; \"2(0)\"; \n        else\n        {\n            cout &lt;&lt; \"2(\";\n            divide(t); \n            cout &lt;&lt; \")\";\n        }\n        x -= pow(2,t); \n        flag = true;\n    }\n}\nint main() {\n    int x;\n    cin &gt;&gt; x;\n    divide(x);\n    return 0;\n}\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/","title":"1 \u3001\u76d1\u7763\u5b66\u4e60","text":"\u76d1\u7763\u5f0f\u673a\u5668\u5b66\u4e60\uff1a\u56de\u5f52\u4e0e\u5206\u7c7b       2025.2  <ul> <li>\u4e00\u3001\u56de\u5f52<ul> <li>1\u3001\u56de\u5f52\u6a21\u578b</li> <li>2\u3001\u4ee3\u4ef7\u51fd\u6570</li> <li>3\u3001\u68af\u5ea6\u4e0b\u964d</li> <li>4\u3001\u7ebf\u6027\u56de\u5f52\u7b97\u6cd5</li> <li>5\u3001\u7279\u5f81\u5de5\u7a0b<ul> <li>\uff081\uff09\u5411\u91cf\u5316</li> <li>\uff082\uff09\u591a\u5143\u7ebf\u6027\u56de</li> <li>\uff083\uff09\u7279\u5f81\u7f29\u653e<ul> <li>\u2160.\u5747\u503c\u5f52\u4e00\u5316\uff08Mean-Normalization)</li> <li>\u2161.\u6807\u51c6\u5316\uff08Z-Score Standardization\uff09</li> </ul> </li> <li>\uff084\uff09\u591a\u9879\u5f0f\u56de\u5f52</li> </ul> </li> </ul> </li> <li>\u4e8c\u3001\u5206\u7c7b<ul> <li>1\u3001\u903b\u8f91\uff08Logistic\uff09\u56de\u5f52</li> <li>2\u3001\\(Sigmoid\\) \u51fd\u6570</li> <li>3\u3001\u51b3\u7b56\u8fb9\u754c</li> <li>4\u3001\u4ee3\u4ef7\u51fd\u6570</li> <li>5\u3001\u68af\u5ea6\u4e0b\u964d</li> </ul> </li> <li>\u4e09\u3001\u8fc7\u62df\u5408\u548c\u6b63\u5219\u5316<ul> <li>1\u3001\u8fc7\u62df\u5408\u95ee\u9898</li> <li>2\u3001\u6b63\u5219\u5316<ul> <li>\uff081\uff09 \u8bef\u5dee\u9879\uff08\u5747\u65b9\u8bef\u5dee MSE\uff09</li> <li>\uff082\uff09 \u6b63\u5219\u5316\u9879\uff08L2 \u6b63\u5219\u5316/Ridge \u6b63\u5219\u5316\uff09</li> </ul> </li> <li>3\u3001\u5e94\u7528<ul> <li>\uff081\uff09\u7ebf\u6027\u56de\u5f52</li> <li>\uff082\uff09\u903b\u8f91\u56de\u5f52</li> </ul> </li> </ul> </li> <li>\u56db\u3001Scikit-Learn<ul> <li>1\u3001\u62df\u5408\u6a21\u578b</li> <li>2\u3001\u8fdb\u884c\u9884\u6d4b</li> <li>3\u3001\u8ba1\u7b97\u51c6\u786e\u7387</li> </ul> </li> </ul>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#_1","title":"\u4e00\u3001\u56de\u5f52","text":"\u76d1\u7763 \u975e\u76d1\u7763 \u6709\u7b54\u6848 \u6ca1\u6709\u7b54\u6848 \u56de\u5f52\u6a21\u578b \u5206\u7c7b\u6a21\u578b \u7ebf\u6027\u56de\u5f52\uff0c\u9884\u6d4b\u8f93\u51fa \u9884\u6d4b\u7c7b\u522b\uff0c\u6709\u9650\u53ef\u80fd\u8f93\u51fa <p>Tip</p> <p>\\(x\\) \u8f93\u5165\u53d8\u91cf</p> <p>\\(y\\) \u8f93\u51fa\u53d8\u91cf</p> <p>\\((x,y)\\) \u5355\u4e2a\u8bad\u7ec3\u6837\u672c</p> <p>\\((x^{i}, y^{i})\\) \u7b2c\u51e0\u4e2a\u8bad\u7ec3\u6837\u672c\uff08\u7b2c\u51e0\u884c\uff09</p>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#1","title":"1\u3001\u56de\u5f52\u6a21\u578b","text":"<ul> <li>\\(\u0177\\) \u662f \\(y\\) \u7684\u9884\u6d4b\u503c</li> </ul>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#2","title":"2\u3001\u4ee3\u4ef7\u51fd\u6570","text":"\\[ J(\\theta) = \\frac{1}{2m} \\sum_{i=1}^{m} \\left( f_{(w,b)}x^{(i)} - y^{(i)} \\right)^2 \\] <ul> <li>\u6a21\u578b\uff1a \\(f=wx+b\\)  \u2192 \u7ebf\u6027\u56de\u5f52 \\(f=wx,(b=0)\\)</li> <li>\u53c2\u6570\uff1a  \\(w,b\\)</li> <li>\u635f\u5931\u51fd\u6570\uff1a\\(J(\\theta) = \\frac{1}{2m} \\sum_{i=1}^{m} \\left( f_{(w,b)}x^{(i)} - y^{(i)} \\right)^2\\)</li> <li>\u76ee\u6807\uff1a  \\(minimize \\text{      } J(w,b)\\)</li> </ul> <pre><code>#Function to calculate the cost\ndef compute_cost(x, y, w, b):\n\n    m = x.shape[0] \n    cost = 0\n\n    for i in range(m):\n        f_wb = w * x[i] + b\n        cost = cost + (f_wb - y[i])**2\n    total_cost = 1 / (2 * m) * cost\n\n    return total_cost\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#3","title":"3\u3001\u68af\u5ea6\u4e0b\u964d","text":"<p>\u65b9\u6cd5\u4e0d\u6b62\u9002\u7528\u4e8e\u7ebf\u6027\u56de\u5f52\uff0c\u6bcf\u6b21\u5bfb\u627e\u80fd\u591f\u4e0b\u964d\u6700\u591a\u7684\u65b9\u5411</p> <p>\\(\\omega:=\\omega\u2212\\frac{d}{d\\omega}J(\\omega,b)\\)</p> <p>\\(b:=b\u2212\\frac{d}{db}J(\\omega,b)\\)</p> <p>\\(\\alpha : \u5b66\u4e60\u7387\uff0c\u5373\u6b65\u957f,\u8bbe\u7f6e\u5408\u9002\u7684\u5b66\u4e60\u7387\u6709\u52a9\u4e8e\u66f4\u597d\u7684\u62df\u5408\\)</p> <pre><code># load the dataset\nX_train, y_train = load_house_data()\nX_features = ['size(sqft)','bedrooms','floors','age']\nfig,ax=plt.subplots(1, 4, figsize=(12, 3), sharey=True)\nfor i in range(len(ax)):\n    ax[i].scatter(X_train[:,i],y_train)\n    ax[i].set_xlabel(X_features[i])\nax[0].set_ylabel(\"Price (1000's)\")\nplt.show()\n#set alpha to 9.9e-7\n_, _, hist = run_gradient_descent(X_train, y_train, 10, alpha = 9.9e-7)\n</code></pre> <pre><code>plot_cost_i_w(X_train, y_train, hist)\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#4","title":"4\u3001\u7ebf\u6027\u56de\u5f52\u7b97\u6cd5","text":"<p>Note</p> <ul> <li> <p>\u7ebf\u6027\u56de\u5f52\u6a21\u578b  $$  f_{w,b}(x) = wx + b  $$</p> </li> <li> <p>\u4ee3\u4ef7\u65b9\u7a0b  $$  J(w, b) = \\frac{1}{2m} \\sum_{i=1}^{m} \\left( f_{w,b}(x^{(i)}) - y^{(i)} \\right)^2  $$</p> </li> <li> <p>\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5</p> <ul> <li>\u91cd\u590d\u76f4\u5230\u6536\u655b:</li> </ul> </li> </ul> <p>$$  w = w - \\alpha \\frac{\\partial}{\\partial w} J(w, b)  $$</p> <p>$$  b = b - \\alpha \\frac{\\partial}{\\partial b} J(w, b)  $$</p> <ul> <li>\u68af\u5ea6\u8ba1\u7b97\uff08\u4ee3\u4ef7\u65b9\u7a0b\u7684\u504f\u5bfc\uff09  $$  \\frac{\\partial}{\\partial w} J(w, b) = \\frac{1}{m} \\sum_{i=1}^{m} \\left( f_{w,b}(x^{(i)}) - y^{(i)} \\right) x^{(i)}  $$</li> </ul> <p>\u6279\u91cf\u68af\u5ea6\u4e0b\u964d\uff08Batch Linear Regression\uff09</p>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#5","title":"5\u3001\u7279\u5f81\u5de5\u7a0b","text":""},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#1_1","title":"\uff081\uff09\u5411\u91cf\u5316","text":"<p>\\(f(w,b)=w_1x_1+w_2x_2+w_3x_3+\u2026\u2026\u2026+w_nx_n+b\\) $$ f = \\vec{w}\u00b7 \\vec{x} + b $$</p> <pre><code>#  \u5411\u91cf\u5316\nf = np.dot(w,x) + b\n#  \u65e0\u5411\u91cf\u5316\nfor j in range (0,16) : \n    f = f + w[j] * x[j]\n</code></pre> <p>\u5e76\u884c\u8fd0\u884c\uff0c\u6548\u7387\u66f4\u9ad8</p> <p>Example</p> <pre><code>np.random.seed(1)\na = np.random.rand(10000000)  # very large arrays\nb = np.random.rand(10000000)\n\ntic = time.time()  # capture start time\nc = np.dot(a, b)\ntoc = time.time()  # capture end time\n\nprint(f\"np.dot(a, b) =  {c:.4f}\")\nprint(f\"Vectorized version duration: {1000*(toc-tic):.4f} ms \")\n\ntic = time.time()  # capture start time\nc = my_dot(a,b)\ntoc = time.time()  # capture end time\n\nprint(f\"my_dot(a, b) =  {c:.4f}\")\nprint(f\"loop version duration: {1000*(toc-tic):.4f} ms \")\n\ndel(a);del(b)  #remove these big arrays from memory\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#2_1","title":"\uff082\uff09\u591a\u5143\u7ebf\u6027\u56de","text":"\u7279\u5f81\u6570 \u6743\u91cd\u66f4\u65b0\u516c\u5f0f \u504f\u7f6e\u9879\u66f4\u65b0\u516c\u5f0f \u5355\u53d8\u91cf \\(w = w - \\alpha \\frac{1}{m} \\sum\\limits_{i=1}^{m} ( f_{w,b}(x^{(i)}) - y^{(i)} ) x^{(i)}\\) \\(b = b - \\alpha \\frac{1}{m} \\sum\\limits_{i=1}^{m} ( f_{w,b}(x^{(i)}) - y^{(i)} )\\) \u591a\u53d8\u91cf \\(w_j = w_j - \\alpha \\frac{1}{m} \\sum\\limits_{i=1}^{m} ( f_{\\vec{w},b}(\\vec{x}^{(i)}) - y^{(i)} ) x_j^{(i)}\\) \\(b = b - \\alpha \\frac{1}{m} \\sum\\limits_{i=1}^{m} ( f_{\\vec{w},b}(\\vec{x}^{(i)}) - y^{(i)} )\\) Danger <ul> <li>\u6b63\u89c4\u65b9\u7a0b(Normal Equation)\uff1a\u53ea\u80fd\u7528\u4e8e\u7ebf\u6027\u56de\u5f52\uff0c\u4e0d\u7528\u8fed\u4ee3\u6c42\u89e3 \\(w,b\\)  \u200b  </li> <li>\u7f3a\u70b9\uff1a\u6162\uff0c\u4e0d\u80fd\u7528\u4e8e\u5176\u4ed6\u7b97\u6cd5</li> </ul> <pre><code>import numpy as np\n\n# \u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u7279\u5f81\u77e9\u9635 X \u548c\u76ee\u6807\u5411\u91cf y\n# X \u7684\u6bcf\u4e00\u884c\u4ee3\u8868\u4e00\u4e2a\u6837\u672c\uff0c\u6bcf\u4e00\u5217\u4ee3\u8868\u4e00\u4e2a\u7279\u5f81\n# y \u662f\u76ee\u6807\u53d8\u91cf\u7684\u503c\n\ndef normal_equation(X, y):\n    # \u5728\u7279\u5f81\u77e9\u9635 X \u7684\u524d\u9762\u52a0\u4e00\u5217\u5168\u4e3a 1 \u7684\u5217\uff0c\u4ee5\u4fbf\u8ba1\u7b97\u504f\u7f6e\u9879\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n\n    # \u8ba1\u7b97\u6b63\u89c4\u65b9\u7a0b\u7684\u89e3\n    theta = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)\n    return theta\n\n# \u793a\u4f8b\u6570\u636e\nX = np.array([[1, 2], [2, 3], [3, 4]])  # \u7279\u5f81\u77e9\u9635\ny = np.array([5, 7, 9])  # \u76ee\u6807\u53d8\u91cf\n\ntheta = normal_equation(X, y)\nprint(\"\u6a21\u578b\u7684\u53c2\u6570:\", theta)\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#3_1","title":"\uff083\uff09\u7279\u5f81\u7f29\u653e","text":"<p>\u8ba9\u591a\u4e2a\u53d8\u91cf\u8303\u56f4\u7c7b\u4f3c\uff0c\u91cd\u65b0\u7f29\u653e\u7279\u5f81\u53ef\u4ee5\u52a0\u5feb\u68af\u5ea6\u4e0b\u964d\u901f\u5ea6\uff08\u6570\u636e\u9884\u5904\u7406\uff09</p>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#imean-normalization","title":"\u2160.\u5747\u503c\u5f52\u4e00\u5316\uff08Mean-Normalization)","text":"<ul> <li>\\(x_{normalized}=\\frac{x-\u03bc}{max(x)\u2212min(x)}\\)</li> </ul> <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(\u03bc\\) \u662f\u7279\u5f81 \\(x\\) \u7684\u5747\u503c\u3002</li> </ul> <pre><code>from sklearn.preprocessing import MinMaxScaler\nimport numpy as np\n\n# \u793a\u4f8b\u6570\u636e\uff1a\u7279\u5f81\u77e9\u9635 X\nX = np.array([[1, 2], [2, 3], [3, 4]])\n\n# \u521b\u5efa MinMaxScaler \u5bf9\u8c61\uff0c\u6307\u5b9a\u7279\u5b9a\u7684\u8303\u56f4 (\u9ed8\u8ba4\u8303\u56f4\u662f [0, 1])\nscaler = MinMaxScaler(feature_range=(-1, 1))\n\n# \u62df\u5408\u5e76\u8f6c\u6362\u6570\u636e\nX_normalized = scaler.fit_transform(X)\n\n# \u8f93\u51fa\u5f52\u4e00\u5316\u540e\u7684\u6570\u636e\nprint(\"\u5747\u503c\u5f52\u4e00\u5316\u540e\u7684\u6570\u636e\uff1a\")\nprint(X_normalized)\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#iiz-score-standardization","title":"\u2161.\u6807\u51c6\u5316\uff08Z-Score Standardization\uff09","text":"<ul> <li>\\(z=\\frac{x-\u03bc}{\\sigma}\\)</li> </ul> <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(\\mu\\) \u662f\u6570\u636e\u7684\u5747\u503c\uff0c</li> <li>\\(\\sigma\\) \u662f\u6570\u636e\u7684\u6807\u51c6\u5dee\u3002</li> </ul> <pre><code>import numpy as np\nfrom scipy import stats\n\n# \u793a\u4f8b\u6570\u636e\nX = np.array([10, 20, 30, 40, 50])\n\n# \u8ba1\u7b97 Z-score\nz_scores = stats.zscore(X)\nprint(\"Z-scores:\", z_scores)\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#4_1","title":"\uff084\uff09\u591a\u9879\u5f0f\u56de\u5f52","text":"<p>\u5728\u539f\u6765\u57fa\u7840\u4e0a\u52a0\u5165\u5176\u4ed6\u6b21\u9879\u6765\u4f7f\u5176\u66f4\u52a0\u62df\u5408\u66f2\u7ebf</p> <p>Example</p> <pre><code>x = np.arange(0,20,1)\ny = np.cos(x/2)\n\nX = np.c_[x, x**2, x**3,x**4, x**5, x**6, x**7, x**8, x**9, x**10, x**11, x**12, x**13]\nX = zscore_normalize_features(X) \n\nmodel_w,model_b = run_gradient_descent_feng(X, y, iterations=1000000, alpha = 1e-1)\n\nplt.scatter(x, y, marker='x', c='r', label=\"Actual Value\"); plt.title(\"Normalized x x**2, x**3 feature\")\nplt.plot(x,X@model_w + model_b, label=\"Predicted Value\"); plt.xlabel(\"x\"); plt.ylabel(\"y\"); plt.legend(); plt.show()\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#_2","title":"\u4e8c\u3001\u5206\u7c7b","text":""},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#1logistic","title":"1\u3001\u903b\u8f91\uff08Logistic\uff09\u56de\u5f52","text":"<p>\u4e8c\u5143\u5206\u7c7b</p> <pre><code>false - 0\ntrue - 1\n</code></pre> <p>\u8fd9\u65f6\u7ebf\u6027\u56de\u5f52\u4e0d\u518d\u9002\u7528\uff0c\u9700\u8981\u9009\u62e9\u65b0\u7684\u51fd\u6570\u6765\u5212\u5206</p>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#2sigmoid","title":"2\u3001\\(Sigmoid\\) \u51fd\u6570","text":"<pre><code># Plot sigmoid(z) over a range of values from -10 to 10\nz = np.arange(-10,11)\n\nfig,ax = plt.subplots(1,1,figsize=(5,3))\n# Plot z vs sigmoid(z)\nax.plot(z, sigmoid(z), c=\"b\")\n\nax.set_title(\"Sigmoid function\")\nax.set_ylabel('sigmoid(z)')\nax.set_xlabel('z')\ndraw_vthresh(ax,0)\n</code></pre> \\[ z= \\vec w\u00b7\\vec x + b \\] \\[ g(z) = \\frac{1}{1 + e^{-z}}=\\frac{1}{1+e^{-(\\vec w\u00b7 \\vec x +b)}} \\] <ul> <li>\u8f93\u51fa\u4e3a\u662f\\(1/0\\) \u7684\u53ef\u80fd\u6027\u5927\u5c0f</li> <li>\\(P(y=0)+P(y=1)=1\\)</li> </ul> <pre><code>import numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\n# \u793a\u4f8b\nx = np.array([-2, -1, 0, 1, 2])\nprint(sigmoid(x))\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#3_2","title":"3\u3001\u51b3\u7b56\u8fb9\u754c","text":"<p>\\(z=\\vec w\u00b7 \\vec x +b = 0\\)</p> <p>\u53ef\u4ee5\u662f\u7ebf\u6027\u7684\u4e5f\u53ef\u4ee5\u662f\u591a\u9879\u5f0f\u51fd\u6570\uff0c\u6700\u540e\u7684\u8fb9\u754c\u4e5f\u76f8\u5e94\u7684\u662f\u76f4\u7ebf\u6216\u8005\u5176\u4ed6\u5f62\u72b6</p> <pre><code># Choose values between 0 and 6\nx0 = np.arange(0,6)\n\nx1 = 3 - x0\nfig,ax = plt.subplots(1,1,figsize=(5,4))\n# Plot the decision boundary\nax.plot(x0,x1, c=\"b\")\nax.axis([0, 4, 0, 3.5])\n\n# Fill the region below the line\nax.fill_between(x0,x1, alpha=0.2)\n\n# Plot the original data\nplot_data(X,y,ax)\nax.set_ylabel(r'$x_1$')\nax.set_xlabel(r'$x_0$')\nplt.show()\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#4_2","title":"4\u3001\u4ee3\u4ef7\u51fd\u6570","text":"\u7ebf\u6027\u56de\u5f52 \u903b\u8f91\u56de\u5f52 \u6a21\u578b \\(f(\\vec x )=\\vec w \u00b7\\vec x +b\\) \\(f(\\vec x )=\\frac{1}{1+e^{-(\\vec w\u00b7 \\vec x +b)}}\\) \u4ee3\u4ef7\u51fd\u6570 \\(J(w, b) = \\frac{1}{2m} \\sum_{i=1}^{m} \\left( f_{w,b}(x^{(i)}) - y^{(i)} \\right)^2\\) \\(J(w, b) = \\frac{1}{m} \\sum_{i=1}^{m} L(f_{\\vec w,b}(\\vec x^{(i)}),y^{(i)})\\) \u5f62\u72b6 \u51f9\u51fd\u6570 \u51f9\u51fd\u6570 \u662f\u5426\u53ef\u4ee5\u68af\u5ea6\u4e0b\u964d \u221a \u221a \\[ f(\\vec x )=\\frac{1}{1+e^{-(\\vec w\u00b7 \\vec x +b)}} \\] \\[ L\\left(f_{\\vec{w},b}(\\vec{x}^{(i)}), y^{(i)}\\right) = \\begin{cases}     -\\log \\left( f_{\\vec{w},b}(\\vec{x}^{(i)}) \\right), &amp; \\text{if } y^{(i)} = 1 \\\\     -\\log \\left(1 - f_{\\vec{w},b}(\\vec{x}^{(i)}) \\right), &amp; \\text{if } y^{(i)} = 0 \\end{cases} \\] <p>Bug</p> <p>\u5982\u679c\u5728\u903b\u8f91\u56de\u5f52\u4e2d\u4f7f\u7528\u539f\u6765\u7684\u6a21\u578b\u51fd\u6570\uff0c\u5f97\u5230\u7684\u5e76\u975e\u51f9\u51fd\u6570\uff0c\u4e5f\u65e0\u6cd5\u4f7f\u7528\u68af\u5ea6\u4e0b\u964d\u6cd5\u5bfb\u627e\u6700\u5c0f\u503c</p> \u7ebf\u6027\u56de\u5f52\u51fd\u6570 \u903b\u8f91\u56de\u5f52\u51fd\u6570 <p>Tip</p> <ul> <li>\u7d27\u51d1\u8868\u8fbe</li> </ul> \\[ L\\left(f_{\\vec{w},b}(\\vec{x}^{(i)}), y^{(i)}\\right) = -y^{(i)} \\log \\left( f_{\\vec{w},b}(\\vec{x}^{(i)}) \\right) -(1 - y^{(i)}) \\log \\left(1 - f_{\\vec{w},b}(\\vec{x}^{(i)}) \\right) \\]"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#5_1","title":"5\u3001\u68af\u5ea6\u4e0b\u964d","text":"<p>\u601d\u8def\u548c\u56de\u5f52\u6a21\u578b\u4e00\u6837\uff0c\u533a\u522b\u5728\u4e8e\\(f\\) \u7684\u9009\u62e9\u4e0d\u540c</p> <pre><code>def gradient_descent(X, y, w_in, b_in, alpha, num_iters): \n    \"\"\"\n    Performs batch gradient descent\n\n    Args:\n      X (ndarray (m,n)   : Data, m examples with n features\n      y (ndarray (m,))   : target values\n      w_in (ndarray (n,)): Initial values of model parameters  \n      b_in (scalar)      : Initial values of model parameter\n      alpha (float)      : Learning rate\n      num_iters (scalar) : number of iterations to run gradient descent\n\n    Returns:\n      w (ndarray (n,))   : Updated values of parameters\n      b (scalar)         : Updated value of parameter \n    \"\"\"\n    # An array to store cost J and w's at each iteration primarily for graphing later\n    J_history = []\n    w = copy.deepcopy(w_in)  #avoid modifying global w within function\n    b = b_in\n\n    for i in range(num_iters):\n        # Calculate the gradient and update the parameters\n        dj_db, dj_dw = compute_gradient_logistic(X, y, w, b)   \n\n        # Update Parameters using w, b, alpha and gradient\n        w = w - alpha * dj_dw               \n        b = b - alpha * dj_db               \n\n        # Save cost J at each iteration\n        if i&lt;100000:      # prevent resource exhaustion \n            J_history.append( compute_cost_logistic(X, y, w, b) )\n\n        # Print cost every at intervals 10 times or as many iterations if &lt; 10\n        if i% math.ceil(num_iters / 10) == 0:\n            print(f\"Iteration {i:4d}: Cost {J_history[-1]}   \")\n\n    return w, b, J_history         #return final w,b and J history for graphing\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#_3","title":"\u4e09\u3001\u8fc7\u62df\u5408\u548c\u6b63\u5219\u5316","text":""},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#1_2","title":"1\u3001\u8fc7\u62df\u5408\u95ee\u9898","text":"\u6cdb\u5316\u80fd\u529b \u5bf9\u5e94\u95ee\u9898 \u6b20\u62df\u5408 \u9ad8\u504f\u5dee\uff08high bias) \u6cdb\u5316\uff08generalization\uff09 \u8fc7\u62df\u5408 \u9ad8\u65b9\u5dee\uff08high variance\uff09 <p>\u89e3\u51b3\uff1a</p> <ul> <li>\u6536\u96c6\u66f4\u591a\u6570\u636e</li> <li>\u9009\u62e9\u5408\u9002\u7684\u7279\u5f81</li> <li>\u4f7f\u7528\u6b63\u5219\u5316\u51cf\u5c0f\u67d0\u4e9b\u53c2\u6570\u7684\u503c</li> </ul>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#2_2","title":"2\u3001\u6b63\u5219\u5316","text":"<p>\u5e26\u6b63\u5219\u5316\u9879\u7684\u5747\u65b9\u8bef\u5dee\uff08MSE\uff09\u635f\u5931\u51fd\u6570</p> \\[ J(\\vec{w}, b) = \\frac{1}{2m} \\sum_{i=1}^{m} (f_{\\vec{w},b}(\\vec{x}^{(i)}) - y^{(i)})^2 + \\frac{\\lambda}{2m} \\sum_{j=1}^{n} w_j^2 \\]"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#1-mse","title":"\uff081\uff09 \u8bef\u5dee\u9879\uff08\u5747\u65b9\u8bef\u5dee MSE\uff09","text":"<ul> <li>\u7528\u4e8e\u8861\u91cf\u9884\u6d4b\u503c\u4e0e\u771f\u5b9e\u503c\u7684\u5dee\u8ddd</li> </ul> \\[ \\frac{1}{2m} \\sum_{i=1}^{m} (f_{\\vec{w},b}(\\vec{x}^{(i)}) - y^{(i)})^2 \\]"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#2-l2-ridge","title":"\uff082\uff09 \u6b63\u5219\u5316\u9879\uff08L2 \u6b63\u5219\u5316/Ridge \u6b63\u5219\u5316\uff09","text":"\\[ \\frac{\\lambda}{2m} \\sum_{j=1}^{n} w_j^2 \\] <ul> <li> <p>\u8fd9\u90e8\u5206\u7684\u4f5c\u7528\u662f \u60e9\u7f5a\u8fc7\u5927\u7684\u6743\u91cd \\(w_j\\)\uff0c\u4ece\u800c\u8ba9\u6a21\u578b\u66f4\u7b80\u5355\uff0c\u907f\u514d\u8fc7\u62df\u5408\u3002</p> </li> <li> <p>\u03bb\uff08lambda\uff09 \u63a7\u5236\u6b63\u5219\u5316\u5f3a\u5ea6\uff1a</p> </li> <li>\u5982\u679c \u03bb \u592a\u5927\uff0c\u6a21\u578b\u53ef\u80fd\u4f1a\u6b20\u62df\u5408\uff08underfitting\uff09\u3002</li> <li>\u5982\u679c \u03bb \u592a\u5c0f\uff0c\u6b63\u5219\u5316\u6548\u679c\u4e0d\u660e\u663e\uff0c\u53ef\u80fd\u4f1a\u8fc7\u62df\u5408\uff08overfitting\uff09\u3002</li> </ul>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#3_3","title":"3\u3001\u5e94\u7528","text":""},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#1_3","title":"\uff081\uff09\u7ebf\u6027\u56de\u5f52","text":"<pre><code>def compute_cost_linear_reg(X, y, w, b, lambda_ = 1):\n    \"\"\"\n    Computes the cost over all examples\n    Args:\n      X (ndarray (m,n): Data, m examples with n features\n      y (ndarray (m,)): target values\n      w (ndarray (n,)): model parameters  \n      b (scalar)      : model parameter\n      lambda_ (scalar): Controls amount of regularization\n    Returns:\n      total_cost (scalar):  cost \n    \"\"\"\n\n    m  = X.shape[0]\n    n  = len(w)\n    cost = 0.\n    for i in range(m):\n        f_wb_i = np.dot(X[i], w) + b                                   #(n,)(n,)=scalar, see np.dot\n        cost = cost + (f_wb_i - y[i])**2                               #scalar             \n    cost = cost / (2 * m)                                              #scalar  \n\n    reg_cost = 0\n    for j in range(n):\n        reg_cost += (w[j]**2)                                          #scalar\n    reg_cost = (lambda_/(2*m)) * reg_cost                              #scalar\n\n    total_cost = cost + reg_cost                                       #scalar\n    return total_cost                                                  #scalar\n</code></pre> <pre><code>def compute_gradient_linear_reg(X, y, w, b, lambda_): \n    \"\"\"\n    Computes the gradient for linear regression \n    Args:\n      X (ndarray (m,n): Data, m examples with n features\n      y (ndarray (m,)): target values\n      w (ndarray (n,)): model parameters  \n      b (scalar)      : model parameter\n      lambda_ (scalar): Controls amount of regularization\n\n    Returns:\n      dj_dw (ndarray (n,)): The gradient of the cost w.r.t. the parameters w. \n      dj_db (scalar):       The gradient of the cost w.r.t. the parameter b. \n    \"\"\"\n    m,n = X.shape           #(number of examples, number of features)\n    dj_dw = np.zeros((n,))\n    dj_db = 0.\n\n    for i in range(m):                             \n        err = (np.dot(X[i], w) + b) - y[i]                 \n        for j in range(n):                         \n            dj_dw[j] = dj_dw[j] + err * X[i, j]               \n        dj_db = dj_db + err                        \n    dj_dw = dj_dw / m                                \n    dj_db = dj_db / m   \n\n    for j in range(n):\n        dj_dw[j] = dj_dw[j] + (lambda_/m) * w[j]\n\n    return dj_db, dj_dw\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#2_3","title":"\uff082\uff09\u903b\u8f91\u56de\u5f52","text":"<pre><code>def compute_cost_logistic_reg(X, y, w, b, lambda_ = 1):\n    \"\"\"\n    Computes the cost over all examples\n    Args:\n    Args:\n      X (ndarray (m,n): Data, m examples with n features\n      y (ndarray (m,)): target values\n      w (ndarray (n,)): model parameters  \n      b (scalar)      : model parameter\n      lambda_ (scalar): Controls amount of regularization\n    Returns:\n      total_cost (scalar):  cost \n    \"\"\"\n\n    m,n  = X.shape\n    cost = 0.\n    for i in range(m):\n        z_i = np.dot(X[i], w) + b                                      #(n,)(n,)=scalar, see np.dot\n        f_wb_i = sigmoid(z_i)                                          #scalar\n        cost +=  -y[i]*np.log(f_wb_i) - (1-y[i])*np.log(1-f_wb_i)      #scalar\n\n    cost = cost/m                                                      #scalar\n\n    reg_cost = 0\n    for j in range(n):\n        reg_cost += (w[j]**2)                                          #scalar\n    reg_cost = (lambda_/(2*m)) * reg_cost                              #scalar\n\n    total_cost = cost + reg_cost                                       #scalar\n    return total_cost                                                  #scalar\n</code></pre> <pre><code>def compute_gradient_logistic_reg(X, y, w, b, lambda_): \n    \"\"\"\n    Computes the gradient for linear regression \n\n    Args:\n      X (ndarray (m,n): Data, m examples with n features\n      y (ndarray (m,)): target values\n      w (ndarray (n,)): model parameters  \n      b (scalar)      : model parameter\n      lambda_ (scalar): Controls amount of regularization\n    Returns\n      dj_dw (ndarray Shape (n,)): The gradient of the cost w.r.t. the parameters w. \n      dj_db (scalar)            : The gradient of the cost w.r.t. the parameter b. \n    \"\"\"\n    m,n = X.shape\n    dj_dw = np.zeros((n,))                            #(n,)\n    dj_db = 0.0                                       #scalar\n\n    for i in range(m):\n        f_wb_i = sigmoid(np.dot(X[i],w) + b)          #(n,)(n,)=scalar\n        err_i  = f_wb_i  - y[i]                       #scalar\n        for j in range(n):\n            dj_dw[j] = dj_dw[j] + err_i * X[i,j]      #scalar\n        dj_db = dj_db + err_i\n    dj_dw = dj_dw/m                                   #(n,)\n    dj_db = dj_db/m                                   #scalar\n\n    for j in range(n):\n        dj_dw[j] = dj_dw[j] + (lambda_/m) * w[j]\n\n    return dj_db, dj_dw  \n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#scikit-learn","title":"\u56db\u3001Scikit-Learn","text":"<pre><code>import numpy as np\n\nX = np.array([[0.5, 1.5], [1,1], [1.5, 0.5], [3, 0.5], [2, 2], [1, 2.5]])\ny = np.array([0, 0, 0, 1, 1, 1])\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#1_4","title":"1\u3001\u62df\u5408\u6a21\u578b","text":"<p>\u4e0b\u9762\u7684\u4ee3\u7801\u4ece Scikit-Learn\u5bfc\u5165\u903b\u8f91\u56de\u5f52\u6a21\u578b\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 <code>fit</code> \u51fd\u6570\uff0c\u5728\u8bad\u7ec3\u6570\u636e\u4e0a\u62df\u5408\u8be5\u6a21\u578b\u3002</p> <pre><code>from sklearn.linear_model import LogisticRegression\n\nlr_model = LogisticRegression()\nlr_model.fit(X, y)\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#2_4","title":"2\u3001\u8fdb\u884c\u9884\u6d4b","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 <code>predict</code> \u51fd\u6570\uff0c\u67e5\u770b\u8be5\u6a21\u578b\u7684\u9884\u6d4b\u7ed3\u679c\u3002</p> <pre><code>y_pred = lr_model.predict(X)\nprint(\"\u8bad\u7ec3\u96c6\u4e0a\u7684\u9884\u6d4b\u7ed3\u679c:\", y_pred)\n</code></pre>"},{"location":"ML/1%20%E3%80%81%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/#3_4","title":"3\u3001\u8ba1\u7b97\u51c6\u786e\u7387","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 <code>score</code> \u51fd\u6570\u6765\u8ba1\u7b97\u8be5\u6a21\u578b\u7684\u51c6\u786e\u7387\u3002</p> <pre><code>print(\"\u8bad\u7ec3\u96c6\u4e0a\u7684\u51c6\u786e\u7387:\", lr_model.score(X, y))\n</code></pre>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/","title":"2 \u3001\u9ad8\u7ea7\u5b66\u4e60\u7b97\u6cd5","text":"\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5       2025.2  <ul> <li>\u4e00\u3001\u795e\u7ecf\u7f51\u7edc<ul> <li>1\u3001\u795e\u7ecf\u5143</li> <li>2\u3001\u524d\u5411\u4f20\u64ad</li> <li>3\u3001tensorflow\u7684Keras\u5e93</li> <li>4\u3001numpy\u786c\u7f16\u7801</li> <li>5\u3001\u8bad\u7ec3\u6b65\u9aa4</li> <li>6\u3001\u6fc0\u6d3b\u51fd\u6570</li> </ul> </li> <li>\u4e8c\u3001\u591a\u7c7b<ul> <li>1\u3001Softmax\u56de\u5f52\u6a21\u578b</li> <li>2\u3001Softmax\u5b9e\u73b0</li> <li>3\u3001\u6539\u8fdb</li> <li>4\u3001\u591a\u4e2a\u8f93\u51fa\u7684\u5206\u7c7b</li> <li>5\u3001\u9ad8\u7ea7\u4f18\u5316\u65b9\u6cd5</li> <li>6\u3001\u5176\u4ed6\u7c7b\u578b\u7684\u5c42</li> </ul> </li> <li>\u4e09\u3001\u6a21\u578b\u8bc4\u4f30<ul> <li>1\u3001\u6a21\u578b<ul> <li>\uff081\uff09\u56de\u5f52</li> <li>\uff082\uff09\u5206\u7c7b</li> </ul> </li> <li>2\u3001\u6a21\u578b\u9009\u62e9\u548c\u4ea4\u53c9\u9a8c\u8bc1\u6d4b\u8bd5\u96c6</li> <li>3\u3001\u5efa\u7acb\u8868\u73b0\u57fa\u51c6</li> <li>4\u3001\u5b66\u4e60\u66f2\u7ebf</li> <li>5\u3001\u5b9e\u73b0</li> </ul> </li> </ul>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#_1","title":"\u4e00\u3001\u795e\u7ecf\u7f51\u7edc","text":""},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#1","title":"1\u3001\u795e\u7ecf\u5143","text":"<p>\u795e\u7ecf\u5143\u63a5\u53d7\u8f93\u5165\u7ed9\u51fa\u8f93\u51fa</p> <pre><code>graph LR\n    D[x] --&gt; E[f]\n    E --&gt; G[a]</code></pre> <ul> <li>\u795e\u7ecf\u7f51\u7edc\u67b6\u6784\u5e38\u5e38\u4f1a\u6709\u591a\u4e2a\u9690\u85cf\u5c42\uff0c\u4e5f\u79f0\u4e3a\u591a\u5c42\u611f\u77e5\u5668\uff08Multilayer Perceptron\uff09,\u6bcf\u4e00\u5c42\u7684\u795e\u7ecf\u5143\u4e0e\u524d\u4e00\u5c42\u7684\u795e\u7ecf\u5143\u5168\u8fde\u63a5\uff0c\u901a\u8fc7\u52a0\u6743\u6c42\u548c\u548c\u6fc0\u6d3b\u51fd\u6570\u8fdb\u884c\u8ba1\u7b97\u3002</li> </ul> <pre><code>graph LR\n    subgraph Input Layer\n        In((Input))\n    end\n\n    subgraph 1st Hidden Layer\n        H1_1((Neuron))\n        H1_2((Neuron))\n    end\n\n    subgraph 2nd Hidden Layer\n        H2_1((Neuron))\n        H2_2((Neuron))\n        H2_3((Neuron))\n    end\n\n    subgraph 3rd Hidden Layer\n        H3_1((Neuron))\n        H3_2((Neuron))\n    end\n\n    subgraph Output Layer\n        Out((Output))\n    end\n\n    In --&gt; H1_1 &amp; H1_2\n    H1_1 &amp; H1_2 --&gt; H2_1 &amp; H2_2 &amp; H2_3\n    H2_1 &amp; H2_2 &amp; H2_3 --&gt; H3_1 &amp; H3_2\n    H3_1 &amp; H3_2 --&gt; Out</code></pre>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#2","title":"2\u3001\u524d\u5411\u4f20\u64ad","text":"<p>\u795e\u7ecf\u5143\u4e2d\u4e0d\u540c\u7684\u5c31\u662f\u53c2\u6570 \\(w,b\\)</p> \\[ a_j^{[l]}=g(\\vec w _j^{[l]}\u00b7\\vec a ^{[l-1]}+b_j^{[l]}) \\] <p>\u5176\u4e2d \\(g\\) \u4e3a\u6fc0\u6d3b\u51fd\u6570</p> <p>\u4ece\u8f93\u5165\u5c42\u5411\u8f93\u51fa\u5c42\u8fdb\u884c\u8ba1\u7b97\uff0c\u56e0\u800c\u53eb\u505a\u524d\u5411\u4f20\u64ad</p>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#3tensorflowkeras","title":"3\u3001<code>tensorflow</code>\u7684<code>Keras</code>\u5e93","text":"<pre><code>import numpy as np\n# \u51c6\u5907\u8f93\u5165\u6570\u636ex\uff0c\u4e00\u4e2a4x2\u7684NumPy\u6570\u7ec4\nx = np.array([[200.0, 17.0],\n              [120.0, 5.0],\n              [425.0, 20.0],\n              [212.0, 18.0]])\n\n# \u51c6\u5907\u8f93\u51fa\u6807\u7b7ey\uff0c\u4e00\u4e2a\u5305\u542b4\u4e2a\u5143\u7d20\u7684NumPy\u6570\u7ec4\ny = np.array([1, 0, 0, 1])\n\n# \u5bfc\u5165Dense\u7c7b\uff0c\u8fd9\u662fKeras\u5e93\u4e2d\u7684\u4e00\u4e2a\u7c7b\uff0c\u7528\u4e8e\u521b\u5efa\u5168\u8fde\u63a5\u5c42\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\n\n# \u521b\u5efa\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42layer_1\uff0c\u5b83\u67093\u4e2a\u795e\u7ecf\u5143\uff08units=3\uff09\uff0c\u5e76\u4e14\u4f7f\u7528sigmoid\u6fc0\u6d3b\u51fd\u6570\nlayer_1 = Dense(units=3, activation='sigmoid')\n# \u5c06\u8f93\u5165\u6570\u636ex\u4f20\u9012\u7ed9layer_1\uff0c\u5f97\u5230\u8be5\u5c42\u7684\u8f93\u51faa1\na1 = layer_1(x)\n\nlayer_2 = Dense(units=1, activation='sigmoid')\na2 = layer_2(a1)\n\n# \u521b\u5efa\u4e00\u4e2a\u987a\u5e8f\u6a21\u578b\uff0c\u5c06layer_1\u548clayer_2\u6dfb\u52a0\u5230\u6a21\u578b\u4e2d\nmodel = Sequential([layer_1, layer_2])\n\n# \u7f16\u8bd1\u6a21\u578b\uff0c\u6307\u5b9a\u4f18\u5316\u5668\u3001\u635f\u5931\u51fd\u6570\u548c\u8bc4\u4f30\u6307\u6807\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# \u4f7f\u7528x\u548cy\u8bad\u7ec3\u6a21\u578b\nmodel.fit(x, y, epochs=10)\nmodel.predict(x_new)\n</code></pre>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#4numpy","title":"4\u3001<code>numpy</code>\u786c\u7f16\u7801","text":"<pre><code>import numpy as np\n\ndef dense(a_in, W, b, g):\n    \"\"\"\n    A single dense (fully connected) layer.\n\n    Parameters:\n    a_in (np.array): Input to the layer.\n    W (np.array): Weights matrix for the layer.\n    b (np.array): Bias vector for the layer.\n    g (function): Activation function to be applied.\n\n    Returns:\n    np.array: Output of the layer.\n    \"\"\"\n    units = W.shape[1]\n    a_out = np.zeros(units)\n\n    for j in range(units):\n        w = W[:, j]\n        z = np.dot(w, a_in) + b[j]\n        a_out[j] = g(z)\n\n    return a_out\n\ndef sequential(x):\n    \"\"\"\n    A simple sequential neural network model.\n\n    Parameters:\n    x (np.array): Input to the model.\n\n    Returns:\n    np.array: Output of the model.\n    \"\"\"\n    a1 = dense(x, W1, b1, sigmoid)\n    a2 = dense(a1, W2, b2, sigmoid)\n    a3 = dense(a2, W3, b3, sigmoid)\n    a4 = dense(a3, W4, b4, sigmoid)\n\n    f_x = a4\n    return f_x\n</code></pre> Tip <pre><code>import numpy as np\n\n# \u77e9\u9635\u52a0\u6cd5\nmatrix_sum = matrix_a + matrix_b\n# \u77e9\u9635\u4e58\u6cd5\nmatrix_product = np.dot(matrix_a, matrix_b)\n# \u77e9\u9635\u8f6c\u7f6e\nmatrix_transpose = matrix.T\n# \u77e9\u9635\u6c42\u9006\nmatrix_inverse = np.linalg.inv(matrix)\n# \u77e9\u9635\u7684\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf\neigenvalues, eigenvectors = np.linalg.eig(matrix)\n# \u77e9\u9635\u7684\u884c\u5217\u5f0f\ndeterminant = np.linalg.det(matrix)\n# \u77e9\u9635\u7684\u8ff9\ntrace = np.trace(matrix)\n</code></pre>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#5","title":"5\u3001\u8bad\u7ec3\u6b65\u9aa4","text":"\u6b65\u9aa4 \u903b\u8f91\u56de\u5f52 \u795e\u7ecf\u7f51\u7edc \u2460 \u5b9a\u4e49\u6a21\u578b \u7ed9\u5b9a\u8f93\u5165 \\(x\\) \u548c\u53c2\u6570 \\(w, b\\) \u8ba1\u7b97\u8f93\u51fa \\(f(x) = \\frac{1}{1 + e^{-z}}\\) \u5176\u4e2d \\(z = w \\cdot x + b\\) \u4f7f\u7528 <code>Sequential</code> \u6a21\u578b\u5b9a\u4e49\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784  <code>model = Sequential([Dense(...), Dense(...), Dense(...)])</code> \u2461 \u6307\u5b9a\u635f\u5931\u51fd\u6570\u548c\u4ee3\u4ef7 \u903b\u8f91\u56de\u5f52\u635f\u5931\u51fd\u6570\uff1a\\(L= -y \\cdot \\log(f(x))\\)\\(- (1 - y) \\cdot \\log(1 - f(x))\\) \u4f7f\u7528\u4e8c\u5143\u4ea4\u53c9\u71b5\u4f5c\u4e3a\u635f\u5931\u51fd\u6570\uff1a <code>model.compile(loss=BinaryCrossentropy())</code>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5747\u65b9\u8bef\u5dee\u4f5c\u4e3a\u635f\u5931\u51fd\u6570\uff1a<code>model.compile(loss=mean_squared_error())</code> \u2462 \u5728\u6570\u636e\u4e0a\u8bad\u7ec3\u4ee5\u6700\u5c0f\u5316\u4ee3\u4ef7\u51fd\u6570 \\(J(w, b)\\) \u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\uff1a\\(w = w - \\alpha \\cdot \\frac{\\partial J}{\\partial w}\\)\\(b = b - \\alpha \\cdot \\frac{\\partial J}{\\partial b}\\) \u4f7f\u7528\u6a21\u578b\u7684 <code>fit</code> \u65b9\u6cd5\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\uff1a <code>model.fit(X, y, epochs=100)</code>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#6","title":"6\u3001\u6fc0\u6d3b\u51fd\u6570","text":"\\(\u7ebf\u6027\\) \\(Sigmoid\\) \\(ReLU\\) \\(f(x) = x\\) \\(\\frac{1}{1 + e^{-x}}\\) \\(\\text{}\\max(0, x)\\) \u4e8c\u5206\u7c7b\u95ee\u9898 \\(y\\) \u53ef\u53d6\u6b63\u8d1f \\(y\\) \u53d6\u975e\u8d1f <ul> <li>\u9690\u85cf\u5c42\u4e0d\u8981\u4f7f\u7528\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff0c\u56e0\u4e3a\u7ebf\u6027\u76f8\u5173 \\(\\Leftrightarrow\\) \u76f8\u5f53\u4e8e\u7b80\u5355\u7684\u7ebf\u6027\u56de\u5f52</li> </ul>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#_2","title":"\u4e8c\u3001\u591a\u7c7b","text":""},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#1softmax","title":"1\u3001Softmax\u56de\u5f52\u6a21\u578b","text":"Example \u8ba1\u7b97\u5f97\u5206 \\(z\\) \u8ba1\u7b97\u6982\u7387 \\(a\\) \\(z_1 = \\vec{w}_1 \\cdot \\vec{x} + b_1\\) \\(a_1 = \\frac{e^{z_1}}{e^{z_1} + e^{z_2} + e^{z_3} + e^{z_4}}\\) \\(z_2 = \\vec{w}_2 \\cdot \\vec{x} + b_2\\) \\(a_2 = \\frac{e^{z_2}}{e^{z_1} + e^{z_2} + e^{z_3} + e^{z_4}}\\) \\(z_3 = \\vec{w}_3 \\cdot \\vec{x} + b_3\\) \\(a_3 = \\frac{e^{z_3}}{e^{z_1} + e^{z_2} + e^{z_3} + e^{z_4}}\\) \\(z_4 = \\vec{w}_4 \\cdot \\vec{x} + b_4\\) \\(a_4 = \\frac{e^{z_4}}{e^{z_1} + e^{z_2} + e^{z_3} + e^{z_4}}\\) <ul> <li> \\[   z_j = \\vec{w}_j \\cdot \\vec{x} + b_j \\quad \\text{for } j = 1, \\ldots, N   \\] </li> <li> \\[   a_j = \\frac{e^{z_j}}{\\sum_{k=1}^{N} e^{z_k}} = P(y = j|\\vec{x})   \\] </li> <li> \\[   a_1 + a_2 + \\ldots + a_N = 1   \\] </li> </ul> \u6b65\u9aa4 \u903b\u8f91\u56de\u5f52 Softmax\u56de\u5f52 \u6a21\u578b \\(z = \\vec{w} \\cdot \\vec{x} + b\\) \\(z_j = \\vec{w}_j \\cdot \\vec{x} + b_j\\) for \\(j = 1, \\ldots, N\\) \u6982\u7387\u8ba1\u7b97 \\(a_1 = g(z) = \\frac{1}{1 + e^{-z}}\\) \\(a_j = \\frac{e^{z_j}}{\\sum_{k=1}^{N} e^{z_k}}\\) \\(a_2 = 1 - a_1\\) \u635f\u5931\u51fd\u6570 \\(\\text{loss} = -y \\log a_1 - (1 - y) \\log(1 - a_1)\\) \\(\\text{loss}(a_1, \\ldots, a_N, y) = -\\log a_y\\) \u4ee3\u4ef7\u51fd\u6570 \\(J(\\vec{w}, b) = \\text{average loss}\\) \\(J(\\vec{w}, b) = \\text{average loss}\\) \\(a_1 + a_2 = 1\\) \\(a_1 + a_2 + \\ldots + a_N = 1\\)"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#2softmax","title":"2\u3001Softmax\u5b9e\u73b0","text":"<pre><code>import tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\n\n# \u521b\u5efa\u4e00\u4e2a\u987a\u5e8f\u6a21\u578b\nmodel = Sequential([\n    Dense(units=25, activation='relu'),\n    Dense(units=15, activation='relu'),\n    Dense(units=10, activation='softmax')\n])\n\n# \u7f16\u8bd1\u6a21\u578b\uff0c\u6307\u5b9a\u635f\u5931\u51fd\u6570\u4e3aSparseCategoricalCrossentropy\nmodel.compile(loss=SparseCategoricalCrossentropy())\nmodel.fit(X, Y, epochs=100)\n</code></pre>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#3","title":"3\u3001\u6539\u8fdb","text":"<p>\u6570\u503c\u820d\u5165\u8bef\u5dee</p> <ul> <li>\u4f60\u7684\u8f93\u51fa\u5c42\u63d0\u4f9b\u7684\u662flogits\uff08\u5373\u672a\u7ecf\u8fc7\u6fc0\u6d3b\u51fd\u6570\u7684\u539f\u59cb\u5206\u6570\uff09\uff0c\u800c\u4e0d\u662f\u6982\u7387\u503c</li> </ul> <pre><code>model.compile(loss=BinaryCrossentropy(from_logits=True))\nmodel.compile(loss=SparseCategoricalCrossentropy(from_logits=True))\n</code></pre> <pre><code># \u521b\u5efa\u4e00\u4e2a\u987a\u5e8f\u6a21\u578b\nmodel = Sequential([\n    Dense(units=25, activation='relu'),\n    Dense(units=15, activation='relu'),\n     # \u6700\u540e\u4e00\u5c42\u76f8\u5e94\u7684\u6539\u6210\u7ebf\u6027\u6a21\u578b\n    Dense(units=10, activation='linear')\n])\n</code></pre>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#4","title":"4\u3001\u591a\u4e2a\u8f93\u51fa\u7684\u5206\u7c7b","text":"<p>\uff08Muti-label Classification)</p> <ul> <li>\u9009\u62e9\u4f7f\u7528\u591a\u4e2a\u795e\u7ecf\u7f51\u7edc\u5206\u522b\u7ed9\u51fa\u8f93\u51fa</li> <li>\u4f7f\u7528\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\uff0c\u6700\u540e\u4e00\u5c42\u4f7f\u7528Sigmoid\u6fc0\u6d3b\u51fd\u6570\uff0c\u7ed9\u51fa\u591a\u4e2a\u8f93\u51fa\u7684\u6982\u7387\u503c</li> </ul>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#5_1","title":"5\u3001\u9ad8\u7ea7\u4f18\u5316\u65b9\u6cd5","text":"<ul> <li>\\(Adam\\)\u7b97\u6cd5(Adaptive Moment estimation)\uff1a\u4f7f\u7528\u591a\u4e2a\u5b66\u4e60\u7387 \\(\\alpha\\)</li> </ul> <pre><code>import tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\n\n# \u5b9a\u4e49\u6a21\u578b\u7ed3\u6784\nmodel = Sequential([\n    Dense(units=25, activation='sigmoid'),\n    Dense(units=15, activation='sigmoid'),\n    Dense(units=10, activation='linear')\n])\n\n# \u7f16\u8bd1\u6a21\u578b\nmodel.compile(\n    # \u4f7f\u7528Adam\u4f18\u5316\u5668\uff0c\u5b66\u4e60\u7387\u4e3a0.001\n    optimizer=Adam(learning_rate=1e-3),\n    # \u4f7f\u7528SparseCategoricalCrossentropy\u635f\u5931\u51fd\u6570\uff0cfrom_logits=True\u8868\u793a\u8f93\u51fa\u5c42\u4e3alogits\n    loss=SparseCategoricalCrossentropy(from_logits=True)\n)\n\n# \u8bad\u7ec3\u6a21\u578b\nmodel.fit(X, Y, epochs=100)\n</code></pre>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#6_1","title":"6\u3001\u5176\u4ed6\u7c7b\u578b\u7684\u5c42","text":"<ul> <li>\u5168\u8fde\u63a5\u5c42\uff08Dense Layer\uff09</li> <li>\u5377\u79ef\u5c42\uff08Convolutional Layer\uff09\uff1a\u6bcf\u4e2a\u795e\u7ecf\u5143\u53ea\u5173\u6ce8\u8f93\u5165\u7684\u4e00\u90e8\u5206</li> </ul>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#_3","title":"\u4e09\u3001\u6a21\u578b\u8bc4\u4f30","text":"<p>\u628a\u6570\u636e\u96c6\u5207\u5206\u6210\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6</p> <p>Tip</p> <p>\\(J\\) \u8d8a\u5927\uff0c\u8bef\u5dee\u8d8a\u5927</p>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#1_1","title":"1\u3001\u6a21\u578b","text":""},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#1_2","title":"\uff081\uff09\u56de\u5f52","text":"<ul> <li>\u6700\u5c0f\u5316\u4ee3\u4ef7\u51fd\u6570</li> </ul> \\[ J(\\mathbf{w}, b) = \\min_{\\mathbf{w}, b} \\left[ \\frac{1}{2m_{\\text{train}}} \\sum_{i=1}^{m_{\\text{train}}} \\left( f_{\\mathbf{w},b} (\\mathbf{x}^{(i)}) - y^{(i)} \\right)^2 + \\frac{\\lambda}{2m_{\\text{train}}} \\sum_{j=1}^{n} w_j^2 \\right] \\] <ul> <li>\u8bad\u7ec3\u96c6\u8bef\u5dee</li> </ul> \\[ J_{\\text{test}} (\\mathbf{w}, b) = \\frac{1}{2m_{\\text{test}}} \\sum_{i=1}^{m_{\\text{test}}} \\left( f_{\\mathbf{w},b} (\\mathbf{x}^{(i)}_{\\text{test}}) - y^{(i)}_{\\text{test}} \\right)^2 \\] <ul> <li>\u6d4b\u8bd5\u96c6\u8bef\u5dee</li> </ul> \\[ J_{\\text{train}} (\\mathbf{w}, b) = \\frac{1}{2m_{\\text{train}}} \\sum_{i=1}^{m_{\\text{train}}} \\left( f_{\\mathbf{w},b} (\\mathbf{x}^{(i)}_{\\text{train}}) - y^{(i)}_{\\text{train}} \\right)^2 \\]"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#2_1","title":"\uff082\uff09\u5206\u7c7b","text":"<ul> <li>\u6700\u5c0f\u5316\u4ee3\u4ef7\u51fd\u6570</li> </ul> \\[ J(\\vec{w}, b) = -\\frac{1}{m} \\sum_{i=1}^{m} \\left[ y^{(i)}\\log(f_{\\vec{w},b}(\\vec{x}^{(i)})) + (1 - y^{(i)})\\log(1 - f_{\\vec{w},b}(\\vec{x}^{(i)})) \\right] + \\frac{\\lambda}{2m} \\sum_{j=1}^{n} w_j^2 \\] <ul> <li>\u8bad\u7ec3\u96c6\u8bef\u5dee</li> </ul> \\[ J_{test}(\\vec{w}, b) = -\\frac{1}{m_{test}} \\sum_{i=1}^{m_{test}} \\left[ y_{test}^{(i)}\\log(f_{\\vec{w},b}(\\vec{x}_{test}^{(i)})) + (1 - y_{test}^{(i)})\\log(1 - f_{\\vec{w},b}(\\vec{x}_{test}^{(i)})) \\right] \\] <ul> <li>\u6d4b\u8bd5\u96c6\u8bef\u5dee</li> </ul> \\[ J_{train}(\\vec{w}, b) = -\\frac{1}{m_{train}} \\sum_{i=1}^{m_{train}} \\left[ y_{train}^{(i)}\\log(f_{\\vec{w},b}(\\vec{x}_{train}^{(i)})) + (1 - y_{train}^{(i)})\\log(1 - f_{\\vec{w},b}(\\vec{x}_{train}^{(i)})) \\right] \\]"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#2_2","title":"2\u3001\u6a21\u578b\u9009\u62e9\u548c\u4ea4\u53c9\u9a8c\u8bc1\u6d4b\u8bd5\u96c6","text":"<p>\u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u96c6\uff08Cross Validation Set\uff09\u786e\u5b9a\u53c2\u6570\u4e2a\u6570\u7b49\u7b49\uff0c\u518d\u7528\u6d4b\u8bd5\u96c6\u6765\u9a8c\u8bc1</p> \u9ad8\u504f\u5dee \u6b63\u597d \u9ad8\u65b9\u5dee \\(J_{train}\\) \u5f88\u5927 \\(J_{train}\\) \u5f88\u5c0f \\(J_{train}\\) \u5f88\u5c0f \\(J_{cv}\\) \u5f88\u5927 \\(J_{cv}\\) \u5f88\u5c0f \\(J_{cv}\\) \u5f88\u5927"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#3_1","title":"3\u3001\u5efa\u7acb\u8868\u73b0\u57fa\u51c6","text":"<ul> <li>\u57fa\u51c6\uff08\u5176\u4ed6\u6a21\u578b\uff0c\u4eba\u7c7b\u8868\u73b0\u2026\u2026\uff09</li> <li>\u8bad\u7ec3\u96c6\u8bef\u5dee</li> <li>\u4ea4\u53c9\u9a8c\u8bc1\u96c6\u8bef\u5dee</li> </ul> <p>Caution</p> <ul> <li>\u57fa\u51c6\u6d4b\u8bd5\u548c\u8bad\u7ec3\u96c6\u8bef\u5dee\u76f8\u5dee\u8f83\u5927 \\(\\Leftrightarrow\\) \u9ad8\u65b9\u5dee\uff08\u8fc7\u62df\u5408\uff09</li> <li>\u8bad\u7ec3\u96c6\u8bef\u5dee\u548c\u4ea4\u53c9\u9a8c\u8bc1\u96c6\u8bef\u5dee\u76f8\u5dee\u8f83\u5927 \\(\\Leftrightarrow\\) \u9ad8\u504f\u5dee\uff08\u6b20\u62df\u5408\uff09</li> <li>\u4e24\u4e24\u76f8\u5dee\u90fd\u5927 \\(\\Leftrightarrow\\) \u9ad8\u504f\u5dee\u548c\u9ad8\u65b9\u5dee</li> </ul>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#4_1","title":"4\u3001\u5b66\u4e60\u66f2\u7ebf","text":"<p>\\(J_{cv}\\) \u968f\u6d4b\u8bd5\u96c6\u589e\u5927\u51cf\u5c0f\uff0c\\(J_{train}\\) \u968f\u7740\u6d4b\u8bd5\u96c6\u589e\u52a0\u589e\u52a0\uff0c\u6700\u540e\u8d8b\u4e8e\u5e73\u8861</p> <ul> <li>\u9ad8\u504f\u5dee \u2192 \u5e73\u8861\u8bef\u5dee\u6700\u7ec8\u9ad8\u4e8e\u4eba\u7c7b\u57fa\u51c6</li> <li>\u9ad8\u65b9\u5dee \u2192 \\(J_{cv}\\) \u4e00\u76f4\u9ad8\u4e8e \\(J_{train}\\) \uff0c\u4eba\u7c7b\u57fa\u51c6\u4ecb\u4e8e\u4e2d\u95f4</li> </ul> Info <ul> <li>\u66f4\u591a\u8bad\u7ec3\u6837\u672c \u2192 \u9ad8\u65b9\u5dee</li> <li>\u5c11\u91cf\u7279\u5f81 \u2192 \u9ad8\u65b9\u5dee</li> <li>\u66f4\u591a\u7279\u5f81 \u2192 \u9ad8\u504f\u5dee</li> <li>\u5c1d\u8bd5\u9ad8\u6b21\u9879 \u2192 \u9ad8\u504f\u5dee</li> <li>\u51cf\u5c0f \u03bb \u2192 \u9ad8\u504f\u5dee</li> <li>\u589e\u5927 \u03bb \u2192 \u9ad8\u65b9\u5dee</li> </ul> <p></p>"},{"location":"ML/2%20%E3%80%81%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/#5_2","title":"5\u3001\u5b9e\u73b0","text":"<p>\u672a\u6b63\u5219\u5316\u7684 MNIST \u6a21\u578b</p> <pre><code>layer_1 = Dense(units=25, activation=\"relu\")\nlayer_2 = Dense(units=15, activation=\"relu\")\nlayer_3 = Dense(units=1, activation=\"sigmoid\")\nmodel = Sequential([layer_1, layer_2, layer_3])\n</code></pre> <p>\u6b63\u5219\u5316\u7684 MNIST \u6a21\u578b</p> <pre><code>layer_1 = Dense(units=25, activation=\"relu\", kernel_regularizer=L2(0.01))\nlayer_2 = Dense(units=15, activation=\"relu\", kernel_regularizer=L2(0.01))\nlayer_3 = Dense(units=1, activation=\"sigmoid\", kernel_regularizer=L2(0.01))\nmodel = Sequential([layer_1, layer_2, layer_3])\n</code></pre>"},{"location":"Overview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","title":"\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784","text":"\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784  <ul> <li>\u4e00\u3001\u6982\u8ff0</li> <li>\u4e8c\u3001\u7b97\u6cd5\u57fa\u7840<ul> <li>1\u3001\u7279\u5f81</li> <li>2\u3001\u7b97\u6cd5\u8868\u8fbe</li> <li>3\u3001\u8bbe\u8ba1\u65b9\u6cd5</li> <li>\u6ce8\uff1a\u6392\u5e8f</li> </ul> </li> <li>\u4e09\u3001\u6570\u636e\u7ed3\u6784\u57fa\u7840<ul> <li>1\u3001\u6808</li> <li>2\u3001\u961f\u5217</li> <li>3\u3001\u6811</li> <li>4\u3001\u56fe</li> </ul> </li> </ul>"},{"location":"Overview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","title":"\u4e00\u3001\u6982\u8ff0","text":"<p>Tip</p> <p>\u62bd\u8c61\u6570\u636e\u7c7b\u578bADT\uff1a</p> <p>\u903b\u8f91\u7ed3\u6784\u548c\u7269\u7406\u5b9e\u73b0\u5206\u79bb\uff0c\u4e0d\u8ba8\u8bba\u5177\u4f53\u5b9e\u73b0</p>"},{"location":"Overview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","title":"\u4e8c\u3001\u7b97\u6cd5\u57fa\u7840","text":""},{"location":"Overview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#1","title":"1\u3001\u7279\u5f81","text":"\u7279\u5f81 \u6709\u7a77\u6027 \u786e\u5b9a\u6027 \u8f93\u51650\u6216\u591a\u4e2a \u8f93\u51fa1\u6216\u591a\u4e2a \u53ef\u884c\u6027 \u6b63\u786e\u7684\uff0c\u53ef\u8bfb\u6027\uff0c\u5065\u58ee\u6027"},{"location":"Overview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#2","title":"2\u3001\u7b97\u6cd5\u8868\u8fbe","text":"<ul> <li>\u81ea\u7136\u8bed\u8a00</li> <li>\u6d41\u7a0b\u56fe\u2b50</li> <li>\u4f2a\u4ee3\u7801\u2b50</li> <li>PAD\u56fe</li> </ul>"},{"location":"Overview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#3","title":"3\u3001\u8bbe\u8ba1\u65b9\u6cd5","text":"\u65b9\u6cd5 \u601d\u60f3 \u9012\u63a8\u6cd5 \u6839\u636e\u5df2\u77e5\u6761\u4ef6\u9010\u6b65\u63a8\u5bfc\u51fa\u7ed3\u679c \u9012\u5f52\u6cd5 \u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u76f8\u540c\u7c7b\u578b\u7684\u5b50\u95ee\u9898\uff0c\u76f4\u5230\u57fa\u672c\u60c5\u51b5 \u7a77\u4e3e\u6cd5 \u5217\u51fa\u6240\u6709\u53ef\u80fd\u89e3\u5e76\u9010\u4e00\u68c0\u67e5 \u8d2a\u5a6a\u6cd5 \u6bcf\u6b65\u9009\u62e9\u5f53\u524d\u6700\u4f18\u89e3\uff0c\u9010\u6b65\u903c\u8fd1\u5168\u5c40\u6700\u4f18 \u5206\u6cbb\u6cd5 \u5c06\u5927\u95ee\u9898\u5206\u89e3\u4e3a\u5c0f\u95ee\u9898\uff0c\u5408\u5e76\u7ed3\u679c\u3002 \u52a8\u6001\u89c4\u5212 \u901a\u8fc7\u8bb0\u5f55\u5b50\u95ee\u9898\u89e3\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002 \u8fed\u4ee3\u6cd5 \u901a\u8fc7\u91cd\u590d\u8ba1\u7b97\u9010\u6b65\u903c\u8fd1\u76ee\u6807\u3002"},{"location":"Overview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_3","title":"\u6ce8\uff1a\u6392\u5e8f","text":"<ol> <li> <p>\u9009\u62e9\u6392\u5e8f</p> <ul> <li> <p>\u9009\u62e9\u6574\u5217\u6700\u5c0f\u6392\u5230\u524d\u9762</p> <pre><code>void selectionSort(int arr[], int n) {\n    for (int i = 0; i &lt; n - 1; i++) {\n        // \u627e\u5230\u672a\u6392\u5e8f\u90e8\u5206\u7684\u6700\u5c0f\u5143\u7d20\n        int minIndex = i;\n        for (int j = i + 1; j &lt; n; j++) {\n            if (arr[j] &lt; arr[minIndex]) {\n                minIndex = j;\n            }\n        }\n\n        // \u4ea4\u6362\n        if (minIndex != i) {\n            swap(arr[i], arr[minIndex]);\n        }\n    }\n}\n</code></pre> </li> </ul> </li> <li> <p>\u5192\u6ce1\u6392\u5e8f</p> <ul> <li> <p>\u5192\u724c\u5728\u524d \u4ece\u540e\u5f80\u524d</p> </li> <li> <p>\u5192\u6ce1\u5728\u540e \u4ece\u524d\u5f80\u540e</p> <pre><code>for (i = 0; i &lt; n - 1; i++) {\n    for (j = 0; j &lt; n - i - 1; j++) {\n        if (arr[j] &gt; arr[j + 1]) {\n            // \u4ea4\u6362 arr[j] \u548c arr[j + 1]\n        }\n    }\n}\n</code></pre> </li> </ul> </li> <li> <p>\u63d2\u5165\u6392\u5e8f </p> <ul> <li> <p>\u9010\u4e00\u52a0\u5165\u65b0\u5143\u7d20\u6392\u5e8f</p> <pre><code>void insertionSort(int arr[], int n) {\n    for (int i = 1; i &lt; n; i++) {\n        int key = arr[i];  // \u5f53\u524d\u8981\u63d2\u5165\u7684\u5143\u7d20\n        int j = i - 1;     // \u5df2\u6392\u5e8f\u90e8\u5206\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n\n        // \u5c06\u5927\u4e8ekey\u7684\u5143\u7d20\u5411\u540e\u79fb\u52a8\n        while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n\n        // \u63d2\u5165key\u5230\u6b63\u786e\u4f4d\u7f6e\n        arr[j + 1] = key;\n    }\n}\n</code></pre> </li> </ul> </li> </ol>"},{"location":"Overview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_4","title":"\u4e09\u3001\u6570\u636e\u7ed3\u6784\u57fa\u7840","text":""},{"location":"Overview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#1_1","title":"1\u3001\u6808","text":""},{"location":"Overview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#2_1","title":"2\u3001\u961f\u5217","text":""},{"location":"Overview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#3_1","title":"3\u3001\u6811","text":"<ul> <li> <p>\u6700\u5c0f\u751f\u6210\u6811\ud83c\udf33</p> Tip <ul> <li>\u6392\u5e8f\u8fb9\uff08\u4ece\u5c0f\u5230\u5927\u5f00\u59cb\u8fde\u63a5\uff09</li> <li>\u8fde\u63a5\u672a\u8fde\u901a\u7684\u5757\uff0c\u5df2\u8fde\u901a\u7684\u8df3\u8fc7</li> </ul> </li> </ul>"},{"location":"Overview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#4","title":"4\u3001\u56fe","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","title":"\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf","text":"\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf  <ul> <li>\u4e00\u3001\u6982\u8ff0</li> <li>\u4e8c\u3001\u53d1\u5c55</li> <li>\u4e09\u3001\u64cd\u4f5c\u7cfb\u7edf\u7ed3\u6784</li> <li>\u56db\u3001\u529f\u80fd\u548c\u57fa\u672c\u7279\u5f81<ul> <li>1\u3001\u529f\u80fd</li> <li>2\u3001\u7279\u5f81</li> </ul> </li> <li>\u4e94\u3001\u57fa\u672c\u6982\u5ff5</li> <li>\u516d\u3001\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\u4e0e\u63a7\u5236<ul> <li>1\u3001\u8fdb\u7a0b\u4e0e\u7ebf\u7a0b</li> <li>2\u3001\u540c\u6b65\u4e0e\u4e92\u65a5</li> <li>3\u3001\u6b7b\u9501\u548c\u9965\u997f</li> <li>4\u3001\u8fdb\u7a0b\u8c03\u5ea6</li> </ul> </li> </ul>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_1","title":"\u4e00\u3001\u6982\u8ff0","text":"<ul> <li>\u5185\u6838\uff1a\u786e\u5b9a\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5c5e\u4e8e\u8f6f\u4ef6\uff08</li> <li>\u8bbe\u5907\u5904\u7406\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5728\u56fa\u4ef6\u4e2d\uff0c\u5982ROM\uff0cBIOS</li> <li>\u90e8\u5206\u5728\u786c\u4ef6\u4e2d\uff08\u903b\u8f91\u5730\u5740\u5230\u7269\u7406\u5730\u5740</li> <li>\u786c\u4ef6\u548c\u5e94\u7528\u7a0b\u5e8f\u4e2d\u95f4\u7684\u8f6f\u4ef6\u5c42</li> <li>\u8d44\u6e90\u7ba1\u7406\u8005</li> </ul>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_2","title":"\u4e8c\u3001\u53d1\u5c55","text":"<p>1.\u771f\u7a7a\u7ba1\uff0c\u63d2\u63a5\u677f\uff0c\u65e0\u64cd\u4f5c\u7cfb\u7edf</p> <p>2.\u6676\u4f53\u7ba1\uff0c\u6279\u5904\u7406</p> <ul> <li>\u6c47\u7f16\u8bed\u8a00\u5f00\u53d1</li> <li>\u5355\u9053\u6027\uff0c\u81ea\u52a8\u6027\uff0c\u987a\u5e8f\u6027</li> </ul> <p>3.\u96c6\u6210\u7535\u8def</p> <ul> <li> <p>\u591a\u9053\u6279\u5904\u7406\uff0c\u5206\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf</p> </li> <li> Success <p>\u73b0\u4ee3\u5316\u64cd\u4f5c\u7cfb\u7edf\u540c\u65f6\u6709\u6279\u5904\u7406\uff0c\u5206\u65f6\uff0c\u5b9e\u65f6\u529f\u80fd\uff08\u901a\u7528\u64cd\u4f5c\u7cfb\u7edf)</p> </li> </ul> <p>4.\u7f51\u7edc\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5206\u5e03\u5f0f\u64cd\u4f5c\u7cfb\u7edf</p>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_3","title":"\u4e09\u3001\u64cd\u4f5c\u7cfb\u7edf\u7ed3\u6784","text":"<p>1\u3001\u6574\u4f53\u5f0f\u7ed3\u6784</p> <p>2\u3001\u6a21\u5757\u5316\u7ed3\u6784</p> <p>3\u3001\u5206\u5c42\u5f0f\u7ed3\u6784</p> <p>4\u3001\u5fae\u5185\u6838\u7ed3\u6784</p>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_4","title":"\u56db\u3001\u529f\u80fd\u548c\u57fa\u672c\u7279\u5f81","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#1","title":"1\u3001\u529f\u80fd","text":"<ol> <li>\u5904\u7406\u673a\u7ba1\u7406</li> <li>\u50a8\u5b58\u5668\u7ba1\u7406<ul> <li>\u5206\u9875</li> <li>\u5206\u533a</li> <li>\u5206\u6bb5</li> <li>\u865a\u62df\u5b58\u50a8</li> </ul> </li> <li>IO\u7ba1\u7406</li> <li>\u6587\u4ef6\u7ba1\u7406<ul> <li>\u8fde\u7eed\u5b58\u50a8</li> <li>\u7d22\u5f15\u5b58\u50a8</li> <li>\u94fe\u8868\u5b58\u50a8</li> </ul> </li> </ol>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#2","title":"2\u3001\u7279\u5f81","text":"<p>Tip</p> <ol> <li>\u5e76\u53d1\u6027\uff1a\u4e24\u9053\u6216\u591a\u9053\u5728\u540c\u4e00 \u65f6\u95f4\u95f4\u9694</li> <li>\u5171\u4eab\u6027\uff1a\u4e92\u65a5\u5171\u4eab\uff0c\u540c\u65f6\u8bbf\u95ee</li> <li>\u865a\u62df\u6027</li> <li>\u5f02\u6b65\u6027 (\u4e0d\u786e\u5b9a\u6027) \uff1a\u4e0d\u77e5\u9053\u65f6\u95f4 \u4e0d\u77e5\u9053\u987a\u5e8f</li> </ol>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_5","title":"\u4e94\u3001\u57fa\u672c\u6982\u5ff5","text":"\u6982\u5ff5 \u89e3\u91ca \u4e2d\u65ad \u53ef\u4ee5\u5904\u7406\u7b97\u6cd5\u6ea2\u51fa\uff0c\u975e\u6cd5\u64cd\u4f5c\u7801\uff0c\u6b7b\u5faa\u73af \u7528\u6237\u6001 \u975e\u7279\u6743\u6001 \u6838\u5fc3\u6001 \u7cfb\u7edf\u6001\uff0c\u7279\u6743\u6001 \u591a\u9053\u7a0b\u5e8f\u7cfb\u7edf \u591a\u4e2a\u7a0b\u5e8f\u5728\u5185\u5b58\u4e2d\u4ea4\u66ff\u8fd0\u884c\uff08\u5b8f\u89c2\u4e0a\u5e76\u884c\uff0c\u5fae\u89c2\u4e0a\u4e32\u884c \u591a\u5904\u7406\u7cfb\u7edf \u591a\u4e2a\u5904\u7406\u5668 \u5206\u65f6 \u628a\u8ba1\u7b97\u673a\u65f6\u95f4\u5206\u5272\u4e3a\u65f6\u95f4\u7247\uff0c\uff08\u4f7f\u591a\u9053\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u591a\u4e2a\u865a\u62df\u673a"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_6","title":"\u516d\u3001\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\u4e0e\u63a7\u5236","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#1_1","title":"1\u3001\u8fdb\u7a0b\u4e0e\u7ebf\u7a0b","text":"<ul> <li> <p>\u8fdb\u7a0b\uff1a\u7a0b\u5e8f\u5728\u5e76\u53d1\u7cfb\u7edf\u5185\u7684\u67d0\u4e2a\u6570\u636e\u96c6\u4e0a\u7684\u4e00\u6b21\u8fd0\u884c\uff0c\u662f\u7cfb\u7edf\u8fdb\u884c\u8d44\u6e90\u5206\u914d\u548c\u8c03\u5ea6\u8fd0\u884c\u7684\u72ec\u7acb\u5355\u4f4d</p> <ul> <li> Example <ol> <li>\u65b0\u6279\u5904\u7406\u4efb\u52a1</li> <li>\u7cfb\u7edf\u521d\u59cb\u5316\uff0c\u7528\u6237\u767b\u5f55</li> <li>\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7cfb\u7edf\u670d\u52a1</li> <li>\u73b0\u5b58\u8fdb\u7a0b</li> </ol> </li> <li> <p>\u72b6\u6001\uff1a   <pre><code>stateDiagram\nNew --&gt; Ready: Admitted\nReady --&gt; Running: Despatch\nRunning --&gt; Ready: Interrupt\nRunning --&gt; Waiting: I/O wait\nWaiting --&gt; Ready: I/O completion\nRunning --&gt; Terminated: Exit</code></pre></p> </li> </ul> </li> <li> <p>\u7ebf\u7a0b\uff1a\u8f7b\u578b\u5b9e\u4f53\uff0c\u72ec\u7acb\u8c03\u914d\u5355\u5143 \uff0c\uff08\u4e00\u4e2a/\u4e0d\u540c\u8fdb\u7a0b\u91cc\u7684\u6240\u6709\u7ebf\u7a0b\u53ef\u5e76\u53d1\u8fdb\u884c)</p> </li> </ul> \u8fdb\u7a0b(Process) \u7ebf\u7a0b(Thread) \u5b9a\u4e49 \u8fd0\u884c\u4e2d\u7684\u7a0b\u5e8f\u7684\u5b9e\u4f8b \u8fdb\u7a0b\u4e2d\u7684\u4e00\u4e2a\u6267\u884c\u5355\u5143 \u8d44\u6e90 \u62e5\u6709\u72ec\u7acb\u7684\u5185\u5b58\u7a7a\u95f4\u548c\u7cfb\u7edf\u8d44\u6e90 \u5171\u4eab\u6240\u5c5e\u8fdb\u7a0b\u7684\u5185\u5b58\u7a7a\u95f4\u548c\u8d44\u6e90 \u5f00\u9500 \u521b\u5efa\u548c\u5207\u6362\u5f00\u9500\u5927 \u521b\u5efa\u548c\u5207\u6362\u5f00\u9500\u5c0f \u5b89\u5168\u6027 \u7531\u4e8e\u7a7a\u95f4\u72ec\u7acb\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u5d29\u6e83\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u8fdb\u7a0b \u4e00\u4e2a\u7ebf\u7a0b\u5d29\u6e83\u53ef\u80fd\u5bfc\u81f4\u6574\u4e2a\u8fdb\u7a0b\u5d29\u6e83 \u7cfb\u7edf\u8d44\u6e90 \u62e5\u6709\u72ec\u7acb\u7684\u7cfb\u7edf\u8d44\u6e90(\u6587\u4ef6\u53e5\u67c4\u7b49) \u5171\u4eab\u8fdb\u7a0b\u7684\u7cfb\u7edf\u8d44\u6e90"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#2_1","title":"2\u3001\u540c\u6b65\u4e0e\u4e92\u65a5","text":"Example <ol> <li> <p>\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898</p> <ul> <li>\u751f\u4ea7\u8005\u5f80\u7f13\u51b2\u533a\u653e\u4ea7\u54c1,\u6d88\u8d39\u8005\u4ece\u7f13\u51b2\u533a\u53d6\u4ea7\u54c1</li> <li>\u7f13\u51b2\u533a\u6ee1\u65f6\u4e0d\u80fd\u751f\u4ea7,\u7a7a\u65f6\u4e0d\u80fd\u6d88\u8d39</li> <li>\u672c\u8d28\u662f\u5904\u7406\u597d\u7f13\u51b2\u533a\u7684\u4e92\u65a5\u8bbf\u95ee\u548c\u751f\u4ea7\u6d88\u8d39\u7684\u540c\u6b65\u5173\u7cfb</li> </ul> </li> <li> <p>\u8bfb\u8005-\u5199\u8005\u95ee\u9898</p> <ul> <li>\u591a\u4e2a\u8bfb\u8005\u53ef\u4ee5\u540c\u65f6\u8bfb,\u4f46\u5199\u8005\u5fc5\u987b\u72ec\u5360\u8bbf\u95ee</li> <li>\u5199\u8005\u5199\u65f6\u5176\u4ed6\u4eba\u4e0d\u80fd\u8bfb\u5199,\u8bfb\u8005\u8bfb\u65f6\u5199\u8005\u4e0d\u80fd\u5199</li> <li>\u5173\u952e\u662f\u4fdd\u62a4\u597d\u6570\u636e\u4e00\u81f4\u6027,\u540c\u65f6\u907f\u514d\u5199\u8005\u9965\u997f</li> </ul> </li> <li> <p>\u54f2\u5b66\u5bb6\u5c31\u9910\u95ee\u9898</p> <ul> <li>\u4e94\u4f4d\u54f2\u5b66\u5bb6\u5171\u7528\u4e94\u53ea\u7b77\u5b50,\u9700\u8981\u62ff\u5230\u5de6\u53f3\u4e24\u53ea\u624d\u80fd\u5403\u996d</li> <li>\u9519\u8bef\u7684\u5b9e\u73b0\u5bb9\u6613\u5bfc\u81f4\u6b7b\u9501(\u90fd\u62ff\u7740\u4e00\u53ea\u7b77\u5b50\u50f5\u6301)</li> <li>\u8003\u5bdf\u8d44\u6e90\u5206\u914d\u4e2d\u7684\u6b7b\u9501\u9884\u9632\u95ee\u9898</li> </ul> </li> <li> <p>\u7406\u53d1\u5e08\u95ee\u9898</p> <ul> <li>\u4e00\u4e2a\u7406\u53d1\u5e08\u3001\u4e00\u628a\u7406\u53d1\u6905\u3001\u51e0\u628a\u7b49\u5019\u6905</li> <li>\u6ca1\u6709\u987e\u5ba2\u65f6\u7406\u53d1\u5e08\u7761\u89c9,\u6765\u5ba2\u4eba\u65f6\u88ab\u5524\u9192</li> <li>\u5c55\u793a\u4e86\u8fdb\u7a0b\u95f4\u7684\u540c\u6b65\u5408\u4f5c\u5173\u7cfb\u548c\u6709\u9650\u8d44\u6e90\u7684\u7ba1\u7406</li> </ul> </li> </ol> <p>\u8fd9\u4e9b\u95ee\u9898\u90fd\u662f\u5bf9\u73b0\u5b9e\u573a\u666f\u7684\u62bd\u8c61,\u672c\u8d28\u90fd\u662f\u5728\u5904\u7406\u8fdb\u7a0b/\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u4e0e\u4e92\u65a5\u5173\u7cfb\u3002</p> <p>\u8fdb\u7a0b\u5236\u7ea6\uff1a</p> <ul> <li>\u76f4\u63a5\u5236\u7ea6\uff08\u8fdb\u7a0b\u540c\u6b65\uff09<ul> <li>\u6709\u610f\u8bc6\u7684\u5b89\u6392\u8fdb\u7a0b\u95f4\u76f8\u4e92\u534f\u4f5c</li> </ul> </li> <li>\u95f4\u63a5\u5236\u7ea6\uff08\u8fdb\u7a0b\u4e92\u65a5\uff09<ul> <li>\u7ade\u4e89\u8d44\u6e90\u65e0\u610f\u8bc6\u9020\u6210\u5236\u7ea6</li> </ul> </li> </ul> Quote <p>\u540c\u6b65\u9075\u5faa\u539f\u5219\uff1a</p> <ol> <li> <p>\u81f3\u591a\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u4e34\u754c\u533a</p> </li> <li> <p>\u4e34\u754c\u533a\u5916\u8fdb\u7a0b\u4e0d\u80fd\u963b\u6b62\u5176\u4ed6\u8fdb\u7a0b\u8fdb\u5165\u4e34\u754c\u533a</p> </li> <li> <p>\u8bf7\u6c42\u5fc5\u987b\u5728\u6709\u9650\u65f6\u95f4\u5185\u5f97\u5230\u54cd\u5e94</p> </li> <li> <p>\u4e0d\u80fd\u5bf9CPU\u6570\u91cf\u548c\u901f\u5ea6\u5047\u8bbe</p> </li> </ol> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a\u8f6f\u4ef6\u5c42\u9762 \u3001\u786c\u4ef6\u5c42\u9762\u3001 \u64cd\u4f5c\u7cfb\u7edf\u5c42\u9762 (1)</p> <ol> <li> <ul> <li>\u4fe1\u53f7\u91cf</li> <li>\u7ba1\u7a0b</li> <li>\u6d88\u606f\u4f20\u9012</li> </ul> </li> </ol>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#3","title":"3\u3001\u6b7b\u9501\u548c\u9965\u997f","text":"<ul> <li>\u6b7b\u9501\uff1a\u591a\u8fdb\u7a0b\u65e0\u9650\u7b49\u5f85<ul> <li>\u4e92\u65a5\u8d44\u6e90\u5171\u4eab</li> <li>\u5e76\u53d1\u6267\u884c\u987a\u5e8f\u4e0d\u5f53</li> </ul> </li> <li>\u9965\u997f\uff1a\u957f\u65f6\u95f4\u7b49\u5f85\u65e0\u6cd5\u5f97\u5230\u6240\u9700\u8d44\u6e90</li> </ul>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#4","title":"4\u3001\u8fdb\u7a0b\u8c03\u5ea6","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE/","title":"\u8ba1\u7b97\u673a\u6570\u636e","text":"\u8ba1\u7b97\u673a\u6570\u636e  <ul> <li>\u4e00\u3001\u4f4d\u8fd0\u7b97<ul> <li>1\u3001\u4e0e\u3001\u6216\u3001\u5f02\u6216</li> <li>2\u3001\u53d6\u53cd</li> <li>3\u3001\u5de6\u79fb\u548c\u53f3\u79fb</li> </ul> </li> <li>\u4e8c\u3001\u8fdb\u5236\u8f6c\u6362</li> <li>\u4e09\u3001\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801</li> <li>\u56db\u3001\u5355\u7cbe\u5ea6\u6d6e\u70b9</li> </ul>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE/#_1","title":"\u4e00\u3001\u4f4d\u8fd0\u7b97","text":"<p>\u57fa\u672c\u7684\u4f4d\u8fd0\u7b97\u5171\\(6\\)\u79cd\uff0c\u5206\u522b\u4e3a\u6309\u4f4d\u4e0e\u3001\u6309\u4f4d\u6216\u3001\u6309\u4f4d\u5f02\u6216\u3001\u6309\u4f4d\u53d6\u53cd\u3001\u5de6\u79fb\u548c\u53f3\u79fb\u3002</p>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE/#1","title":"1\u3001\u4e0e\u3001\u6216\u3001\u5f02\u6216","text":"<p>\u8fd9\u4e09\u8005\u90fd\u662f\u4e24\u6570\u95f4\u7684\u8fd0\u7b97\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u4e00\u8d77\u8bb2\u89e3\u3002</p> <p>\u5b83\u4eec\u90fd\u662f\u5c06\u4e24\u4e2a\u6574\u6570\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u6570\uff0c\u5bf9\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u7684\u6bcf\u4e00\u4f4d\u9010\u4e00\u8fd0\u7b97\u3002</p> \u8fd0\u7b97 \u8fd0\u7b97\u7b26 \u6570\u5b66\u7b26\u53f7\u8868\u793a \u89e3\u91ca \u4e0e <code>&amp;</code> \\(\\And\\) \u53ea\u6709\u4e24\u4e2a\u5bf9\u5e94\u4f4d\u90fd\u4e3a \\(1\\) \u65f6\u624d\u4e3a\\(1\\) \u6216 <code>|</code> \\(\\lor\\) \u53ea\u8981\u4e24\u4e2a\u5bf9\u5e94\u4f4d\u4e2d\u6709\u4e00\u4e2a\\(1\\)\u65f6\u5c31\u4e3a\\(1\\) \u5f02\u6216 <code>^</code> \\(\\oplus\\) \u53ea\u6709\u4e24\u4e2a\u5bf9\u5e94\u4f4d\u4e0d\u540c\u65f6\u624d\u4e3a\\(1\\) <p>\u5f02\u6216\u8fd0\u7b97\u7684\u9006\u8fd0\u7b97\u662f\u5b83\u672c\u8eab\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e24\u6b21\u5f02\u6216\u540c\u4e00\u4e2a\u6570\u6700\u540e\u7ed3\u679c\u4e0d\u53d8\uff0c\u5373 \\(a \\oplus b \\oplus b = a\\)\u3002</p> <p>Tip</p> <p>\u4e0d\u7528\u4e2d\u95f4\u53d8\u91cf\u4ea4\u6362\u4e24\u4e2a\u6570 <pre><code>void swap(int *x, int *y) {\n    *x = *x ^ *y;\n    *y = *x ^ *y;\n    *x = *x ^ *y;\n}\n</code></pre></p> <p>\u4e3e\u4f8b\uff1a</p> \\[ \\begin{aligned} 5 &amp;=(101)_2\\\\ 6 &amp;=(110)_2\\\\ 5\\operatorname\\&amp;6 &amp;=(100)_2 =\\ 4\\\\ 5\\operatorname|6 &amp;=(111)_2 =\\ 7\\\\ 5\\oplus6 &amp;=(011)_2 =\\ 3\\\\ \\end{aligned} \\]"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE/#2","title":"2\u3001\u53d6\u53cd","text":"<p>\u5355\u76ee\u8fd0\u7b97\u3002</p> <p>\u5b83\u7684\u4f5c\u7528\u662f\u628a \\(num\\) \u7684\u4e8c\u8fdb\u5236\u8865\u7801\u4e2d\u7684 \\(0\\)\u548c\\(1\\)\u5168\u90e8\u53d6\u53cd\uff08\\(0\\)\u53d8\u4e3a\\(1\\)\uff0c\\(1\\) \u53d8\u4e3a\\(0\\))\u3002</p> <p>Note</p> <p>\u8865\u7801\uff1a\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\uff0c\u6b63\u6570\u548c \\(0\\) \u7684\u8865\u7801\u4e3a\u5176\u672c\u8eab\uff0c\u8d1f\u6570\u7684\u8865\u7801\u662f\u5c06\u5176\u5bf9\u5e94\u6b63\u6570 \u6309\u4f4d\u53d6\u53cd\u540e\u52a0\u4e00\u3002</p> <p>\u4e3e\u4f8b\uff08\u6709\u7b26\u53f7\u6574\u6570\uff09\uff1a</p> \\[ \\begin{aligned} 5&amp;=(00000101)_2\\\\  \\text{~}5&amp;=(11111010)_2=-6\\\\  -5\\text{ \u7684\u8865\u7801}&amp;=(11111011)_2\\\\  \\text{~}(-5)&amp;=(00000100)_2=4 \\end{aligned} \\]"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE/#3","title":"3\u3001\u5de6\u79fb\u548c\u53f3\u79fb","text":"<ul> <li>\u5de6\u79fb\uff1a<code>num &lt;&lt; i</code></li> <li>\u53f3\u79fb\uff1a<code>num &gt;&gt; i</code> </li> </ul> <p>\u4e3e\u4f8b\uff1a</p> \\[ \\begin{aligned} 11&amp;=(00001011)_2\\\\ 11&lt;&lt;3&amp;=(01011000)_2=88\\\\ 11&gt;&gt;2&amp;=(00000010)_2=2 \\end{aligned} \\] <p>Tip</p> <ul> <li>\u5de6\u79fb \\(i\\) \u4f4d\u76f8\u5f53\u4e8e \\(\\times 2^i\\)</li> <li>\u53f3\u79fb \\(i\\) \u4f4d\u76f8\u5f53\u4e8e \\(\\div 2^i(\u53d6\u6574)\\)</li> </ul>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE/#_2","title":"\u4e8c\u3001\u8fdb\u5236\u8f6c\u6362","text":"<ul> <li>\u5c0f\u6570\uff1a\u5c0f\u6570\u90e8\u5206\\(\\times 2\\)\uff0c\u53d6\u6574\u6570\u90e8\u5206</li> </ul>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE/#_3","title":"\u4e09\u3001\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801","text":"\u7c7b\u578b \u89c4\u5219 \u539f\u7801 \u6b63\u6570\u6700\u9ad8\u4f4d\u4e3a\\(0\\)\uff0c\u5176\u4ed6\u4f4d\u4e0d\u53d8\uff1b\u8d1f\u65701\u6700\u9ad8\u4f4d\u4e3a\\(1\\)\uff0c\u5176\u4ed6\u4f4d\u4e0d\u53d8 \u53cd\u7801 \u6b63\u6570\u6700\u9ad8\u4f4d\u4e3a\\(0\\)\uff0c\u5176\u4ed6\u4f4d\u4e0d\u53d8\uff1b\u8d1f\u65701\u6700\u9ad8\u4f4d\u4e3a\\(1\\)\uff0c\u5176\u4ed6\u4f4d\u53d6\u53cd \u8865\u7801 \u6b63\u6570\u6700\u9ad8\u4f4d\u4e3a\\(0\\)\uff0c\u5176\u4ed6\u4f4d\u4e0d\u53d8\uff1b\u8d1f\u6570\u6700\u9ad8\u4f4d\u4e3a\\(1\\)\uff0c\u5176\u4ed6\u4f4d\u53d6\u53cd\u518d\u52a0\\(1\\) <p>Example</p> \\(13\\) \\(-13\\) \u539f\u7801 \\(00001101\\) \\(10001101\\) \u53cd\u7801 \\(00001101\\) \\(11110010\\) \u8865\u7801 \\(00001101\\) \\(111110011\\)"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE/#_4","title":"\u56db\u3001\u5355\u7cbe\u5ea6\u6d6e\u70b9","text":"<pre><code>block-beta\n    columns 3\n  block:group1:3\n  %% columns auto (default)\n  \u7b26\u53f7\u4f4d \u6307\u6570\u4f4d \u5c3e\u6570\u4f4d \n end\n\n  block:group2:3\n    %% columns auto (default)\n     1\u4f4d 8\u4f4d 23\u4f4d\n  end\n</code></pre> <p>Tip</p> <ul> <li>\u7b26\u53f7\u4f4d\uff1a \u6b63\u6570\u4e3a \\(0\\)\uff0c\u8d1f\u6570\u4e3a \\(1\\)</li> <li>\\(step1:\u5341\u8fdb\u5236\u8f6c\u4e8c\u8fdb\u5236\\)</li> <li>\\(step2:\u8f6c\u5316\u62101.XXX\u7684\u5f62\u5f0f,XXX\u5373\u4e3a\u5c3e\u6570\\)</li> <li>\\(step3:\u6307\u6570+127\u504f\u79fb\u91cf\uff0c\u518d\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\\)</li> <li>\\(step4\uff1a\u62fc\u63a5\\)</li> </ul> <p>Example</p> <p>\\(0.75\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u5f62\u5f0f\\)</p> <p>\\(\u2460(0.75)_{10}=(0.11)_{2}\\)</p> <p>\\(\u24610.11=1.1\\times 10^{-1}\uff0c\u5c3e\u6570\u4e3a1\\)</p> <p>\\(\u2462\u6307\u6570\u4f4d\uff088\u4f4d\uff0c\u4e0d\u591f\u524d\u9762\u88650\uff09\uff1a-1+127=126\\Rightarrow 01111110\\)</p> <p>\\(\u2463\u62fc\u63a5\uff1a0 \\text{ }01111110\\text{ } 10000000000000000000000\\)</p>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","title":"\u8ba1\u7b97\u673a\u7f51\u7edc","text":"\u8ba1\u7b97\u673a\u7f51\u7edc  <ul> <li>\u4e00\u3001\u5206\u7c7b<ul> <li>\u4f20\u8f93\u6280\u672f</li> <li>\u8986\u76d6\u8303\u56f4</li> </ul> </li> <li>\u4e8c\u3001\u7ec4\u6210\u4e0e\u7ed3\u6784<ul> <li>\u65e9\u671f\uff1a\u8d44\u6e90\u5b50\u7f51\uff0c\u901a\u4fe1\u5b50\u7f51</li> <li>\u73b0\u4ee3\uff1a\u591a\u5c42ISP</li> </ul> </li> <li>\u4e09\u3001\u53c2\u8003\u6a21\u578b<ul> <li>ISO/OSI\uff087\u5c42\uff09</li> <li>TCP/IP\uff084\u5c42\uff09</li> </ul> </li> <li>\u56db\u3001\u786c\u4ef6</li> <li>\u4e94\u3001\u5b50\u7f51\u5212\u5206<ul> <li>1\u3001\u5730\u5740\u5206\u7c7b</li> <li>2\u3001\u5b50\u7f51\u63a9\u7801</li> <li>3\u3001\u5212\u5206\u95ee\u9898</li> </ul> </li> </ul>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_1","title":"\u4e00\u3001\u5206\u7c7b","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_2","title":"\u4f20\u8f93\u6280\u672f","text":"<ol> <li>\u5e7f\u64ad\u5f0f</li> <li>\u70b9\u5bf9\u70b9</li> </ol>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_3","title":"\u8986\u76d6\u8303\u56f4","text":"<ol> <li>\u5c40\u57df\u7f51</li> <li>\u57ce\u57df\u7f51</li> <li>\u5e7f\u57df\u7f51</li> </ol>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_4","title":"\u4e8c\u3001\u7ec4\u6210\u4e0e\u7ed3\u6784","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_5","title":"\u65e9\u671f\uff1a\u8d44\u6e90\u5b50\u7f51\uff0c\u901a\u4fe1\u5b50\u7f51","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#isp","title":"\u73b0\u4ee3\uff1a\u591a\u5c42ISP","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_6","title":"\u4e09\u3001\u53c2\u8003\u6a21\u578b","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#isoosi7","title":"ISO/OSI\uff087\u5c42\uff09","text":"\u5c42\u7ea7 \u5355\u4f4d \u529f\u80fd \u5e94\u7528\u5c42 \u62a5\u6587 \u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7f51\u7edc\u670d\u52a1 \u8868\u793a\u5c42 \u62a5\u6587 \u6570\u636e\u683c\u5f0f\u8f6c\u6362\u3001\u52a0\u5bc6\u3001\u538b\u7f29 \u4f1a\u8bdd\u5c42 \u62a5\u6587 \u5efa\u7acb\u3001\u7ba1\u7406\u548c\u7ec8\u6b62\u4f1a\u8bdd \u4f20\u8f93\u5c42 \u62a5\u6587 \u7aef\u5230\u7aef \u7684\u53ef\u9760\u6570\u636e\u4f20\u8f93 \u7f51\u7edc\u5c42 \u5206\u7ec4 \u8def\u7531\u9009\u62e9 \u548c\u5206\u7ec4\u8f6c\u53d1 \u6570\u636e\u94fe\u8def\u5c42 \u5e27 \u5e27\u7f16\u7801\u3001\u5dee\u9519\u63a7\u5236\u548c\u6d41\u91cf\u63a7\u5236 \u7269\u7406\u5c42 \u6bd4\u7279 \u6bd4\u7279\u6d41\u7684\u4f20\u8f93\u548c\u7269\u7406\u63a5\u53e3"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#tcpip4","title":"TCP/IP\uff084\u5c42\uff09","text":"\u5c42\u7ea7 \u534f\u8bae \u5e94\u7528\u5c42 \u4f17\u591a\u534f\u8bae \u4f20\u8f93\u5c42 TCP \u57fa\u4e8e\u8fde\u63a5\u7684\u4f20\u8f93\u5c42\u534f\u8bae UDP \u57fa\u4e8e\u65e0\u8fde\u63a5\u7684\u534f\u8bae \u4e92\u8054\u7f51\u5c42 IP\uff08ARP\uff0cRARP\u7b49\uff09\uff1a\u4e0d\u53ef\u9760 \u65e0\u8fde\u63a5 \u7f51\u7edc\u63a5\u53e3\u5c42 802.3\u7b49\u7269\u7406\u534f\u8bae"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_7","title":"\u56db\u3001\u786c\u4ef6","text":"<ul> <li> <p>\u7269\u7406\u5c42\uff1a\u4e2d\u7ee7\u5668\uff0c\u96c6\u7ebf\u5668</p> </li> <li> <p>\u7f51\u5361\uff1a\u6570\u636e\u94fe\u8def\u5c42\uff08\u652f\u6301CSMA/CD\u534f\u8bae</p> </li> <li> <p>\u7f51\u6865\uff1a\u6570\u636e\u94fe\u8def\u5c42\uff08\u6839\u636e\u8f6c\u53d1\u8868\u8fdb\u884c\u5e27\u8f6c\u53d1</p> </li> <li> <p>\u4ea4\u6362\u673a\uff1a</p> <ul> <li> <p>\u4e8c\u5c42\u4ea4\u6362\u673a\uff1a\u6570\u636e\u94fe\u8def\u5c42</p> </li> <li> <p>\u4e09\u5c42\u4ea4\u6362\u673a\uff1a\u7f51\u7edc\u5c42</p> </li> </ul> </li> <li> <p>\u8def\u7531\u5668\uff1a\u7f51\u7edc</p> </li> <li> <p>Modem\uff1a\u7269\u7406\u5c42\uff08\u8109\u51b2\u4fe1\u53f7</p> </li> </ul>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_8","title":"\u4e94\u3001\u5b50\u7f51\u5212\u5206","text":""},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#1","title":"1\u3001\u5730\u5740\u5206\u7c7b","text":"<p>A\uff0cB\uff0cC\uff0cD</p> <p>A\uff1a1-127\uff0824\u4f4d\u7f51\u7edc\u53f7)</p> <p>B\uff1a128-191\uff0816\u4f4d\u7f51\u7edc\u53f7)</p> <p>C\uff1a192-223\uff088\u4f4d\u7f51\u7edc\u53f7)</p> Tip <p>ipv4\uff1a32\u4f4d</p> <p>ipv6\uff1a128\u4f4d</p>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#2","title":"2\u3001\u5b50\u7f51\u63a9\u7801","text":"<p>\u7528\u6765\u5212\u5206\u7f51\u7edc\uff0c\u957f\u5ea6\uff1a\u7f51\u7edc\u53f7+\u5b50\u7f51\u53f7</p> <p>\u8868\u793a\u65b9\u6cd51\uff1aIP/\u7f51\u7edc\u53f7\u4f4d\u6570+\u5b50\u7f51\u4f4d\u6570</p> Question <p>E.g.200.120.23.0/23\u7684\u5b50\u7f51\u63a9\u7801\u662f\uff1a   23\u4e2a1\u4e3a\u63a9\u7801\uff0c\u5373\u5728\u70b9\u5206\u5341\u8fdb\u5236\u4e2d\u8868\u793a\u4e3a255.255.254.0</p> <p>\u8868\u793a\u65b9\u6cd52\uff1aIP\uff08\u76f4\u63a5\u6839\u636e\u662f\u54ea\u4e00\u7c7b\u7f51\u7edc\u5224\u65ad\u63a9\u7801\uff09</p> <p>A\uff1a255.0.0.0</p> <p>B\uff1a255.255.0.0</p> <p>C\uff1a255.255.255.0</p> Question <p>E.g.200.120.23.129\uff0c\u5b50\u7f51\u63a9\u7801\u662f255.255.255.0\uff0c\u7f51\u7edc\u5730\u5740\u662f\u4ec0\u4e48\uff1f</p> <p>\u7f51\u7edc\u5730\u5740\u5373\u63a9\u7801\u63a9\u6389\u540e\u9762\u5168\u96f6\uff0c\u5373200.120.23.129\uff08\u4e5f\u53ef\u7406\u89e3\u4e3a\u539f\u5730\u5740\u548c255.255.255.0\u505aAND\u8fd0\u7b97</p> Quote <p>1.<code>arp</code>\uff1a     \u5730\u5740\u89e3\u6790\u534f\u8bae\uff08Address Resolution Protocol\uff09\uff1a\u7528\u4e8e\u5c06\u7f51\u7edc\u5c42\u7684IP\u5730\u5740\u89e3\u6790\u4e3a\u6570\u636e\u94fe\u8def\u5c42\u7684MAC\u5730\u5740\u3002\u5728\u7f51\u7edc\u8bca\u65ad\u4e2d\uff0c <code>arp</code> \u547d\u4ee4\u53ef\u4ee5\u7528\u6765\u67e5\u770bARP\u7f13\u5b58\u8868\uff0c\u4e86\u89e3IP\u5730\u5740\u4e0eMAC\u5730\u5740\u7684\u6620\u5c04\u5173\u7cfb\u3002</p> <p>2.<code>ipconfig</code>\uff08\u5728Windows\u7cfb\u7edf\u4e2d\uff09\uff1a     \u7528\u4e8e\u663e\u793a\u548c\u914d\u7f6e\u7f51\u7edc\u9002\u914d\u5668\u7684TCP/IP\u8bbe\u7f6e\u3002\u5b83\u53ef\u4ee5\u663e\u793a\u5f53\u524d\u7684IP\u5730\u5740\u3001\u5b50\u7f51\u63a9\u7801\u3001\u9ed8\u8ba4\u7f51\u5173\u3001DNS\u670d\u52a1\u5668\u7b49\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u91ca\u653e\u548c\u66f4\u65b0DHCP\u5206\u914d\u7684IP\u5730\u5740\u3002</p> <p>3.<code>route</code>\uff1a     \u7528\u4e8e\u663e\u793a\u548c\u4fee\u6539IP\u8def\u7531\u8868\u4e2d\u7684\u6761\u76ee\u3002 route \u547d\u4ee4\u53ef\u4ee5\u6dfb\u52a0\u3001\u5220\u9664\u6216\u4fee\u6539\u8def\u7531\u8868\u4e2d\u7684\u8def\u7531\u4fe1\u606f\uff0c\u4ece\u800c\u63a7\u5236\u6570\u636e\u5305\u7684\u8f6c\u53d1\u8def\u5f84\u3002</p> <p>4.<code>ping</code>\uff1a     \u7528\u4e8e\u6d4b\u8bd5\u7f51\u7edc\u8fde\u63a5\u7684\u8fde\u901a\u6027\u3002 <code>ping</code> \u547d\u4ee4\u53d1\u9001ICMP\uff08Internet Control Message Protocol\uff09\u56de\u663e\u8bf7\u6c42\u6d88\u606f\u7ed9\u76ee\u6807\u4e3b\u673a\uff0c\u5e76\u7b49\u5f85\u56de\u663e\u5e94\u7b54\uff0c\u4ee5\u6b64\u6765\u68c0\u67e5\u7f51\u7edc\u7684\u8fde\u901a\u6027\u548c\u5ef6\u8fdf\u3002</p>"},{"location":"Overview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#3","title":"3\u3001\u5212\u5206\u95ee\u9898","text":"Question <p>203.120.111.0/24\uff0c\u73b0\u5728\u67093\u4e2a\u8def\u7531\u5668\u76f8\u8fde\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5404\u81ea\u8fde\u63a5\u4e00\u4e2a\u5c40\u57df\u7f51\uff08\u6700\u591a30\u53f0\u673a\u5668\uff09\uff0c\u8bf7\u7ed9\u51fa\u4e00\u79cdIP\u5212\u5206\u65b9\u5f0f</p> <p>\u5212\u5206\u62103\u4e2a\u5b50\u7f51\uff0c\u539f\u6765\u7f51\u7edc\u5730\u574024\u4f4d \u4e00\u51713+24=27\uff0c\u5373\u5b50\u7f51\u63a9\u7801\u4e3a27\u4e2a1\uff0c\u5316\u4e3a\u70b9\u5206\u5341\u8fdb\u5236\u4e3a255.255.255.224</p> <pre><code>graph LR\nsubgraph \"203.120.111\"\n    A[\u7f51\u7edc\u53f7]\nend\nsubgraph \"XXX\"\n    B[\u5b50\u7f51\u53f7&lt;br/&gt;000-\u5b50\u7f511&lt;br/&gt;001-\u5b50\u7f512&lt;br/&gt;010-\u5b50\u7f513]\nend\nsubgraph \"XXXXX\"\n    C[\u4e3b\u673a\u53f7&lt;br/&gt;00001-11110&lt;br/&gt;\u517130\u4e2a\u4e3b\u673a]\nend\n\nA --&gt; B\nB --&gt; C\n\nstyle A fill:#f9f,stroke:#333,stroke-width:2px\nstyle B fill:#bbf,stroke:#333,stroke-width:2px\nstyle C fill:#bfb,stroke:#333,stroke-width:2px</code></pre> \u7f51\u7edc\u540d\u79f0 \u7f51\u7edc\u5730\u5740 \u53ef\u7528IP\u8303\u56f4 \u5e7f\u64ad\u5730\u5740 \u5b50\u7f51\u63a9\u7801 \u5b50\u7f511 203.120.111.0 203.120.111.1 - 203.120.111.30 203.120.111.31 255.255.255.224 \u5b50\u7f512 203.120.111.32 203.120.111.33 - 203.120.111.62 203.120.111.63 255.255.255.224 \u5b50\u7f513 203.120.111.64 203.120.111.65 - 203.120.111.94 203.120.111.95 255.255.255.224"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/","title":"\u8f6f\u4ef6\u5de5\u7a0b","text":"\u8f6f\u4ef6\u5de5\u7a0b  <ul> <li>\u4e00\u3001\u8f6f\u4ef6\u5de5\u7a0b\u6982\u8981<ul> <li>1\u3001\u5b9a\u4e49</li> <li>2\u3001\u76ee\u6807</li> </ul> </li> <li>\u4e8c\u3001\u8f6f\u4ef6\u751f\u5b58\u5468\u671f\u548c\u6a21\u578b<ul> <li>1\u3001\u751f\u5b58\u5468\u671f</li> <li>2\u3001\u8f6f\u4ef6\u8fc7\u7a0b\u6a21\u578b<ul> <li>(1)\u7011\u5e03\u6a21\u578b</li> <li>(2)\u539f\u578b\u6a21\u578b</li> <li>(3)\u87ba\u65cb\u6a21\u578b</li> <li>(4)\u6784\u4ef6\u96c6\u6210\u6a21\u578b</li> </ul> </li> <li>3\u3001\u8fc7\u7a0b\u6a21\u578b\u65b0\u53d1\u5c55<ul> <li>(1)\u7edf\u4e00\u8fc7\u7a0b RUP (Rational United Process)</li> <li>(2)\u654f\u6377\u8fc7\u7a0b</li> </ul> </li> </ul> </li> <li>\u4e09\u3001\u8f6f\u4ef6\u5f00\u53d1\u65b9\u6cd5\u548c\u5de5\u5177<ul> <li>1\u3001\u7ed3\u6784\u5316<ul> <li>\u5de5\u5177</li> </ul> </li> <li>2\u3001\u9762\u5411\u5bf9\u8c61<ul> <li>\u5de5\u5177UML(Unified Modeling Language)<ul> <li>\uff081\uff09\u7528\u4f8b\u56fe</li> <li>\uff082\uff09\u6d3b\u52a8\u56fe</li> <li>\uff083\uff09\u7c7b\u56fe</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#_1","title":"\u4e00\u3001\u8f6f\u4ef6\u5de5\u7a0b\u6982\u8981","text":""},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#1","title":"1\u3001\u5b9a\u4e49","text":"<p>\u7814\u7a76\u5982\u4f55\u7528\u7cfb\u7edf\u5316\u3001\u89c4\u8303\u5316\u5de5\u7a0b\u539f\u5219\u548c\u65b9\u6cd5\u6307\u5bfc\u8f6f\u4ef6\u5f00\u53d1\u7ef4\u62a4\u7684\u5b66\u79d1</p>"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#2","title":"2\u3001\u76ee\u6807","text":"<ul> <li>\u63d0\u9ad8\u8f6f\u4ef6\u5f00\u53d1\u6548\u7387</li> <li>\u63d0\u9ad8\u8f6f\u4ef6\u8d28\u91cf</li> <li>\u63d0\u9ad8\u8f6f\u4ef6\u53ef\u7ef4\u62a4\u6027</li> </ul>"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#_2","title":"\u4e8c\u3001\u8f6f\u4ef6\u751f\u5b58\u5468\u671f\u548c\u6a21\u578b","text":""},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#1_1","title":"1\u3001\u751f\u5b58\u5468\u671f","text":"<pre><code>flowchart LR\n    A[\u9700\u6c42\u5206\u6790] --&gt; B[\u8f6f\u4ef6\u5206\u6790]\n    B --&gt; C[\u8f6f\u4ef6\u8bbe\u8ba1]\n    C --&gt; D[\u7f16\u7801]\n    D --&gt; E[\u8f6f\u4ef6\u6d4b\u8bd5]\n    E --&gt; F[\u8fd0\u7ef4]\n\n</code></pre>"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#2_1","title":"2\u3001\u8f6f\u4ef6\u8fc7\u7a0b\u6a21\u578b","text":""},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#1_2","title":"(1)\u7011\u5e03\u6a21\u578b","text":"<p>\u9636\u6bb5\u95f4\u987a\u5e8f\u6027\u548c\u4f9d\u8d56\u6027</p> <ul> <li>\u5fc5\u987b\u7b49\u5f85\u524d\u4e00\u9636\u6bb5</li> <li>\u4f9d\u8d56\u4e8e\u6587\u6863</li> <li>\u7f16\u7801\u9636\u6bb5\u624d\u5b8c\u6210\u7a0b\u5e8f</li> </ul> <p>Danger</p> <ul> <li>\u5b58\u5728\u95ee\u9898:   \u9700\u6c42\u5206\u6790 \u5728\u5f00\u53d1\u521d\u671f\u5bb9\u6613\u51fa\u9519</li> </ul> <pre><code>    flowchart TD\n        A[Requirements] --&gt; B[Design]\n        B --&gt; C[Implementation]\n        C --&gt; D[Verification]\n        D --&gt; E[Maintenance]\n\n</code></pre>"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#2_2","title":"(2)\u539f\u578b\u6a21\u578b","text":""},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#3","title":"(3)\u87ba\u65cb\u6a21\u578b","text":"<ol> <li>\u5178\u578b\u7684\u8fed\u4ee3\u6a21\u578b</li> <li>\u4f9d\u8d56\u4e8e\u98ce\u9669\u8bc4\u4f30\u6210\u8d25 </li> </ol>"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#4","title":"(4)\u6784\u4ef6\u96c6\u6210\u6a21\u578b","text":"<ol> <li>\u57fa\u4e8e\u6784\u4ef6</li> <li>\u4e0d\u65ad\u8fed\u4ee3</li> </ol>"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#3_1","title":"3\u3001\u8fc7\u7a0b\u6a21\u578b\u65b0\u53d1\u5c55","text":""},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#1-rup-rational-united-process","title":"(1)\u7edf\u4e00\u8fc7\u7a0b RUP (Rational United Process)","text":"<p>\u57fa\u4e8e\u8fed\u4ee3\uff0c\u56db\u4e2a\u9636\u6bb5(\u521d\u59cb\u3001\u7ec6\u5316\u3001\u6784\u9020\u3001\u4ea4\u4ed8)</p>"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#2_3","title":"(2)\u654f\u6377\u8fc7\u7a0b","text":"<p>\u4ee5\u4eba\u4e3a\u6838\u5fc3\uff0c\u8fed\u4ee3\u7684\uff0c\u5faa\u5e8f\u6e10\u8fdb\u7684</p> <p>\u628a\u5927\u9879\u76ee\u5206\u4e3a\u5c0f\u9879\u76ee\uff0c\u5206\u522b\u5b8c\u6210\uff0c\u8fc7\u7a0b\u4e2d\u8f6f\u4ef6\u4e00\u76f4\u53ef\u7528</p>"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#_3","title":"\u4e09\u3001\u8f6f\u4ef6\u5f00\u53d1\u65b9\u6cd5\u548c\u5de5\u5177","text":"<p>Tip</p> <p>\u4e2a\u6027\u5316\u2192\u7ed3\u6784\u5316\u2192\u9762\u5411\u5bf9\u8c61\u2192\u57fa\u4e8e\u6784\u4ef6\u2192\u65b0\u65b9\u6cd5</p>"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#1_3","title":"1\u3001\u7ed3\u6784\u5316","text":"<p>\u9762\u5411\u6570\u636e\u6d41\uff0c\u81ea\u9876\u5411\u4e0b\u9010\u6b65\u6c42\u7cbe</p>"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#_4","title":"\u5de5\u5177","text":"\u5efa\u6a21\u7c7b\u578b \u5de5\u5177/\u63cf\u8ff0 \u6570\u636e\u6d41\u56fe (DFD) \u529f\u80fd\u5efa\u6a21 \u6570\u636e\u5b57\u5178 (DD) \u52a0\u5de5\u8bf4\u660e (PSPEC) \u7ed3\u6784\u56fe (SC) \u5b9e\u4f53\u5173\u7cfb\u56fe (EC) \u6570\u636e\u5efa\u6a21 \u72b6\u6001\u56fe \u884c\u4e3a\u5efa\u6a21"},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#2_4","title":"2\u3001\u9762\u5411\u5bf9\u8c61","text":""},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#umlunified-modeling-language","title":"\u5de5\u5177UML(Unified Modeling Language)","text":""},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#1_4","title":"\uff081\uff09\u7528\u4f8b\u56fe","text":""},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#2_5","title":"\uff082\uff09\u6d3b\u52a8\u56fe","text":""},{"location":"Overview/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/#3_2","title":"\uff083\uff09\u7c7b\u56fe","text":"<pre><code>\nclassDiagram\n    Animal &lt;|-- Duck\n    Animal &lt;|-- Fish\n    Animal &lt;|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n        +String beakColor\n        +swim()\n        +quack()\n    }\n    class Fish{\n        -int sizeInFeet\n        -canEat()\n    }\n    class Zebra{\n        +bool is_wild\n        +run()\n    }\n</code></pre>"}]}